import v4.{CodeHeader,CodeFun}

class CCodeGen(within:Any) extends CodeHeader(within) {
  import scala.reflect.runtime.universe._
  import Macros._

  // try to find a constructor for an existing class
  def constr(n:String):Option[String] = { // XXX: pass data types (to create on the fly the struct)
    if (!n.endsWith(".apply")) None
    else { try { Some(addType(n.substring(0,n.length-6))) } catch { case _:Throwable => None } }
  }

  import scala.collection.mutable.HashMap
  val base_ops= HashMap[String,String](
    ("$times","*"),("$plus","+"),("$minus","-"),("$div","/"),("$percent","%"),
    ("$greater",">"),("$greater$eq",">="),("$less","<"),("$less$eq","<="),
    ("$eq$eq","=="),("$amp$amp","&&"),("$bar$bar","||")
  );

  // XXX: need to pass back a type to cast properly the tuple into corresponding struct
  // XXX: type of expression, declaration to hoist at the function beginning
  def cc(tree:Tree):String = tree match { // XXX: return type
    // see scala/reflect/internal/Trees.scala in scala-reflect-src
    case Apply(fun@Select(qual,name),args) => base_ops.get(name.toString) match {
      case Some(op) => "("+cc(qual)+" "+op+" "+cc(args.head)+")"
      case None => val f=cc(fun);
        constr(f) match {
        // XXX: ditto if we match a custom class as well.
          case Some(cl) => "("+cl+"){"+args.map{x=>cc(x)}.mkString(",")+"}"
          // XXX: continue this
          case None if (f.startsWith("scala.Tuple")) => "(tuple??){"+args.map{x=>cc(x)}.mkString(",")+"}"
          case None => f+"("+args.map{x=>cc(x)}.mkString(",")+")"
        }
    }
    case ValDef(_,name,tp,rhs) =>
      (try { addType(tp.toString) } catch { case _:Throwable => tp.toString }) +" "+name.toString+" = "+cc(rhs)+"; "
    case Literal(Constant(x)) =>
      if (x.isInstanceOf[Char]) "'"+x.toString+"'"
      else if (x.isInstanceOf[String]) "\""+x.toString.replace("\"","\\\"")+"\""
      else x.toString
    case Select(This(_),name) => name.toString
    case Select(qual,name) => cc(qual)+"."+name
    case If(cond,thenp,elsep) => "(("+cc(cond)+")?("+cc(thenp)+"):("+cc(elsep)+"))"
    case Ident(name) => name.toString
    // Ident(newTermName("_arg"))
    //case _ => "unknown "+tree.getClass
    // XXX: issue: we don't know exactely how to bind
    //case Match(selector, cases) => selector+" match { \n"+cases.map{c=>cc(c)}.mkString("\n")+"} "
    //case CaseDef(pat, guard, body) => "if( is("+cc(pat)+" && "+cc(guard)+") { "+cc(body)+" } "
    case Match(sel,List(CaseDef(pat,guard,body))) => cc(body)
    case Bind(name, body) => name.toString
    case _ => showRaw(tree)
  }

  def push[T,U](f0:T=>U) = {
    if (!f0.isInstanceOf[TypedFunction]) sys.error("Push only accepts typed functions.")
    val f = f0.asInstanceOf[TypedFunction];
    add(new CodeFun {
      val tpIn = f.typeIn
      val tpOut = f.typeOut
      val body = f.tree match {
        case Block(stats, expr) => stats.map{x=>cc(x)+"; "}.mkString("")+"_res="+cc(expr)
        case expr => "_res="+cc(expr)
      }
    });
  }
  // XXX: Get the type of a variable
  // XXX: get the type of a function
  // XXX: maintain a list of live variables in the function (?)
}

/*
    // XXX: how to typecheck and infer types as much as possible (reuse compiler)
    import scala.reflect.runtime.{universe => u}
    import scala.tools.reflect.ToolBox
    import scala.reflect.runtime.{currentMirror=>m}
    //import u._
    val tb = m.mkToolBox()
    val b2 = tb.typeCheck(f.tree)
*/

object TestMacros extends App {
  import Macros._
  val g=new CCodeGen(this)
  def cout = { println("-------------------------------------------------"); println(g.flush) }

  // External structures
  case class Mat(rows:Int, cols:Int)
  type Subword = (Int,Int)
  def in(x:Int):Char = '?'
/*OK
  // Dummy examples
  def foo = tree{ (x:Mat) => Mat(x.cols,x.rows)  }
  def foo2 = tree{ (x:(Int,(Int,Int))) => x._1 * x._2._1 + x._2._2 }
  println("foo    : "+g.push(foo))
  println("foo2   : "+g.push(foo2))
  cout
  // Brackets
  def bAre = tree { (sw: Subword) => sw._2 > sw._1+1 && in(sw._1) == '(' && in(sw._2-1) == ')' }
  def bSingle = tree { (in:(Char,(Int,Char))) => in._2._1 }
  def bSum = tree { (in:(Int,Int)) => in._1+in._2 }
  println("Brackets:")
  println("bAre    : "+g.push(bAre))
  println("bSingle : "+g.push(bSingle))
  println("bSum    : "+g.push(bSum))
  cout
  // El Mamun
  def eAdd = tree { (x:(Int,(Char,Int))) => x._1 + x._2._2 }
  def eMul = tree { (x:(Int,(Char,Int))) => x._1 * x._2._2 }
  def ePlusF = tree { (c:Char) => c == '+' }
  def eTimesF = tree { (c:Char) => c == '*' }
  println("El Mamun:")
  println("eAdd    : "+g.push(eAdd))
  println("eMul    : "+g.push(eMul))
  println("ePlusF  : "+g.push(ePlusF))
  println("eTimesF : "+g.push(eTimesF))
  cout
*/
  // Matrix chain multiplication
  type mAlph = (Int,Int)
  type mAns = (Int,Int,Int)
  def mSingle = tree { (i:mAlph) => (i._1, 0, i._2) }
  def mMult = tree { (x:(mAns,mAns)) => val m1=x._1; val m2=x._2; (m1._1, m1._2 + m2._2 + m1._1 * m1._3 * m2._3, m2._3) }
  //def mMult = tree { (x:(mAnswer,mAnswer)) => { x match { case ((r1,m1,c1),(r2,m2,c2)) => (r1, m1 + m2 + r1 * c1 * c2, c2) } } }
  //def mMult = tree { (x:(mAnswer,mAnswer)) => { val y=x; val ((r1,m1,c1),(r2,m2,c2))=y; (r1, m1 + m2 + r1 * c1 * c2, c2) } }
  //val mH = (l:List[mAnswer]) => l match { case Nil => Nil case _ => l.minBy(_._2)::Nil }
  println("MatrixMult:")
  println("mSingle : "+g.push(mSingle))
  println("mMult   : "+g.push(mMult))
  cout


  // Brackets (verbatim)
  /*
  def bAre = tree { (sw: Subword) => sw match { case(i,j) => j > i+1 && in(i) == '(' && in(j-1) == ')' } }
  def bSingle = tree { (in:(Char,(Int,Char))) => in match { case (c1,(i,c2)) => i } }
  def bSum = tree { (in:(Int,Int)) => in match { case (x,y) => x+y } }
  println("bAre    : "+g.push(bAre))
  println("bSingle : "+g.push(bSingle))
  println("bSum    : "+g.push(bSum))
  cout
  */
  /*
  CLangParser.fun("(Int, Int)","Boolean","_arg._2.>(_arg._1.+(1)).&&(TestMacros.this.in(_arg._1).==('(')).&&(TestMacros.this.in(_arg._2.-(1)).==(')'))")
  CLangParser.fun("(Char, (Int, Char))","Int","_arg._2._1")
  CLangParser.fun("(Int, Int)","Int","val z:String=\"foo\"; if (true) false else true; _arg._1.+(_arg._2)")
  CLangParser.fun("(Int, Int)","(Int,Int)","if (_arg._1>_arg._2 || _arg._1<_arg._2 || _arg._1>=_arg._2 || _arg._1<=_arg._2 ) (3, 2) else (2, 3)")
  */
}
