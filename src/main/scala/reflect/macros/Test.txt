object TestMacros extends App {
  import Macros._

  case class Mat(rows:Int, cols:Int)
  def foo = tree{ (x:Mat) => x.rows * x.cols }
  println(foo.toString)

  def foo2 = tree{ (x:(Int,(Int,Int))) => x._1 * x._2._1 + x._2._2 }
  println(foo2.toString)
}

/*
  import scala.reflect.runtime.{universe => u}
  import scala.tools.reflect.Eval

  val tr = u.reify {
    def f:(String=>String) = new (String=>String) {
      override def toString = "x+x"
      def apply(x:String):String = x+x
    }
    f
  }
  println (u showRaw tr)
  val f=tr.eval
*/
