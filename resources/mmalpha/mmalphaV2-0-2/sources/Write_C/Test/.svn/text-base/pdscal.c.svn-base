/* system pdscal */

/* C-Code generated by Alpha Code Generator version 1.2 */

#include <math.h>
typedef struct { int value;
		 int computed; } intvar;
typedef struct { int value;
		 int computed; } boolvar;
typedef struct { double value;
		 int computed; } realvar;
double atof();
int    atoi();

#define min(x,y) ((x)<(y)?(x):(y))
#define max(x,y) ((x)>(y)?(x):(y))
#define INFINITY 0x7fffffff

/* parameters */

/* input variables */
char __s[32];
realvar _V[8];
#define V(i,p)	_V[(i)+4*(p)-5]
realvar _pivot;
#define pivot()	_pivot

/* output variables */
realvar _Vdiv[8];
#define Vdiv(i,p)	_Vdiv[(i)+4*(p)-5]

/* no local variables */

static double compute_V(i,p)
int i,p;
{
  realvar *tmp;
/* printf("Computing: V[%d,%d]\n" ,i,p); */
  tmp = &(V(i,p));
  if (!tmp->computed) {
          printf("Input V[%d,%d] =" ,i,p);
     gets(__s);
     tmp->value = atof(__s);
     tmp->computed = 1;}
  return tmp->value;
}

static double compute_pivot()
{
  realvar *tmp;
/* printf("Computing: pivot[]\n"); */
  tmp = &(pivot());
  if (!tmp->computed) {
          printf("Input pivot =" );
     gets(__s);
     tmp->value = atof(__s);
     tmp->computed = 1;}
  return tmp->value;
}

static double compute_Vdiv();

/* --let equations */
static double compute_Vdiv(i,p)
int i,p;
{
  realvar *tmp;
/* printf("Computing: Vdiv[%d,%d]\n" ,i,p); */
  tmp = &(Vdiv(i,p));
  if (!tmp->computed) {
          tmp->value = ( -p+1>=0 )  ? ( compute_V(i,p) ) : 
         ( p-2==0 )  ? ( ( i-3>=0 && -i+4>=0 )  ? 
                     ( compute_V(i,p) / compute_pivot() ) : 
                  ( i-1>=0 && -i+2>=0 )  ? ( compute_V(i,p) ) : 
                  ( printf("? case error\n"), exit(-1)) ) : 
         ( p-3>=0 )  ? ( compute_V(i,p) / compute_pivot() ) : 
         ( printf("? case error\n"), exit(-1));
     tmp->computed = 1;}
  return tmp->value;
}

int main()
{
   int p, i ;
   
   /* --inputs */
   for (i=1; i<=4; i++)
   {  for (p=1; p<=min(2,-i+5); p++)
      {  printf("V[%d,%d]= %f\n", i,p, compute_V(i,p) );
      }
   }
   printf("pivot = %f\n" , compute_pivot() );
   /* --outputs */
   for (i=1; i<=4; i++)
   {  for (p=1; p<=min(2,-i+5); p++)
      {  printf("Vdiv[%d,%d]= %f\n", i,p, compute_Vdiv(i,p) );
      }
   }
}
