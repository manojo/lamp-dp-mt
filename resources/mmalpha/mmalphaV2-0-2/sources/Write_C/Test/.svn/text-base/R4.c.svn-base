/* system conv_real_R4 */

/* C-Code generated by Alpha Code Generator version 1.2 */

#include <math.h>
typedef struct { int value;
		 int computed; } intvar;
typedef struct { int value;
		 int computed; } boolvar;
typedef struct { double value;
		 int computed; } realvar;
double atof();
int    atoi();

#define min(x,y) ((x)<(y)?(x):(y))
#define max(x,y) ((x)>(y)?(x):(y))
#define INFINITY 0x7fffffff
#define SHR(x,y) ((x)/(double)(1<<(y)))
#define SHL(x,y) ((x)*(double)(1<<(y)))
#define EXP(x,y) pow((x),(y))
#define TRUNCATE(x) ((int)(x))
#define CEILING(x) ((int)(ceil(x)))
#define FLOOR(x) ((int)(floor(x)))
#define ROUND(x) ((int)(rint(x)))
#define FLOAT(x) ((double)(x))

/* parameters */
#define W 8

/* input variables */
char __s_[32];
realvar __Xin;
#define Xin()	__Xin

/* output variables */
intvar __XT[8];
#define XT(k)	__XT[(k)]

/* local variables */
intvar __Y[8];
#define Y(k)	__Y[(k)]
intvar __Z[8];
#define Z(k)	__Z[(k)]

static double compute_Xin()
{
  realvar *tmp;
/* printf("Computing: Xin[]\n"); */
  tmp = &(Xin());
  if (!tmp->computed) {
          printf("Input Xin =" );
     gets(__s_);
     tmp->value = atof(__s_);
     tmp->computed = 1;}
  return tmp->value;
}

static int compute_XT();

static int compute_Y();

static int compute_Z();

/* --let equations */
static int compute_Y(k)
int k;
{
  intvar *tmp;
/* printf("Computing: Y[%d]\n" ,k); */
  tmp = &(Y(k));
  if (!tmp->computed) {
     
          tmp->value = 
     ( k==0 )  ? ( TRUNCATE(compute_Xin() * (EXP(2.0,(2*W)))) ) : 
         ( k-1>=0 && -k+W-1>=0 )  ? ( 4 * compute_Z(k-1) ) : 
         ( printf("? case error\n"), exit(-1));
     tmp->computed = 1;}
  return tmp->value;
}

static int compute_Z(k)
int k;
{
  intvar *tmp;
/* printf("Computing: Z[%d]\n" ,k); */
  tmp = &(Z(k));
  if (!tmp->computed) {
          tmp->value = compute_Y(k) - (SHL(compute_XT(k),(2*W)));
     tmp->computed = 1;}
  return tmp->value;
}

static int compute_XT(k)
int k;
{
  intvar *tmp;
/* printf("Computing: XT[%d]\n" ,k); */
  tmp = &(XT(k));
  if (!tmp->computed) {
          tmp->value = (compute_Y(k) >= (SHL(3,(2*W-1)))) ? (2) : ((
             compute_Y(k) < (SHL(3,(2*W-1))) && 
             compute_Y(k) >= (SHL(1,(2*W-1)))) ? (1) : ((
                 compute_Y(k) < (SHL(1,(2*W-1))) && 
                 compute_Y(k) >= -(SHL(1,(2*W-1)))) ? (0) : ((
                     compute_Y(k) < -(SHL(1,(2*W-1))) && 
                     compute_Y(k) >= -(SHL(3,(2*W-1)))) ? (-1) : (-2))));
     tmp->computed = 1;}
  return tmp->value;
}

int main()
{
   int k ;
   
   /* --inputs */
   printf("Xin = %f\n" , compute_Xin() );
   /* --outputs */
   for (k=0; k<=W-1; k++)
   {  printf("XT[%d]= %d\n", k, compute_XT(k) );
   }
}
