/* Generated: 30/8/2002 at 16:27:27 */
/* Code generated by MMAlpha code generator version 0.2.6 (02/02/2001 11:35) FQ */

#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <assert.h>
 
 

#define min(a,b) ((a) > (b) ? (b) : (a))
#define max(a,b) ((a) > (b) ? (a) : (b))
#define power(a, i) ((a)^(i))
static int rfloor (int a, int b) {
  assert (b>0);
  return ((a<0) ? ((a+1)/b)-1 : a/b);
}
static int rceil (int a, int b) {
  assert (b>0);
  return ((a>0) ?  ((a-1)/b)+1 : a/b);
}

void SimpleEx(float* _a, float* _b, float* _c) {
  /* aliases for all variables */
#define a(n) _a[(-1 + (n))]
#define b(n, i) _b[(-1 + 3*(i) + (n))]
#define c(n, i) _c[(-1 + 3*(i) + (n))]
#define A(t, p) _A[(5*(p) + -7 + (t))]
#define Amirr(t, p1, p2) _Amirr[(-1 + (p2))]
#define B_mirr(t, p1, p2) _B_mirr[(5*(p2) + (p1))]
#define B_reg(t, p1, p2) _B_reg[(-5 + 5*(p2) + (p1))]
#define C(t, p) _C[(5*(p) + -8 + (t))]
#define outc(t, p) c(p, (-4 + t))
   
  /* allocate memory for local variables */
  float * _A = (float *) malloc(sizeof(float)*(35));
  float * _Amirr = (float *) malloc(sizeof(float)*(3));
  float * _B_mirr = (float *) malloc(sizeof(float)*(35));
  float * _B_reg = (float *) malloc(sizeof(float)*(35));
  float * _C = (float *) malloc(sizeof(float)*(35));
  
   
  /* loops variables */
  int i;
  int n;
  int p;
  int p1;
  int p2;
  int t;
   
  /* a few loops */
  t = 1;
  for (p1 = 0; p1 <= 4; ++p1) {
    for (p2 = p1; p2 <= (2 + p1); ++p2) {
      B_mirr(t, p1, p2) = b((-p1 + p2 + t), p1);
    }
  }
  p1 = 0;
  for (p2 = 1; p2 <= 3; ++p2) {
    Amirr(t, p1, p2) = a(p2);
  }
  t = 2;
  for (p = 1; p <= 3; ++p) {
    A(t, p) = Amirr(1, 0, p);
  }
  for (p1 = 0; p1 <= 4; ++p1) {
    for (p2 = (1 + p1); p2 <= (3 + p1); ++p2) {
      B_reg(t, p1, p2) = B_mirr(1, p1, (-1 + p2));
    }
  }
  /* dead code removed */
  t = 3;
  for (p = 2; p <= 4; ++p) {
    A(t, p) = A((-1 + t), (-1 + p));
  }
  for (p = 1; p <= 3; ++p) {
    C(t, p) = (B_reg(2, (-3 + t), p) + A((-1 + t), p));
  }
  for (t = 4; t <= 6; ++t) {
    for (p = (-1 + t); p <= (1 + t); ++p) {
      A(t, p) = A((-1 + t), (-1 + p));
    }
    for (p = (-2 + t); p <= t; ++p) {
      C(t, p) = (B_reg(2, (-3 + t), p) + A((-1 + t), p));
    }
    for (p = 1; p <= 3; ++p) {
      outc(t, p) = C((-1 + t), (-4 + p + t));
    }
  }
  t = 7;
  for (p = 5; p <= 7; ++p) {
    C(t, p) = (B_reg(2, (-3 + t), p) + A((-1 + t), p));
  }
  for (p = 1; p <= 3; ++p) {
    outc(t, p) = C((-1 + t), (-4 + p + t));
  }
  t = 8;
  for (p = 1; p <= 3; ++p) {
    outc(t, p) = C((-1 + t), (-4 + p + t));
  }
   
  /* clean up local variables' memory */
  /* commented out because it was crashing at run time*/
  /*
  free(_A);
  free(_Amirr);
  free(_B_mirr);
  free(_B_reg);
  free(_C);
  
  */
  /* and finally undef aliases */
#undef a
#undef b
#undef c
#undef A
#undef Amirr
#undef B_mirr
#undef B_reg
#undef C
#undef outc
}
 
int main (void) {
#define a(n) _a[(-1 + (n))]
#define b(n, i) _b[(-1 + 3*(i) + (n))]
#define c(n, i) _c[(-1 + 3*(i) + (n))]
  float * _a = (float *) malloc(sizeof(float)*(3));
  float * _b = (float *) malloc(sizeof(float)*(15));
  float * _c = (float *) malloc(sizeof(float)*(15));
  int i;
  int n;
   
  for (n = 1; n <= 3; ++n) {
     
    fscanf(stdin, "%g", &(a(n)));
     
  }
  for (n = 1; n <= 3; ++n) {
    for (i = 0; i <= 4; ++i) {
       
      fscanf(stdin, "%g", &(b(n, i)));
       
    }
  }
  SimpleEx(_a, _b, _c);
  for (n = 1; n <= 3; ++n) {
    for (i = 0; i <= 4; ++i) {
      fprintf(stdout, "%g\n", c(n, i));
       
    }
  }
   
  free(_a);
  free(_b);
  free(_c);
#undef a
#undef b
#undef c
   exit(0);
}
