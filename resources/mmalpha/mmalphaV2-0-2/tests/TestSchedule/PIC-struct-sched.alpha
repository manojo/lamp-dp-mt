system matvect1 :{K | 2<=K}
                (a : {t2,p2 | 1<=t2<=K; 1<=p2<=K} of integer; 
                 v : {k,j | k=1; 1<=j<=K} of integer)
       returns  (c : {k,j | 1<=k<=K; j=K} of integer);
var
  C : {i,j | 1<=i<=K; 0<=j<=K} of integer;
  element : {i,j | 1<=i<=K; 1<=j<=K} of integer;
let
  element[i,j] = if (v[1,j] = 0[]) then 0[] else if (v[1,j] = 1[]) then a[j,i] else -a[j,i];
  C[i,j] = 
      case
        { | j=0} : 0[];
        { | 1<=j} : C[i,j-1] + element[i,j];
      esac;
  c[k,j] = C[k,j];
tel;

system matvect2 :{K | 2<=K}
                (a : {t2,p2 | 1<=t2<=K; 1<=p2<=K} of integer; 
                 v : {k,j | k=1; 1<=j<=K} of integer)
       returns  (c : {k,j | 1<=k<=K; j=K} of integer);
var
  C : {i,j | 1<=i<=K; 0<=j<=K} of integer;
  element : {i,j | 1<=i<=K; 1<=j<=K} of integer;
let
  element[i,j] = if (v[1,j] = 0[]) then 0[] else if (v[1,j] = 1[]) then a[j,i] else -a[j,i];
  C[i,j] = 
      case
        { | j=0} : 0[];
        { | 1<=j} : C[i,j-1] + element[i,j];
      esac;
  c[k,j] = C[k,j];
tel;

system matvect3 :{K | 2<=K}
                (a : {t2,p2 | 1<=t2<=K; 1<=p2<=K} of integer; 
                 v : {k,j | k=1; 1<=j<=K} of integer)
       returns  (c : {k,j | 1<=k<=K; j=K} of integer);
var
  C : {i,j | 1<=i<=K; 0<=j<=K} of integer;
  element : {i,j | 1<=i<=K; 1<=j<=K} of integer;
let
  element[i,j] = if (v[1,j] = 0[]) then 0[] else if (v[1,j] = 1[]) then a[j,i] else -a[j,i];
  C[i,j] = 
      case
        { | j=0} : 0[];
        { | 1<=j} : C[i,j-1] + element[i,j];
      esac;
  c[k,j] = C[k,j];
tel;

system oneStage :{K | 2<=K}
                (L : {t2,p2 | 1<=t2<=K; 1<=p2<=K} of integer; 
                 C : {t2,p2 | 1<=t2<=K; 1<=p2<=K} of integer; 
                 LH : {t2,p2 | 1<=t2<=K; 1<=p2<=K} of integer; 
                 y0 : {t2,p2 | 1<=t2<=K; p2=1} of integer; 
                 dhatprevious : {t2,p2 | 0<=t2<=K-1; p2=1} of integer; 
                 dhat : {t2,p2 | 0<=t2<=K-1; p2=1} of integer; 
                 dhatnext : {t2,p2 | 0<=t2<=K-1; p2=1} of integer)
       returns  (dhatNew : {t2,p2 | t2=K+4; 1<=p2<=K} of integer);
var
  dhatpreviousIN : {k,j | k=1; 1<=j<=K} of integer;
  dhatIN : {k,j | k=1; 1<=j<=K} of integer;
  dhatnextIN : {k,j | k=1; 1<=j<=K} of integer;
  vLH : {k,j | 1<=k<=K; j=K} of integer;
  vC : {k,j | 1<=k<=K; j=K} of integer;
  vL : {k,j | 1<=k<=K; j=K} of integer;
  y : {k,j | 1<=k<=K; j=K} of integer;
  dhatNewMirr : {k,j | 1<=k<=K; j=K} of integer;
let
  dhatpreviousIN[k,j] = dhatprevious[k+j-2,1];
  dhatIN[k,j] = dhat[k+j-2,1];
  dhatnextIN[k,j] = dhatnext[k+j-2,1];
  use  matvect1[K] (LH.(k,j->k,j), dhatnextIN) returns  (vLH) ;
  use  matvect2[K] (C.(k,j->k,j), dhatIN) returns  (vC) ;
  use  matvect3[K] (L.(k,j->k,j), dhatpreviousIN) returns  (vL) ;
  y[k,j] = y0[k,1] - vL[k,j] - vC[k,j] - vLH[k,j];
  dhatNewMirr[k,j] = if (y[k,j]>=0[]) then 1[] else -1[];
  dhatNew[t2,p2] = dhatNewMirr[t2+p2-K-4,K];
tel;

system PIC :   {K,D,M | 2<=K; 2<=D; 2<=M}
               (L : {k,j | 1<=k<=K; 1<=j<=K} of integer; 
                LH : {k,j | 1<=k<=K; 1<=j<=K} of integer; 
                C : {k,j | 1<=k<=K; 1<=j<=K} of integer; 
                y0 : {k,i | 1<=k<=K; 1<=i<=D} of integer)
       returns (d : {k,i | 1<=k<=K; 1<=i<=D} of integer);
var
  dhatnextIN : {t2,p2,p1,t1 | 0<=t2<=K-1; p2=1; 1<=p1<=D; 1<=t1<=M} of integer;
  dhatDupIN : {t2,p2,p1,t1 | 0<=t2<=K-1; p2=1; 1<=p1<=D; 1<=t1<=M} of integer;
  dhatpreviousIN : {t2,p2,p1,t1 | 0<=t2<=K-1; p2=1; 1<=p1<=D; 1<=t1<=M} of integer;
  y0DupIN : {t2,p2,p1,t1 | 1<=t2<=K; p2=1; 1<=p1<=D; 1<=t1<=M} of integer;
  LDup : {t2,p2,p1,t1 | 1<=t2<=K; 1<=p2<=K; 1<=p1<=D; 1<=t1<=M} of integer;
  LHDup : {t2,p2,p1,t1 | 1<=t2<=K; 1<=p2<=K; 1<=p1<=D; 1<=t1<=M} of integer;
  CDup : {t2,p2,p1,t1 | 1<=t2<=K; 1<=p2<=K; 1<=p1<=D; 1<=t1<=M} of integer;
  dhatprevious : {t2,p2,p1,t1 | 0<=t2<=K-1; p2=1; 1<=p1<=D; 1<=t1<=M} of integer;
  dhatnext : {t2,p2,p1,t1 | 0<=t2<=K-1; p2=1; 1<=p1<=D; 1<=t1<=M} of integer;
  dhatDup : {t2,p2,p1,t1 | 0<=t2<=K-1; p2=1; 1<=p1<=D; 1<=t1<=M} of integer;
  dhatNew : {t2,p2,p1,t1 | t2=K+4; 1<=p2<=K; 1<=p1<=D; 1<=t1<=M} of integer;
  y0Dup : {t2,p2,p1,t1 | 1<=t2<=K; p2=1; 1<=p1<=D; 2<=t1<=M+1} of integer;
  dhat : {t2,p2,p1,t1 | 5<=t2<=K+4; p2=1; 1<=p1<=D; 1<=t1<=M+1} of integer;
let
  dhatnextIN[t2,p2,p1,t1] = dhatnext[t2,p2,p1,t1];
  dhatDupIN[t2,p2,p1,t1] = dhatDup[t2,p2,p1,t1];
  dhatpreviousIN[t2,p2,p1,t1] = dhatprevious[t2,p2,p1,t1];
  y0DupIN[t2,p2,p1,t1] = y0Dup[t2,p2,p1,t1+1];
  dhatprevious[t2,p2,p1,t1] = 
      case
        { | p1=1} : 0[];
        { | 2<=p1} : dhat[t2+5,p2,p1-1,t1];
      esac;
  dhatnext[t2,p2,p1,t1] = 
      case
        { | p1<=D-1} : dhat[t2+5,p2,p1+1,t1];
        { | p1=D} : 0[];
      esac;
  dhatDup[t2,p2,p1,t1] = dhat[t2+5,p2,p1,t1];
  LDup[t2,p2,p1,t1] = L[p2,t2];
  LHDup[t2,p2,p1,t1] = LH[p2,t2];
  CDup[t2,p2,p1,t1] = C[p2,t2];
  y0Dup[t2,p2,p1,t1] = y0[t2,p2+p1-1];
  use {i,l | 1<=i<=D; 1<=l<=M} oneStage[K] (LDup, LHDup, CDup, y0DupIN, dhatpreviousIN, dhatDupIN, dhatnextIN) returns  (dhatNew) ;
  dhat[t2,p2,p1,t1] = 
      case
        { | t1=1} : if (y0[t2-4,p2+p1-1]>=1[]) then 1[] else -1[];
        { | 2<=t1} : dhatNew[K+4,t2+p2-5,p1,t1-1];
      esac;
  d[k,i] = dhat[k+4,1,i,M+1];
tel;
