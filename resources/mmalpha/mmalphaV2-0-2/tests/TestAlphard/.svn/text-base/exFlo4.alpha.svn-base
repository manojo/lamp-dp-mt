system prodVect (a : {i,j | 1<=i<=10; 1<=j<=10} of boolean; 
                 b : {i | 1<=i<=10} of boolean)
       returns  (c : {i | 1<=i<=10} of boolean);
var
  ctlTemp : {t,p | 1<=t<=11; p=1} of boolean;
  C_ctl1regloc : {t,p | p-1<=t<=p+9; 2<=p<=10} of boolean;
  C_ctl1reg : {t,p | p<=t<=p+10; 2<=p<=10} of boolean;
  B1regloc : {t,p | p<=t<=p+9; 2<=p<=10} of boolean;
  B1reg : {t,p | p+1<=t<=p+10; 2<=p<=10} of boolean;
  bin : {t,p | 2<=t<=11; p=1} of boolean;
  C_ctl1_Init : {t | 1<=t<=11} of boolean;
  C_ctl1 : {t,p | p+1<=t<=p+10; 1<=p<=10} | {t,p | t=p; 1<=p<=10} of boolean;
  B1 : {t,p | p+1<=t<=p+10; 1<=p<=10} of boolean;
  A : {t,p | p+1<=t<=p+10; 1<=p<=10} of boolean;
  C : {t,p | p<=t<=p+10; 1<=p<=10} of boolean;
let
  ctlTemp[t,p] = C_ctl1_Init[t];
  C_ctl1regloc[t,p] = C_ctl1[t,p-1];
  C_ctl1reg[t,p] = C_ctl1regloc[t-1,p];
  B1regloc[t,p] = B1[t,p-1];
  B1reg[t,p] = B1regloc[t-1,p];
  bin[t,p] = b[t-p];
  C_ctl1_Init[t] = 
      case
        { | 1<=t<=11} : 
           case
             { | 2<=t<=11} : True[];
             { | t=1} : False[];
           esac;
      esac;
  B1[t,p] = 
      case
        { | p+1<=t<=p+10; 2<=p<=10} : B1reg;
        { | 2<=t<=11; p=1} : bin;
      esac;
  A[t,p] = a[p,t-p];
  C_ctl1[t,p] = 
      case
        { | 1<=t<=11; p=1} : ctlTemp;
        { | p+1<=t<=p+10; 2<=p<=10} | { | t=p; 2<=p<=10} : C_ctl1reg;
      esac;
  C[t,p] = 
      case
        { | p<=t<=p+10; 1<=p<=10} : 
           case
             { | p+1<=t<=p+10; 1<=p<=10} : if (C_ctl1) then C[t-1,p] + A[t,p] * B1[t,p] else True[];
             { | t=p; 1<=p<=10} : if (not C_ctl1) then False[] else False[];
           esac;
      esac;
  c[i] = C[i+10,i];
tel;
