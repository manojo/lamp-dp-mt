Reporting on system: sequence
  System was in $result  
5/1/2009 -- 21h 54mn 4.371111s

System:
system sequence :{X,Y | 3<=X<=Y-1}
                (QS : {i | 1<=i<=X} of integer; 
                 DB : {j | 1<=j<=Y} of integer)
       returns  (res : {j | 1<=j<=Y} of integer);
var
  DBXMirr1 : {t,p | 1<=t<=Y; 1<=p<=X} of integer;
  QSXMirr1 : {t,p | 1<=t<=Y; 1<=p<=X} of integer;
  TSep6 : {t,p | 2<=t<=Y+1; 1<=p<=X} of integer;
  TSep5 : {t,p | 2<=t<=Y+1; 1<=p<=X} of integer;
  TSep4 : {t,p | 2<=t<=Y+1; 1<=p<=X} of integer;
  TSep3 : {t,p | 2<=t<=Y+1; 1<=p<=X} of integer;
  TSep2 : {t,p | 1<=t<=Y; 1<=p<=X} of integer;
  TSep1 : {t,p | 1<=t<=Y; 1<=p<=X} of boolean;
  MReg2Xloc : {t,p | 1<=t<=Y+1; 1<=p<=X+1} of integer;
  MatchQReg3 : {t,p | 2<=t<=Y+1; 1<=p<=X} of integer;
  MReg2 : {t,p | 2<=t<=Y+1; 1<=p<=X} of integer;
  MReg1 : {t,p | 2<=t<=Y+1; 1<=p<=X} of integer;
  MXctl2XIn : {t,p | 1<=t<=Y+1; 1<=p<=X} of boolean;
  M : {t,p | 1<=t<=Y+1; 0<=p<=X} of integer;
  MatchQ : {t,p | 1<=t<=Y; 1<=p<=X} of integer;
  MXctl2 : {t | 1<=t<=Y+1} of boolean;
let
  DBXMirr1[t,p] = DB[t];
  QSXMirr1[t,p] = QS[p];
  MReg2Xloc[t,p] = M[t,p-1];
  MReg2[t,p] = MReg2Xloc[t-1,p];
  MatchQReg3[t,p] = MatchQ[t-1,p];
  MReg1[t,p] = M[t-1,p];
  MXctl2XIn[t,p] = MXctl2[t];
  MXctl2[t] = 
      case
        case
          { | t=1} : True[];
          { | 2<=t} : False[];
        esac;
      esac;
  TSep3[t,p] = MReg1 - 8[];
  TSep4[t,p] = MReg2 + MatchQReg3;
  TSep5[t,p] = max(TSep3, TSep4);
  TSep6[t,p] = max(0[], TSep5);
  M[t,p] = 
      case
        { | p=0} : 0[];
        { | 1<=p} : if (MXctl2XIn) then 
               case
                 { | t=1} : 0[];
                 { | 2<=t} : 0[];
               esac else 
           case
             { | t=1} : 0[];
             { | 2<=t} : TSep6;
           esac;
      esac;
  TSep1[t,p] = QSXMirr1 = DBXMirr1;
  TSep2[t,p] = -12[];
  MatchQ[t,p] = if (TSep1) then 15[] else TSep2;
  res[j] = M[j+1,X];
tel;

-- Equation: 
    DBXMirr1 = DB.(t,p,X,Y->t,X,Y);
  ** Declaration: 
    DBXMirr1 : {t,p,X,Y | 1<=t<=Y; 1<=p<=X} of integer
  ** Type is: integer
  ** Input equation
  ** This equation can be interpreted as hardware

-- Equation: 
    QSXMirr1 = QS.(t,p,X,Y->p,X,Y);
  ** Declaration: 
    QSXMirr1 : {t,p,X,Y | 1<=t<=Y; 1<=p<=X} of integer
  ** Type is: integer
  ** Input equation
  ** This equation can be interpreted as hardware

-- Equation: 
    MReg2Xloc = M.(t,p,X,Y->t,p-1,X,Y);
  ** Declaration: 
    MReg2Xloc : {t,p,X,Y | 1<=t<=Y+1; 1<=p<=X+1} of integer
  ** Type is: integer
  ** Local equation
  ** Indexes: {t, p}
  ** Scheduled and allocated, one time dimension and one space dimension
  ** Connection
  ** This equation can be interpreted as hardware

-- Equation: 
    MReg2 = MReg2Xloc.(t,p,X,Y->t-1,p,X,Y);
  ** Declaration: 
    MReg2 : {t,p,X,Y | 2<=t<=Y+1; 1<=p<=X} of integer
  ** Type is: integer
  ** Local equation
  ** Indexes: {t, p}
  ** Scheduled and allocated, one time dimension and one space dimension
  ** integer Register
  ** Valid from 2 <= t <= 1 + Y
  ** This equation can be interpreted as hardware

-- Equation: 
    MatchQReg3 = MatchQ.(t,p,X,Y->t-1,p,X,Y);
  ** Declaration: 
    MatchQReg3 : {t,p,X,Y | 2<=t<=Y+1; 1<=p<=X} of integer
  ** Type is: integer
  ** Local equation
  ** Indexes: {t, p}
  ** Scheduled and allocated, one time dimension and one space dimension
  ** integer Register
  ** Valid from 2 <= t <= 1 + Y
  ** This equation can be interpreted as hardware

-- Equation: 
    MReg1 = M.(t,p,X,Y->t-1,p,X,Y);
  ** Declaration: 
    MReg1 : {t,p,X,Y | 2<=t<=Y+1; 1<=p<=X} of integer
  ** Type is: integer
  ** Local equation
  ** Indexes: {t, p}
  ** Scheduled and allocated, one time dimension and one space dimension
  ** integer Register
  ** Valid from 2 <= t <= 1 + Y
  ** This equation can be interpreted as hardware

-- Equation: 
    MXctl2XIn = MXctl2.(t,p,X,Y->t,X,Y);
  ** Declaration: 
    MXctl2XIn : {t,p,X,Y | 1<=t<=Y+1; 1<=p<=X} of boolean
  ** Type is: boolean
  ** Local equation
  ** Indexes: {t, p}
  ** Scheduled and allocated, one time dimension and one space dimension
  ** This equation cannot be interpreted as hardware
  ** Dependency: MXctl2.(t,p,X,Y->t,X,Y)
     Occurrence: {6, 7, 2}
    ** is not square
    ** is not uniform
    ** Possible pipeline: 
     -> Execute the command: pipeall[ {}, {6, 7, 2}, affine[var["pipeCMXctl21"], matrix[5, 5, {"t", "p", "X", "Y"}, {{1, 0, 0, 0, 0}, {0, 1, 0, 0, 1}, {0, 0, 1, 0, 0}, {0, 0, 0, 1, 0}, {0, 0, 0, 0, 1}}]],domain[4, {"t", "p", "X", "Y"}, {pol[2, 5, 0, 3, {{1, 0, 1, 0, 0, 0}, {1, 0, 0, 0, 0, 1}}, {{0, 1, 0, 0, 0, 0}, {0, 0, 0, 1, 0, 0}, {0, 0, 0, 0, 1, 0}, {1, 0, 1, 0, 0, 0}, {1, 0, 0, 0, 0, 1}}]}]]


-- Equation: 
    MXctl2 = 
    case
      case
        {t,X,Y | t=1} : True.(t,X,Y->);
        {t,X,Y | 2<=t} : False.(t,X,Y->);
      esac;
    esac;
  ** Declaration: 
    MXctl2 : {t,X,Y | 1<=t<=Y+1} of boolean
  ** Type is: boolean
  ** Local equation
  ** Indexes: {t}
  ** Scheduled, one time dimension
  ** Control equation
  ** This equation can be interpreted as hardware

-- Equation: 
    TSep3 = MReg1 - 8.(t,p,X,Y->);
  ** Declaration: 
    TSep3 : {t,p,X,Y | 2<=t<=Y+1; 1<=p<=X} of integer
  ** Type is: integer
  ** Local equation
  ** Indexes: {t, p}
  ** Scheduled and allocated, one time dimension and one space dimension
  ** Combinatorial logic
  ** Binops: {sub}
  ** Unops: {}
  ** Valid from 2 <= t <= 1 + Y
  ** This equation can be interpreted as hardware

-- Equation: 
    TSep4 = MReg2 + MatchQReg3;
  ** Declaration: 
    TSep4 : {t,p,X,Y | 2<=t<=Y+1; 1<=p<=X} of integer
  ** Type is: integer
  ** Local equation
  ** Indexes: {t, p}
  ** Scheduled and allocated, one time dimension and one space dimension
  ** Combinatorial logic
  ** Binops: {add}
  ** Unops: {}
  ** Valid from 2 <= t <= 1 + Y
  ** This equation can be interpreted as hardware

-- Equation: 
    TSep5 = max(TSep3, TSep4);
  ** Declaration: 
    TSep5 : {t,p,X,Y | 2<=t<=Y+1; 1<=p<=X} of integer
  ** Type is: integer
  ** Local equation
  ** Indexes: {t, p}
  ** Scheduled and allocated, one time dimension and one space dimension
  ** Combinatorial logic
  ** Binops: {max}
  ** Unops: {}
  ** Valid from 2 <= t <= 1 + Y
  ** This equation can be interpreted as hardware

-- Equation: 
    TSep6 = max(0.(t,p,X,Y->), TSep5);
  ** Declaration: 
    TSep6 : {t,p,X,Y | 2<=t<=Y+1; 1<=p<=X} of integer
  ** Type is: integer
  ** Local equation
  ** Indexes: {t, p}
  ** Scheduled and allocated, one time dimension and one space dimension
  ** Combinatorial logic
  ** Binops: {max}
  ** Unops: {}
  ** Valid from 2 <= t <= 1 + Y
  ** This equation can be interpreted as hardware

-- Equation: 
    M = case
      {t,p,X,Y | p=0} : 0.(t,p,X,Y->);
      {t,p,X,Y | 1<=p} : if (MXctl2XIn) then 
             case
               {t,p,X,Y | t=1} : 0.(t,p,X,Y->);
               {t,p,X,Y | 2<=t} : 0.(t,p,X,Y->);
             esac else 
         case
           {t,p,X,Y | t=1} : 0.(t,p,X,Y->);
           {t,p,X,Y | 2<=t} : TSep6;
         esac;
    esac;
  ** Declaration: 
    M : {t,p,X,Y | 1<=t<=Y+1; 0<=p<=X} of integer
  ** Type is: integer
  ** Local equation
  ** Indexes: {t, p}
  ** Scheduled and allocated, one time dimension and one space dimension
  ** This equation cannot be interpreted as hardware
  ** No dependency


-- Equation: 
    TSep1 = QSXMirr1 = DBXMirr1;
  ** Declaration: 
    TSep1 : {t,p,X,Y | 1<=t<=Y; 1<=p<=X} of boolean
  ** Type is: boolean
  ** Local equation
  ** Indexes: {t, p}
  ** Scheduled and allocated, one time dimension and one space dimension
  ** Combinatorial logic
  ** Binops: {eq}
  ** Unops: {}
  ** Valid from 1 <= t <= Y
  ** This equation can be interpreted as hardware

-- Equation: 
    TSep2 = -12.(t,p,X,Y->);
  ** Declaration: 
    TSep2 : {t,p,X,Y | 1<=t<=Y; 1<=p<=X} of integer
  ** Type is: integer
  ** Local equation
  ** Indexes: {t, p}
  ** Scheduled and allocated, one time dimension and one space dimension
  ** Combinatorial logic
  ** Binops: {}
  ** Unops: {neg}
  ** Valid from 1 <= t <= Y
  ** This equation can be interpreted as hardware

-- Equation: 
    MatchQ = if (TSep1) then 15.(t,p,X,Y->) else TSep2;
  ** Declaration: 
    MatchQ : {t,p,X,Y | 1<=t<=Y; 1<=p<=X} of integer
  ** Type is: integer
  ** Local equation
  ** Indexes: {t, p}
  ** Scheduled and allocated, one time dimension and one space dimension
  ** This equation cannot be interpreted as hardware
  ** No dependency


-- Equation: 
    res = M.(j,X,Y->j+1,X,X,Y);
  ** Declaration: 
    res : {j,X,Y | 1<=j<=Y} of integer
  ** Type is: integer
  ** Output equation
  ** Indexes: {j}
  ** Mirror equation
  ** This equation can be interpreted as hardware

---- These equations cannot be translated to hardware:
MXctl2XIn = MXctl2.(t,p,X,Y->t,X,Y);
M = case
      {t,p,X,Y | p=0} : 0.(t,p,X,Y->);
      {t,p,X,Y | 1<=p} : if (MXctl2XIn) then 
             case
               {t,p,X,Y | t=1} : 0.(t,p,X,Y->);
               {t,p,X,Y | 2<=t} : 0.(t,p,X,Y->);
             esac else 
         case
           {t,p,X,Y | t=1} : 0.(t,p,X,Y->);
           {t,p,X,Y | 2<=t} : TSep6;
         esac;
    esac;
MatchQ = if (TSep1) then 15.(t,p,X,Y->) else TSep2;


---- Use statements:


------
  **** Resources used:
  3 integer registers
  0 integer or floating-point mux
  0 multipliers 
  2 adders/subtracters 
  ** Analysis of operators
  sub from 2 to 1 + Y
  add from 2 to 1 + Y
  max from 2 to 1 + Y
  max from 2 to 1 + Y
  eq from 1 to Y
  neg from 1 to Y
