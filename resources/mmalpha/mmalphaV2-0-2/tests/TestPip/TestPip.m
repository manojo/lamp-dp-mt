dir = Directory[]
SetDirectory[Environment["MMALPHA"]<>"/tests/TestPip/"];
Print["Test for Pip.m"];


res1= 
{
Print["-------------- Testing getPipResult--------------**"];
testFunction[getPipResult["test1.pipres"],
res1=pip[if[{-1, 1, 0, 
	  0}, {{0, 0, 0, 0}, {1, 0, 0, 0}}, {{1, -1, 0, 0}, {0, 1, 0, 0}}]],
	    "getPipResult 1"],
testFunction[getPipResult["test2.pipres"],
res2=pip[if[{-4, 0, 5}, 
    if[{0, -4, 3}, bottom, 
      if[{0, -2, 9}, 
        if[{0, -2, 3}, 
          newParam[{2, {0, 2, 3}, 6}, 
            newParam[{3, {0, 2, 10, 7}, 12}, 
              newParam[{4, {0, 4, 0, 2, 1}, 6}, bottom]]], 
          if[{0, -2, 7}, 
            newParam[{2, {0, 4, 3}, 6}, if[{0, -8, 6, 11}, bottom, bottom]], 
            bottom]], bottom]], 
    if[{-1, 0, 3}, if[{-1, 0, 2}, if[{10, -2, -15}, bottom, bottom], bottom], 
      bottom]]],"getPipResult 2" ],
testFunction[getPipResult["toto.pipres"],
res3=pip[{{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {1, 1}}],
	    "getPipResult 3"],
testFunction[getPipResult["fail.pipres"],
res4=pip[{}],
	    "getPipResult 4"],
Print["-------------- Testing pipToSymbol--------------**"];
testFunction[pipToSymbol[res1,{scdc["i"],scdc["j"]},
{scdc["k"],scdc["m"],scdc["n"]}],
res1b=pip[if[Greater[Plus[Times[-1, scdc["k"]], scdc["m"]], 0], 
    List[Rule[scdc["i"], 0], Rule[scdc["j"], scdc["k"]]], 
    List[Rule[scdc["i"], Plus[scdc["k"], Times[-1, scdc["m"]]]], 
      Rule[scdc["j"], scdc["m"]]]]],
	    "pipToSymbol 1"],
testFunction[pipToSymbol[res2,{scdc["i"],scdc["j"],scdc["l"]},
{scdc["m"],scdc["n"]}],
res2b=pip[if[Greater[Plus[5, Times[-4, scdc["m"]]], 0], 
    if[Greater[Plus[3, Times[-4, scdc["n"]]], 0], bottom, 
      if[Greater[Plus[9, Times[-2, scdc["n"]]], 0], 
        if[Greater[Plus[3, Times[-2, scdc["n"]]], 0], 
          newParam[div[Plus[3, Times[2, scdc["n"]]], 6], 
            newParam[
              div[Plus[7, Times[2, "newParam2"], Times[10, scdc["n"]]], 12], 
              newParam[
                div[Plus[1, Times[4, "newParam2"], Times[2, scdc["n"]]], 6], 
                bottom]]], 
          if[Greater[Plus[7, Times[-2, scdc["n"]]], 0], 
            newParam[div[Plus[3, Times[4, scdc["n"]]], 6], 
              if[Greater[
                  Plus[11, Times[-8, "newParam2"], Times[6, scdc["n"]]], 0], 
                bottom, bottom]], bottom]], bottom]], 
    if[Greater[Plus[3, Times[-1, scdc["m"]]], 0], 
      if[Greater[Plus[2, Times[-1, scdc["m"]]], 0], 
        if[Greater[Plus[-15, Times[10, scdc["m"]], Times[-2, scdc["n"]]], 0], 
          bottom, bottom], bottom], bottom]]],
	    "pipToSymbol 2"],
testFunction[pipToSymbol[res3,{scdc["i0"],scdc["i1"],scdc["i2"],scdc["i3"],scdc["i4"],scdc["i5"],scdc["i6"]},
{scdc["n"]}],
res3b=pip[List[Rule[scdc["i0"], 0], Rule[scdc["i1"], 0], Rule[scdc["i2"], 0], 
    Rule[scdc["i3"], 0], Rule[scdc["i4"], 0], Rule[scdc["i5"], 0], 
  Rule[scdc["i6"], Plus[1, scdc["n"]]]]],
	    "pipToSymbol 3"],
testFunction[pipToSymbol[res4,{scdc["i0"]},
{scdc["n"]}],
res3b=pip[bottom],
  "pipToSymbol 4"],
Print["-------------- Testing lpToPip --------------**"];
testFunction[res1=lpToPip[List[GreaterEqual[Plus[-1,scdc["alphaX"],Times[-1,scdc["alphaY"]]],0]],{},{scdc["tauXi"],scdc["tauXj"],scdc["tauXn"],scdc["tauYi"],scdc["tauYj"],scdc["tauYn"],scdc["alphaX"]},{scdc["alphaY"]}];
 StringMatchQ[res1, "(( *** begin comments *** \nGenerated by MMAlpha: *\n\
\n *** end comments *** )\n7 1 1 0 -1 1 \n( \n#[ 0  0  0  0  0  0  1  -1  -1 \
]\n)\n( \n)\n)\n"],True,
   "lpToPip 1"],
Print["-------------- Testing solveWithPip --------------**"];
testFunction[solveWithPip[List[GreaterEqual[Plus[-1,scdc["alphaX"],Times[-1,scdc["alphaY"]]],0]],{},{scdc["tauXi"],scdc["tauXj"],scdc["tauXn"],scdc["tauYi"],scdc["tauYj"],scdc["tauYn"],scdc["alphaX"]},{scdc["alphaY"]}],
pip[List[Rule[scdc["tauXi"], 0], Rule[scdc["tauXj"], 0], 
    Rule[scdc["tauXn"], 0], Rule[scdc["tauYi"], 0], Rule[scdc["tauYj"], 0], 
  Rule[scdc["tauYn"], 0], Rule[scdc["alphaX"], Plus[1, scdc["alphaY"]]]]],
  "solveWithPip 1"],
testFunction[solveWithPip[{var1["i"]>=0,var1["i"]<=var1["m"],var1["j"]>=0,var1["j"]<=var1["n"],var1["k"]<=var1["i"]+var1["j"]},{var1["k"]<=var1["m"]+var1["n"]},{var1["j"],var1["i"]},{var1["k"],var1["m"],var1["n"]}] ,
pip[if[Greater[Plus[Times[-1, var1["k"]], var1["m"]], 0], 
    List[Rule[var1["j"], 0], Rule[var1["i"], var1["k"]]], 
    List[Rule[var1["j"], Plus[var1["k"], Times[-1, var1["m"]]]], 
      Rule[var1["i"], var1["m"]]]]],
																  "solveWithPip 2"],
testFunction[solveWithPip[{var1["i"]>=-var1["BigPar"],var1["i"]<=var1["m"],var1["j"]>=0,var1["j"]<=var1["n"],var1["k"]<=var1["i"]+var1["j"]},{var1["k"]<=var1["m"]+var1["n"]},{var1["j"],var1["i"]},{var1["BigPar"],var1["k"],var1["m"],var1["n"]},bigParPos->3] ,
pip[if[Greater[Plus[Times[-1, var1["k"]], var1["m"]], 0], 
    List[Rule[var1["j"], 0], Rule[var1["i"], var1["k"]]], 
    List[Rule[var1["j"], Plus[var1["k"], Times[-1, var1["m"]]]], 
      Rule[var1["i"], var1["m"]]]]],
	    "solveWithPip 3"]


}

testResult = Apply[And,res1] 

SetDirectory[dir];

If [testResult,
    Print["**** Test OK for Pip.m "],
    Print["**** Something was wrong for Pip.m"]];

testResult

