/*
* generated by Xtext
*/
package fr.irisa.cairn.model.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import fr.irisa.cairn.model.services.MathematicaGrammarAccess;

public class MathematicaParser extends AbstractContentAssistParser {
	
	@Inject
	private MathematicaGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected fr.irisa.cairn.model.ui.contentassist.antlr.internal.InternalMathematicaParser createParser() {
		fr.irisa.cairn.model.ui.contentassist.antlr.internal.InternalMathematicaParser result = new fr.irisa.cairn.model.ui.contentassist.antlr.internal.InternalMathematicaParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getNodeAccess().getAlternatives(), "rule__Node__Alternatives");
					put(grammarAccess.getASTLeafAccess().getAlternatives(), "rule__ASTLeaf__Alternatives");
					put(grammarAccess.getFloatLeafAccess().getAlternatives_1(), "rule__FloatLeaf__Alternatives_1");
					put(grammarAccess.getASTNodeAccess().getGroup(), "rule__ASTNode__Group__0");
					put(grammarAccess.getASTNodeAccess().getGroup_2(), "rule__ASTNode__Group_2__0");
					put(grammarAccess.getASTNodeAccess().getGroup_2_1(), "rule__ASTNode__Group_2_1__0");
					put(grammarAccess.getBuiltInNodeAccess().getGroup(), "rule__BuiltInNode__Group__0");
					put(grammarAccess.getBuiltInNodeAccess().getGroup_2(), "rule__BuiltInNode__Group_2__0");
					put(grammarAccess.getBuiltInNodeAccess().getGroup_2_1(), "rule__BuiltInNode__Group_2_1__0");
					put(grammarAccess.getIntLeafAccess().getGroup(), "rule__IntLeaf__Group__0");
					put(grammarAccess.getFloatLeafAccess().getGroup(), "rule__FloatLeaf__Group__0");
					put(grammarAccess.getFloatLeafAccess().getGroup_1_0(), "rule__FloatLeaf__Group_1_0__0");
					put(grammarAccess.getFloatLeafAccess().getGroup_1_1(), "rule__FloatLeaf__Group_1_1__0");
					put(grammarAccess.getASTNodeAccess().getNameAssignment_0(), "rule__ASTNode__NameAssignment_0");
					put(grammarAccess.getASTNodeAccess().getChildrenAssignment_2_0(), "rule__ASTNode__ChildrenAssignment_2_0");
					put(grammarAccess.getASTNodeAccess().getChildrenAssignment_2_1_1(), "rule__ASTNode__ChildrenAssignment_2_1_1");
					put(grammarAccess.getBuiltInNodeAccess().getKeywordAssignment_0(), "rule__BuiltInNode__KeywordAssignment_0");
					put(grammarAccess.getBuiltInNodeAccess().getChildrenAssignment_2_0(), "rule__BuiltInNode__ChildrenAssignment_2_0");
					put(grammarAccess.getBuiltInNodeAccess().getChildrenAssignment_2_1_1(), "rule__BuiltInNode__ChildrenAssignment_2_1_1");
					put(grammarAccess.getIntLeafAccess().getSignedAssignment_0(), "rule__IntLeaf__SignedAssignment_0");
					put(grammarAccess.getIntLeafAccess().getValueAssignment_1(), "rule__IntLeaf__ValueAssignment_1");
					put(grammarAccess.getStringLeafAccess().getValueAssignment(), "rule__StringLeaf__ValueAssignment");
					put(grammarAccess.getSymbolLeafAccess().getNameAssignment(), "rule__SymbolLeaf__NameAssignment");
					put(grammarAccess.getFloatLeafAccess().getSignedAssignment_0(), "rule__FloatLeaf__SignedAssignment_0");
					put(grammarAccess.getFloatLeafAccess().getAAssignment_1_0_0(), "rule__FloatLeaf__AAssignment_1_0_0");
					put(grammarAccess.getFloatLeafAccess().getBAssignment_1_0_2(), "rule__FloatLeaf__BAssignment_1_0_2");
					put(grammarAccess.getFloatLeafAccess().getBAssignment_1_1_1(), "rule__FloatLeaf__BAssignment_1_1_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			fr.irisa.cairn.model.ui.contentassist.antlr.internal.InternalMathematicaParser typedParser = (fr.irisa.cairn.model.ui.contentassist.antlr.internal.InternalMathematicaParser) parser;
			typedParser.entryRuleNode();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public MathematicaGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(MathematicaGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
