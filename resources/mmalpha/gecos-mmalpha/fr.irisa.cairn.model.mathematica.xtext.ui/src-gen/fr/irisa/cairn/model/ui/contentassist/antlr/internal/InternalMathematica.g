/*
* generated by Xtext
*/
grammar InternalMathematica;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package fr.irisa.cairn.model.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package fr.irisa.cairn.model.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import fr.irisa.cairn.model.services.MathematicaGrammarAccess;

}

@parser::members {
 
 	private MathematicaGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(MathematicaGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleNode
entryRuleNode 
:
{ before(grammarAccess.getNodeRule()); }
	 ruleNode
{ after(grammarAccess.getNodeRule()); } 
	 EOF 
;

// Rule Node
ruleNode
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNodeAccess().getAlternatives()); }
(rule__Node__Alternatives)
{ after(grammarAccess.getNodeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleASTNode
entryRuleASTNode 
:
{ before(grammarAccess.getASTNodeRule()); }
	 ruleASTNode
{ after(grammarAccess.getASTNodeRule()); } 
	 EOF 
;

// Rule ASTNode
ruleASTNode
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getASTNodeAccess().getGroup()); }
(rule__ASTNode__Group__0)
{ after(grammarAccess.getASTNodeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBuiltInNode
entryRuleBuiltInNode 
:
{ before(grammarAccess.getBuiltInNodeRule()); }
	 ruleBuiltInNode
{ after(grammarAccess.getBuiltInNodeRule()); } 
	 EOF 
;

// Rule BuiltInNode
ruleBuiltInNode
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBuiltInNodeAccess().getGroup()); }
(rule__BuiltInNode__Group__0)
{ after(grammarAccess.getBuiltInNodeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleASTLeaf
entryRuleASTLeaf 
:
{ before(grammarAccess.getASTLeafRule()); }
	 ruleASTLeaf
{ after(grammarAccess.getASTLeafRule()); } 
	 EOF 
;

// Rule ASTLeaf
ruleASTLeaf
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getASTLeafAccess().getAlternatives()); }
(rule__ASTLeaf__Alternatives)
{ after(grammarAccess.getASTLeafAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIntLeaf
entryRuleIntLeaf 
:
{ before(grammarAccess.getIntLeafRule()); }
	 ruleIntLeaf
{ after(grammarAccess.getIntLeafRule()); } 
	 EOF 
;

// Rule IntLeaf
ruleIntLeaf
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntLeafAccess().getGroup()); }
(rule__IntLeaf__Group__0)
{ after(grammarAccess.getIntLeafAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringLeaf
entryRuleStringLeaf 
:
{ before(grammarAccess.getStringLeafRule()); }
	 ruleStringLeaf
{ after(grammarAccess.getStringLeafRule()); } 
	 EOF 
;

// Rule StringLeaf
ruleStringLeaf
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStringLeafAccess().getValueAssignment()); }
(rule__StringLeaf__ValueAssignment)
{ after(grammarAccess.getStringLeafAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSymbolLeaf
entryRuleSymbolLeaf 
:
{ before(grammarAccess.getSymbolLeafRule()); }
	 ruleSymbolLeaf
{ after(grammarAccess.getSymbolLeafRule()); } 
	 EOF 
;

// Rule SymbolLeaf
ruleSymbolLeaf
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSymbolLeafAccess().getNameAssignment()); }
(rule__SymbolLeaf__NameAssignment)
{ after(grammarAccess.getSymbolLeafAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFloatLeaf
entryRuleFloatLeaf 
:
{ before(grammarAccess.getFloatLeafRule()); }
	 ruleFloatLeaf
{ after(grammarAccess.getFloatLeafRule()); } 
	 EOF 
;

// Rule FloatLeaf
ruleFloatLeaf
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFloatLeafAccess().getGroup()); }
(rule__FloatLeaf__Group__0)
{ after(grammarAccess.getFloatLeafAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Node__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getASTNodeParserRuleCall_0()); }
	ruleASTNode
{ after(grammarAccess.getNodeAccess().getASTNodeParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getNodeAccess().getASTLeafParserRuleCall_1()); }
	ruleASTLeaf
{ after(grammarAccess.getNodeAccess().getASTLeafParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getNodeAccess().getBuiltInNodeParserRuleCall_2()); }
	ruleBuiltInNode
{ after(grammarAccess.getNodeAccess().getBuiltInNodeParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ASTLeaf__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getASTLeafAccess().getIntLeafParserRuleCall_0()); }
	ruleIntLeaf
{ after(grammarAccess.getASTLeafAccess().getIntLeafParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getASTLeafAccess().getStringLeafParserRuleCall_1()); }
	ruleStringLeaf
{ after(grammarAccess.getASTLeafAccess().getStringLeafParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getASTLeafAccess().getFloatLeafParserRuleCall_2()); }
	ruleFloatLeaf
{ after(grammarAccess.getASTLeafAccess().getFloatLeafParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getASTLeafAccess().getSymbolLeafParserRuleCall_3()); }
	ruleSymbolLeaf
{ after(grammarAccess.getASTLeafAccess().getSymbolLeafParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FloatLeaf__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatLeafAccess().getGroup_1_0()); }
(rule__FloatLeaf__Group_1_0__0)
{ after(grammarAccess.getFloatLeafAccess().getGroup_1_0()); }
)

    |(
{ before(grammarAccess.getFloatLeafAccess().getGroup_1_1()); }
(rule__FloatLeaf__Group_1_1__0)
{ after(grammarAccess.getFloatLeafAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__ASTNode__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ASTNode__Group__0__Impl
	rule__ASTNode__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ASTNode__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getASTNodeAccess().getNameAssignment_0()); }
(rule__ASTNode__NameAssignment_0)
{ after(grammarAccess.getASTNodeAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ASTNode__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ASTNode__Group__1__Impl
	rule__ASTNode__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ASTNode__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getASTNodeAccess().getLeftSquareBracketKeyword_1()); }

	'[' 

{ after(grammarAccess.getASTNodeAccess().getLeftSquareBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ASTNode__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ASTNode__Group__2__Impl
	rule__ASTNode__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ASTNode__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getASTNodeAccess().getGroup_2()); }
(rule__ASTNode__Group_2__0)?
{ after(grammarAccess.getASTNodeAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ASTNode__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ASTNode__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ASTNode__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getASTNodeAccess().getRightSquareBracketKeyword_3()); }

	']' 

{ after(grammarAccess.getASTNodeAccess().getRightSquareBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ASTNode__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ASTNode__Group_2__0__Impl
	rule__ASTNode__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ASTNode__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getASTNodeAccess().getChildrenAssignment_2_0()); }
(rule__ASTNode__ChildrenAssignment_2_0)
{ after(grammarAccess.getASTNodeAccess().getChildrenAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ASTNode__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ASTNode__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ASTNode__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getASTNodeAccess().getGroup_2_1()); }
(rule__ASTNode__Group_2_1__0)*
{ after(grammarAccess.getASTNodeAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ASTNode__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ASTNode__Group_2_1__0__Impl
	rule__ASTNode__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ASTNode__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getASTNodeAccess().getCommaKeyword_2_1_0()); }

	',' 

{ after(grammarAccess.getASTNodeAccess().getCommaKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ASTNode__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ASTNode__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ASTNode__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getASTNodeAccess().getChildrenAssignment_2_1_1()); }
(rule__ASTNode__ChildrenAssignment_2_1_1)
{ after(grammarAccess.getASTNodeAccess().getChildrenAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BuiltInNode__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BuiltInNode__Group__0__Impl
	rule__BuiltInNode__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BuiltInNode__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBuiltInNodeAccess().getKeywordAssignment_0()); }
(rule__BuiltInNode__KeywordAssignment_0)
{ after(grammarAccess.getBuiltInNodeAccess().getKeywordAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BuiltInNode__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BuiltInNode__Group__1__Impl
	rule__BuiltInNode__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BuiltInNode__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBuiltInNodeAccess().getLeftSquareBracketKeyword_1()); }

	'[' 

{ after(grammarAccess.getBuiltInNodeAccess().getLeftSquareBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BuiltInNode__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BuiltInNode__Group__2__Impl
	rule__BuiltInNode__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BuiltInNode__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBuiltInNodeAccess().getGroup_2()); }
(rule__BuiltInNode__Group_2__0)?
{ after(grammarAccess.getBuiltInNodeAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BuiltInNode__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BuiltInNode__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BuiltInNode__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBuiltInNodeAccess().getRightSquareBracketKeyword_3()); }

	']' 

{ after(grammarAccess.getBuiltInNodeAccess().getRightSquareBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__BuiltInNode__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BuiltInNode__Group_2__0__Impl
	rule__BuiltInNode__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BuiltInNode__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBuiltInNodeAccess().getChildrenAssignment_2_0()); }
(rule__BuiltInNode__ChildrenAssignment_2_0)
{ after(grammarAccess.getBuiltInNodeAccess().getChildrenAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BuiltInNode__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BuiltInNode__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BuiltInNode__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBuiltInNodeAccess().getGroup_2_1()); }
(rule__BuiltInNode__Group_2_1__0)*
{ after(grammarAccess.getBuiltInNodeAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BuiltInNode__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BuiltInNode__Group_2_1__0__Impl
	rule__BuiltInNode__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BuiltInNode__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBuiltInNodeAccess().getCommaKeyword_2_1_0()); }

	',' 

{ after(grammarAccess.getBuiltInNodeAccess().getCommaKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BuiltInNode__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BuiltInNode__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BuiltInNode__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBuiltInNodeAccess().getChildrenAssignment_2_1_1()); }
(rule__BuiltInNode__ChildrenAssignment_2_1_1)
{ after(grammarAccess.getBuiltInNodeAccess().getChildrenAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IntLeaf__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntLeaf__Group__0__Impl
	rule__IntLeaf__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntLeaf__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntLeafAccess().getSignedAssignment_0()); }
(rule__IntLeaf__SignedAssignment_0)?
{ after(grammarAccess.getIntLeafAccess().getSignedAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IntLeaf__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntLeaf__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntLeaf__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntLeafAccess().getValueAssignment_1()); }
(rule__IntLeaf__ValueAssignment_1)
{ after(grammarAccess.getIntLeafAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FloatLeaf__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FloatLeaf__Group__0__Impl
	rule__FloatLeaf__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatLeaf__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatLeafAccess().getSignedAssignment_0()); }
(rule__FloatLeaf__SignedAssignment_0)?
{ after(grammarAccess.getFloatLeafAccess().getSignedAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FloatLeaf__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FloatLeaf__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatLeaf__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatLeafAccess().getAlternatives_1()); }
(rule__FloatLeaf__Alternatives_1)
{ after(grammarAccess.getFloatLeafAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FloatLeaf__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FloatLeaf__Group_1_0__0__Impl
	rule__FloatLeaf__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatLeaf__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatLeafAccess().getAAssignment_1_0_0()); }
(rule__FloatLeaf__AAssignment_1_0_0)
{ after(grammarAccess.getFloatLeafAccess().getAAssignment_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FloatLeaf__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FloatLeaf__Group_1_0__1__Impl
	rule__FloatLeaf__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatLeaf__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatLeafAccess().getFullStopKeyword_1_0_1()); }

	'.' 

{ after(grammarAccess.getFloatLeafAccess().getFullStopKeyword_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FloatLeaf__Group_1_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FloatLeaf__Group_1_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatLeaf__Group_1_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatLeafAccess().getBAssignment_1_0_2()); }
(rule__FloatLeaf__BAssignment_1_0_2)
{ after(grammarAccess.getFloatLeafAccess().getBAssignment_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FloatLeaf__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FloatLeaf__Group_1_1__0__Impl
	rule__FloatLeaf__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatLeaf__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatLeafAccess().getFullStopKeyword_1_1_0()); }

	'.' 

{ after(grammarAccess.getFloatLeafAccess().getFullStopKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FloatLeaf__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FloatLeaf__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatLeaf__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatLeafAccess().getBAssignment_1_1_1()); }
(rule__FloatLeaf__BAssignment_1_1_1)
{ after(grammarAccess.getFloatLeafAccess().getBAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__ASTNode__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getASTNodeAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getASTNodeAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ASTNode__ChildrenAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getASTNodeAccess().getChildrenNodeParserRuleCall_2_0_0()); }
	ruleNode{ after(grammarAccess.getASTNodeAccess().getChildrenNodeParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ASTNode__ChildrenAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getASTNodeAccess().getChildrenNodeParserRuleCall_2_1_1_0()); }
	ruleNode{ after(grammarAccess.getASTNodeAccess().getChildrenNodeParserRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BuiltInNode__KeywordAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBuiltInNodeAccess().getKeywordKeyWordTerminalRuleCall_0_0()); }
	RULE_KEYWORD{ after(grammarAccess.getBuiltInNodeAccess().getKeywordKeyWordTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BuiltInNode__ChildrenAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBuiltInNodeAccess().getChildrenNodeParserRuleCall_2_0_0()); }
	ruleNode{ after(grammarAccess.getBuiltInNodeAccess().getChildrenNodeParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BuiltInNode__ChildrenAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBuiltInNodeAccess().getChildrenNodeParserRuleCall_2_1_1_0()); }
	ruleNode{ after(grammarAccess.getBuiltInNodeAccess().getChildrenNodeParserRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntLeaf__SignedAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntLeafAccess().getSignedHyphenMinusKeyword_0_0()); }
(
{ before(grammarAccess.getIntLeafAccess().getSignedHyphenMinusKeyword_0_0()); }

	'-' 

{ after(grammarAccess.getIntLeafAccess().getSignedHyphenMinusKeyword_0_0()); }
)

{ after(grammarAccess.getIntLeafAccess().getSignedHyphenMinusKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntLeaf__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntLeafAccess().getValueINTTerminalRuleCall_1_0()); }
	RULE_INT{ after(grammarAccess.getIntLeafAccess().getValueINTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringLeaf__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringLeafAccess().getValueSTRINGTerminalRuleCall_0()); }
	RULE_STRING{ after(grammarAccess.getStringLeafAccess().getValueSTRINGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolLeaf__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSymbolLeafAccess().getNameIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getSymbolLeafAccess().getNameIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FloatLeaf__SignedAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatLeafAccess().getSignedHyphenMinusKeyword_0_0()); }
(
{ before(grammarAccess.getFloatLeafAccess().getSignedHyphenMinusKeyword_0_0()); }

	'-' 

{ after(grammarAccess.getFloatLeafAccess().getSignedHyphenMinusKeyword_0_0()); }
)

{ after(grammarAccess.getFloatLeafAccess().getSignedHyphenMinusKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FloatLeaf__AAssignment_1_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatLeafAccess().getAINTTerminalRuleCall_1_0_0_0()); }
	RULE_INT{ after(grammarAccess.getFloatLeafAccess().getAINTTerminalRuleCall_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FloatLeaf__BAssignment_1_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatLeafAccess().getBINTTerminalRuleCall_1_0_2_0()); }
	RULE_INT{ after(grammarAccess.getFloatLeafAccess().getBINTTerminalRuleCall_1_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FloatLeaf__BAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatLeafAccess().getBINTTerminalRuleCall_1_1_1_0()); }
	RULE_INT{ after(grammarAccess.getFloatLeafAccess().getBINTTerminalRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_KEYWORD : ('Module'|'List'|'Clear'|'CompundExpression'|'BeginPackage'|'Set'|'SetDelayed'|'Message'|'MessageName'|'Pattern'|'Rule'|'RuleDelayed'|'With'|'Blank'|'ReplaceAll'|'Map'|'Length'|'Protect'|'Union'|'Plus'|'Catch'|'If'|'Do'|'SameQ'|'UnSameQ'|'Or'|'And'|'Part'|'Print'|'Return'|'Times');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


