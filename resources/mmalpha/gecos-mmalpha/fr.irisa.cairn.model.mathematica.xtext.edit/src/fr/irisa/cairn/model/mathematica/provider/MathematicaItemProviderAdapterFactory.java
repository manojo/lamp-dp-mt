/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package fr.irisa.cairn.model.mathematica.provider;

import fr.irisa.cairn.model.mathematica.util.MathematicaAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class MathematicaItemProviderAdapterFactory extends MathematicaAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public MathematicaItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.cairn.model.mathematica.Node} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NodeItemProvider nodeItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.cairn.model.mathematica.Node}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNodeAdapter() {
		if (nodeItemProvider == null) {
			nodeItemProvider = new NodeItemProvider(this);
		}

		return nodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.cairn.model.mathematica.ASTNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ASTNodeItemProvider astNodeItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.cairn.model.mathematica.ASTNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createASTNodeAdapter() {
		if (astNodeItemProvider == null) {
			astNodeItemProvider = new ASTNodeItemProvider(this);
		}

		return astNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.cairn.model.mathematica.BuiltInNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BuiltInNodeItemProvider builtInNodeItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.cairn.model.mathematica.BuiltInNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBuiltInNodeAdapter() {
		if (builtInNodeItemProvider == null) {
			builtInNodeItemProvider = new BuiltInNodeItemProvider(this);
		}

		return builtInNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.cairn.model.mathematica.ASTLeaf} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ASTLeafItemProvider astLeafItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.cairn.model.mathematica.ASTLeaf}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createASTLeafAdapter() {
		if (astLeafItemProvider == null) {
			astLeafItemProvider = new ASTLeafItemProvider(this);
		}

		return astLeafItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.cairn.model.mathematica.IntLeaf} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntLeafItemProvider intLeafItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.cairn.model.mathematica.IntLeaf}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntLeafAdapter() {
		if (intLeafItemProvider == null) {
			intLeafItemProvider = new IntLeafItemProvider(this);
		}

		return intLeafItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.cairn.model.mathematica.StringLeaf} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StringLeafItemProvider stringLeafItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.cairn.model.mathematica.StringLeaf}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStringLeafAdapter() {
		if (stringLeafItemProvider == null) {
			stringLeafItemProvider = new StringLeafItemProvider(this);
		}

		return stringLeafItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.cairn.model.mathematica.SymbolLeaf} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SymbolLeafItemProvider symbolLeafItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.cairn.model.mathematica.SymbolLeaf}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSymbolLeafAdapter() {
		if (symbolLeafItemProvider == null) {
			symbolLeafItemProvider = new SymbolLeafItemProvider(this);
		}

		return symbolLeafItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.cairn.model.mathematica.FloatLeaf} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FloatLeafItemProvider floatLeafItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.cairn.model.mathematica.FloatLeaf}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFloatLeafAdapter() {
		if (floatLeafItemProvider == null) {
			floatLeafItemProvider = new FloatLeafItemProvider(this);
		}

		return floatLeafItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (nodeItemProvider != null) nodeItemProvider.dispose();
		if (astNodeItemProvider != null) astNodeItemProvider.dispose();
		if (builtInNodeItemProvider != null) builtInNodeItemProvider.dispose();
		if (astLeafItemProvider != null) astLeafItemProvider.dispose();
		if (intLeafItemProvider != null) intLeafItemProvider.dispose();
		if (stringLeafItemProvider != null) stringLeafItemProvider.dispose();
		if (symbolLeafItemProvider != null) symbolLeafItemProvider.dispose();
		if (floatLeafItemProvider != null) floatLeafItemProvider.dispose();
	}

}
