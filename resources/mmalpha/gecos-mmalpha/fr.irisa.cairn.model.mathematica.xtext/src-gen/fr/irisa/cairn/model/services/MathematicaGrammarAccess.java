/*
* generated by Xtext
*/

package fr.irisa.cairn.model.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MathematicaGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class NodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Node");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cASTNodeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cASTLeafParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBuiltInNodeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Node:
		//	ASTNode | ASTLeaf | BuiltInNode;
		public ParserRule getRule() { return rule; }

		//ASTNode | ASTLeaf | BuiltInNode
		public Alternatives getAlternatives() { return cAlternatives; }

		//ASTNode
		public RuleCall getASTNodeParserRuleCall_0() { return cASTNodeParserRuleCall_0; }

		//ASTLeaf
		public RuleCall getASTLeafParserRuleCall_1() { return cASTLeafParserRuleCall_1; }

		//BuiltInNode
		public RuleCall getBuiltInNodeParserRuleCall_2() { return cBuiltInNodeParserRuleCall_2; }
	}

	public class ASTNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ASTNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cChildrenAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cChildrenNodeParserRuleCall_2_0_0 = (RuleCall)cChildrenAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cChildrenAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cChildrenNodeParserRuleCall_2_1_1_0 = (RuleCall)cChildrenAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ASTNode:
		//	name=ID "[" (children+=Node ("," children+=Node)*)? "]";
		public ParserRule getRule() { return rule; }

		//name=ID "[" (children+=Node ("," children+=Node)*)? "]"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//(children+=Node ("," children+=Node)*)?
		public Group getGroup_2() { return cGroup_2; }

		//children+=Node
		public Assignment getChildrenAssignment_2_0() { return cChildrenAssignment_2_0; }

		//Node
		public RuleCall getChildrenNodeParserRuleCall_2_0_0() { return cChildrenNodeParserRuleCall_2_0_0; }

		//("," children+=Node)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//children+=Node
		public Assignment getChildrenAssignment_2_1_1() { return cChildrenAssignment_2_1_1; }

		//Node
		public RuleCall getChildrenNodeParserRuleCall_2_1_1_0() { return cChildrenNodeParserRuleCall_2_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class BuiltInNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BuiltInNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeywordAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeywordKeyWordTerminalRuleCall_0_0 = (RuleCall)cKeywordAssignment_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cChildrenAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cChildrenNodeParserRuleCall_2_0_0 = (RuleCall)cChildrenAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cChildrenAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cChildrenNodeParserRuleCall_2_1_1_0 = (RuleCall)cChildrenAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//BuiltInNode:
		//	keyword=KeyWord "[" (children+=Node ("," children+=Node)*)? "]";
		public ParserRule getRule() { return rule; }

		//keyword=KeyWord "[" (children+=Node ("," children+=Node)*)? "]"
		public Group getGroup() { return cGroup; }

		//keyword=KeyWord
		public Assignment getKeywordAssignment_0() { return cKeywordAssignment_0; }

		//KeyWord
		public RuleCall getKeywordKeyWordTerminalRuleCall_0_0() { return cKeywordKeyWordTerminalRuleCall_0_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//(children+=Node ("," children+=Node)*)?
		public Group getGroup_2() { return cGroup_2; }

		//children+=Node
		public Assignment getChildrenAssignment_2_0() { return cChildrenAssignment_2_0; }

		//Node
		public RuleCall getChildrenNodeParserRuleCall_2_0_0() { return cChildrenNodeParserRuleCall_2_0_0; }

		//("," children+=Node)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//children+=Node
		public Assignment getChildrenAssignment_2_1_1() { return cChildrenAssignment_2_1_1; }

		//Node
		public RuleCall getChildrenNodeParserRuleCall_2_1_1_0() { return cChildrenNodeParserRuleCall_2_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class ASTLeafElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ASTLeaf");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntLeafParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringLeafParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFloatLeafParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSymbolLeafParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ASTLeaf:
		//	IntLeaf | StringLeaf | FloatLeaf | SymbolLeaf;
		public ParserRule getRule() { return rule; }

		//IntLeaf | StringLeaf | FloatLeaf | SymbolLeaf
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntLeaf
		public RuleCall getIntLeafParserRuleCall_0() { return cIntLeafParserRuleCall_0; }

		//StringLeaf
		public RuleCall getStringLeafParserRuleCall_1() { return cStringLeafParserRuleCall_1; }

		//FloatLeaf
		public RuleCall getFloatLeafParserRuleCall_2() { return cFloatLeafParserRuleCall_2; }

		//SymbolLeaf
		public RuleCall getSymbolLeafParserRuleCall_3() { return cSymbolLeafParserRuleCall_3; }
	}

	public class IntLeafElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntLeaf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSignedAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cSignedHyphenMinusKeyword_0_0 = (Keyword)cSignedAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		////BuiltInNode : ListNode | SetNode;
		////
		////ListNode : 
		////	"List"  '[' (children+=Node (',' children+=Node)*)? ']';
		////
		////SetNode : 
		////	"List"  '[' (children+=Node (',' children+=Node)*)? ']';
		//IntLeaf:
		//	signed="-"? value=INT;
		public ParserRule getRule() { return rule; }

		//signed="-"? value=INT
		public Group getGroup() { return cGroup; }

		//signed="-"?
		public Assignment getSignedAssignment_0() { return cSignedAssignment_0; }

		//"-"
		public Keyword getSignedHyphenMinusKeyword_0_0() { return cSignedHyphenMinusKeyword_0_0; }

		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
	}

	public class StringLeafElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringLeaf");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringLeaf:
		//	value=STRING;
		public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class SymbolLeafElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SymbolLeaf");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//SymbolLeaf:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class FloatLeafElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FloatLeaf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSignedAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cSignedHyphenMinusKeyword_0_0 = (Keyword)cSignedAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cAAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cAINTTerminalRuleCall_1_0_0_0 = (RuleCall)cAAssignment_1_0_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cBAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cBINTTerminalRuleCall_1_0_2_0 = (RuleCall)cBAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cFullStopKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cBAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cBINTTerminalRuleCall_1_1_1_0 = (RuleCall)cBAssignment_1_1_1.eContents().get(0);
		
		/// *
		//StmtBlock:
		//	(stmts+=SetExpression ';')*;
		//
		//SetExpression returns Expression: 
		//	MapExpression  ({Operation.left=current}name='=' right=MapExpression)*;
		//
		//MapExpression returns Expression:
		//	SlashDotExpression  ({Operation.left=current} name="->" right=SlashDotExpression)*;
		//	 
		//SlashDotExpression returns Expression:
		//	OrExpression  ({Operation.left=current} name="/." right=OrExpression)*;
		//
		//OrExpression returns Expression:
		//	AndExpression ({Operation.left=current} operator=("or"|"xor") right=AndExpression)*;
		//
		//AndExpression returns Expression:
		//	RelationalExpression ({Operation.left=current} operator="and" right=RelationalExpression)*;
		//	
		//RelationalExpression returns Expression:
		//	AdditiveExpression ({Operation.left=current} operator=("===" | "<>" | ">=" | "<=" | ">" | "<") right=AdditiveExpression)*;
		//
		//AdditiveExpression returns Expression:
		//	MultiplicativeExpression ({OperationCall.params+=current} name=("+" | "-") params+=MultiplicativeExpression)*;
		//
		//MultiplicativeExpression returns Expression:
		//	UnaryOrInfixExpression ({OperationCall.params+=current} name=("*" | "/") params+=UnaryOrInfixExpression)*;
		//
		//UnaryOrInfixExpression returns Expression:
		//	UnaryExpression | FunctionDefExpression; 
		//
		//UnaryExpression returns Expression:
		//	name=("not" | "-") params+=FunctionDefExpression;
		//	
		//FunctionDefExpression returns Expression: 
		//	FunctionExpression ({OperationCall.params+=current} ':=' body+=StmtBlock)* ; 
		//
		//FunctionExpression returns Expression: 
		//	(PrimaryExpression (({OperationCall.params+=current} 
		//	name='[' (args+=SetExpression (',' args+=SetExpression)*)? ']')
		//	)?);
		//
		//PrimaryExpression returns Expression:
		//	Literal | 
		//	ObjectReference |
		//	ParanthesizedExpression;
		//
		//ParanthesizedExpression returns Expression:
		//	name="(" exp=SetExpression ")";
		//
		//Literal: BooleanLiteral | IntegerLiteral  | RealLiteral | StringLiteral;
		//	
		//BooleanLiteral: 	bool=("True" | "False" );
		//IntegerLiteral: 	int=INT;
		//RealLiteral:    	real=REAL;
		//StringLiteral:   	string=STRING;
		//
		//terminal REAL: ('0'..'9')* '.' ('0'..'9')*;
		//
		//
		//ObjectReference :  ContextDef | SymbolDef | DollarSymbolDef;
		//
		//
		//WildCardExp:
		//	('_')+; 
		//
		//
		//ParamDef:
		//	(name=SymbolDef ':') type=SymbolDef;
		//
		//SymbolDef:
		//	(prefix+=ID '::')* name=ID;
		//
		//DollarSymbolDef :
		// 	'$' SymbolDef;
		// 	
		//ContextDef:
		//	(path=ContextPath)? '`' def=SymbolDef;
		//	
		//ContextPath:
		//	path+=ID ('`' path+=ID);
		//
		////
		////TypeDef:
		////	BuiltInType | UserTypeDef; 
		////	
		////BuiltInType:
		////	'integer' | 'boolean';
		////
		////UserTypeDef:
		////	ref=[TypeDef];
		////	
		////	
		//
		//
		////Alternatives H »» L
		////Blank H_L
		////BlankSequence H__L
		////Cases
		////Count
		////DeleteCases
		////MatchQ
		////Pattern
		////PatternTest H? L
		// * /FloatLeaf:
		//	signed="-"? (a=INT "." b=INT | "." b=INT);
		public ParserRule getRule() { return rule; }

		//signed="-"? (a=INT "." b=INT | "." b=INT) / *
		//StmtBlock:
		//	(stmts+=SetExpression ';')*;
		//
		//SetExpression returns Expression: 
		//	MapExpression  ({Operation.left=current}name='=' right=MapExpression)*;
		//
		//MapExpression returns Expression:
		//	SlashDotExpression  ({Operation.left=current} name="->" right=SlashDotExpression)*;
		//	 
		//SlashDotExpression returns Expression:
		//	OrExpression  ({Operation.left=current} name="/." right=OrExpression)*;
		//
		//OrExpression returns Expression:
		//	AndExpression ({Operation.left=current} operator=("or"|"xor") right=AndExpression)*;
		//
		//AndExpression returns Expression:
		//	RelationalExpression ({Operation.left=current} operator="and" right=RelationalExpression)*;
		//	
		//RelationalExpression returns Expression:
		//	AdditiveExpression ({Operation.left=current} operator=("===" | "<>" | ">=" | "<=" | ">" | "<") right=AdditiveExpression)*;
		//
		//AdditiveExpression returns Expression:
		//	MultiplicativeExpression ({OperationCall.params+=current} name=("+" | "-") params+=MultiplicativeExpression)*;
		//
		//MultiplicativeExpression returns Expression:
		//	UnaryOrInfixExpression ({OperationCall.params+=current} name=("*" | "/") params+=UnaryOrInfixExpression)*;
		//
		//UnaryOrInfixExpression returns Expression:
		//	UnaryExpression | FunctionDefExpression; 
		//
		//UnaryExpression returns Expression:
		//	name=("not" | "-") params+=FunctionDefExpression;
		//	
		//FunctionDefExpression returns Expression: 
		//	FunctionExpression ({OperationCall.params+=current} ':=' body+=StmtBlock)* ; 
		//
		//FunctionExpression returns Expression: 
		//	(PrimaryExpression (({OperationCall.params+=current} 
		//	name='[' (args+=SetExpression (',' args+=SetExpression)*)? ']')
		//	)?);
		//
		//PrimaryExpression returns Expression:
		//	Literal | 
		//	ObjectReference |
		//	ParanthesizedExpression;
		//
		//ParanthesizedExpression returns Expression:
		//	name="(" exp=SetExpression ")";
		//
		//Literal: BooleanLiteral | IntegerLiteral  | RealLiteral | StringLiteral;
		//	
		//BooleanLiteral: 	bool=("True" | "False" );
		//IntegerLiteral: 	int=INT;
		//RealLiteral:    	real=REAL;
		//StringLiteral:   	string=STRING;
		//
		//terminal REAL: ('0'..'9')* '.' ('0'..'9')*;
		//
		//
		//ObjectReference :  ContextDef | SymbolDef | DollarSymbolDef;
		//
		//
		//WildCardExp:
		//	('_')+; 
		//
		//
		//ParamDef:
		//	(name=SymbolDef ':') type=SymbolDef;
		//
		//SymbolDef:
		//	(prefix+=ID '::')* name=ID;
		//
		//DollarSymbolDef :
		// 	'$' SymbolDef;
		// 	
		//ContextDef:
		//	(path=ContextPath)? '`' def=SymbolDef;
		//	
		//ContextPath:
		//	path+=ID ('`' path+=ID);
		//
		////
		////TypeDef:
		////	BuiltInType | UserTypeDef; 
		////	
		////BuiltInType:
		////	'integer' | 'boolean';
		////
		////UserTypeDef:
		////	ref=[TypeDef];
		////	
		////	
		//
		//
		////Alternatives H »» L
		////Blank H_L
		////BlankSequence H__L
		////Cases
		////Count
		////DeleteCases
		////MatchQ
		////Pattern
		////PatternTest H? L
		// * /
		public Group getGroup() { return cGroup; }

		//signed="-"?
		public Assignment getSignedAssignment_0() { return cSignedAssignment_0; }

		//"-"
		public Keyword getSignedHyphenMinusKeyword_0_0() { return cSignedHyphenMinusKeyword_0_0; }

		//a=INT "." b=INT / *
		//StmtBlock:
		//	(stmts+=SetExpression ';')*;
		//
		//SetExpression returns Expression: 
		//	MapExpression  ({Operation.left=current}name='=' right=MapExpression)*;
		//
		//MapExpression returns Expression:
		//	SlashDotExpression  ({Operation.left=current} name="->" right=SlashDotExpression)*;
		//	 
		//SlashDotExpression returns Expression:
		//	OrExpression  ({Operation.left=current} name="/." right=OrExpression)*;
		//
		//OrExpression returns Expression:
		//	AndExpression ({Operation.left=current} operator=("or"|"xor") right=AndExpression)*;
		//
		//AndExpression returns Expression:
		//	RelationalExpression ({Operation.left=current} operator="and" right=RelationalExpression)*;
		//	
		//RelationalExpression returns Expression:
		//	AdditiveExpression ({Operation.left=current} operator=("===" | "<>" | ">=" | "<=" | ">" | "<") right=AdditiveExpression)*;
		//
		//AdditiveExpression returns Expression:
		//	MultiplicativeExpression ({OperationCall.params+=current} name=("+" | "-") params+=MultiplicativeExpression)*;
		//
		//MultiplicativeExpression returns Expression:
		//	UnaryOrInfixExpression ({OperationCall.params+=current} name=("*" | "/") params+=UnaryOrInfixExpression)*;
		//
		//UnaryOrInfixExpression returns Expression:
		//	UnaryExpression | FunctionDefExpression; 
		//
		//UnaryExpression returns Expression:
		//	name=("not" | "-") params+=FunctionDefExpression;
		//	
		//FunctionDefExpression returns Expression: 
		//	FunctionExpression ({OperationCall.params+=current} ':=' body+=StmtBlock)* ; 
		//
		//FunctionExpression returns Expression: 
		//	(PrimaryExpression (({OperationCall.params+=current} 
		//	name='[' (args+=SetExpression (',' args+=SetExpression)*)? ']')
		//	)?);
		//
		//PrimaryExpression returns Expression:
		//	Literal | 
		//	ObjectReference |
		//	ParanthesizedExpression;
		//
		//ParanthesizedExpression returns Expression:
		//	name="(" exp=SetExpression ")";
		//
		//Literal: BooleanLiteral | IntegerLiteral  | RealLiteral | StringLiteral;
		//	
		//BooleanLiteral: 	bool=("True" | "False" );
		//IntegerLiteral: 	int=INT;
		//RealLiteral:    	real=REAL;
		//StringLiteral:   	string=STRING;
		//
		//terminal REAL: ('0'..'9')* '.' ('0'..'9')*;
		//
		//
		//ObjectReference :  ContextDef | SymbolDef | DollarSymbolDef;
		//
		//
		//WildCardExp:
		//	('_')+; 
		//
		//
		//ParamDef:
		//	(name=SymbolDef ':') type=SymbolDef;
		//
		//SymbolDef:
		//	(prefix+=ID '::')* name=ID;
		//
		//DollarSymbolDef :
		// 	'$' SymbolDef;
		// 	
		//ContextDef:
		//	(path=ContextPath)? '`' def=SymbolDef;
		//	
		//ContextPath:
		//	path+=ID ('`' path+=ID);
		//
		////
		////TypeDef:
		////	BuiltInType | UserTypeDef; 
		////	
		////BuiltInType:
		////	'integer' | 'boolean';
		////
		////UserTypeDef:
		////	ref=[TypeDef];
		////	
		////	
		//
		//
		////Alternatives H »» L
		////Blank H_L
		////BlankSequence H__L
		////Cases
		////Count
		////DeleteCases
		////MatchQ
		////Pattern
		////PatternTest H? L
		// * /| "." b=INT
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//a=INT "." b=INT
		public Group getGroup_1_0() { return cGroup_1_0; }

		//a=INT
		public Assignment getAAssignment_1_0_0() { return cAAssignment_1_0_0; }

		//INT
		public RuleCall getAINTTerminalRuleCall_1_0_0_0() { return cAINTTerminalRuleCall_1_0_0_0; }

		//"."
		public Keyword getFullStopKeyword_1_0_1() { return cFullStopKeyword_1_0_1; }

		//b=INT
		public Assignment getBAssignment_1_0_2() { return cBAssignment_1_0_2; }

		//INT
		public RuleCall getBINTTerminalRuleCall_1_0_2_0() { return cBINTTerminalRuleCall_1_0_2_0; }

		//"." b=INT
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"."
		public Keyword getFullStopKeyword_1_1_0() { return cFullStopKeyword_1_1_0; }

		//b=INT
		public Assignment getBAssignment_1_1_1() { return cBAssignment_1_1_1; }

		//INT
		public RuleCall getBINTTerminalRuleCall_1_1_1_0() { return cBINTTerminalRuleCall_1_1_1_0; }
	}
	
	
	private NodeElements pNode;
	private ASTNodeElements pASTNode;
	private TerminalRule tKeyWord;
	private BuiltInNodeElements pBuiltInNode;
	private ASTLeafElements pASTLeaf;
	private IntLeafElements pIntLeaf;
	private StringLeafElements pStringLeaf;
	private SymbolLeafElements pSymbolLeaf;
	private FloatLeafElements pFloatLeaf;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public MathematicaGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Node:
	//	ASTNode | ASTLeaf | BuiltInNode;
	public NodeElements getNodeAccess() {
		return (pNode != null) ? pNode : (pNode = new NodeElements());
	}
	
	public ParserRule getNodeRule() {
		return getNodeAccess().getRule();
	}

	//ASTNode:
	//	name=ID "[" (children+=Node ("," children+=Node)*)? "]";
	public ASTNodeElements getASTNodeAccess() {
		return (pASTNode != null) ? pASTNode : (pASTNode = new ASTNodeElements());
	}
	
	public ParserRule getASTNodeRule() {
		return getASTNodeAccess().getRule();
	}

	//terminal KeyWord:
	//	"Module" | "List" | "Clear" | "CompundExpression" | "BeginPackage" | "Set" | "SetDelayed" | "Message" | "MessageName"
	//	| "Pattern" | "Rule" | "RuleDelayed" | "With" | "Blank" | "ReplaceAll" | "Map" | "Length" | "Protect" | "Union" |
	//	"Plus" | "Catch" | "If" | "Do" | "SameQ" | "UnSameQ" | "Or" | "And" | "Part" | "Print" | "Return" | "Times";
	public TerminalRule getKeyWordRule() {
		return (tKeyWord != null) ? tKeyWord : (tKeyWord = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "KeyWord"));
	} 

	//BuiltInNode:
	//	keyword=KeyWord "[" (children+=Node ("," children+=Node)*)? "]";
	public BuiltInNodeElements getBuiltInNodeAccess() {
		return (pBuiltInNode != null) ? pBuiltInNode : (pBuiltInNode = new BuiltInNodeElements());
	}
	
	public ParserRule getBuiltInNodeRule() {
		return getBuiltInNodeAccess().getRule();
	}

	//ASTLeaf:
	//	IntLeaf | StringLeaf | FloatLeaf | SymbolLeaf;
	public ASTLeafElements getASTLeafAccess() {
		return (pASTLeaf != null) ? pASTLeaf : (pASTLeaf = new ASTLeafElements());
	}
	
	public ParserRule getASTLeafRule() {
		return getASTLeafAccess().getRule();
	}

	////BuiltInNode : ListNode | SetNode;
	////
	////ListNode : 
	////	"List"  '[' (children+=Node (',' children+=Node)*)? ']';
	////
	////SetNode : 
	////	"List"  '[' (children+=Node (',' children+=Node)*)? ']';
	//IntLeaf:
	//	signed="-"? value=INT;
	public IntLeafElements getIntLeafAccess() {
		return (pIntLeaf != null) ? pIntLeaf : (pIntLeaf = new IntLeafElements());
	}
	
	public ParserRule getIntLeafRule() {
		return getIntLeafAccess().getRule();
	}

	//StringLeaf:
	//	value=STRING;
	public StringLeafElements getStringLeafAccess() {
		return (pStringLeaf != null) ? pStringLeaf : (pStringLeaf = new StringLeafElements());
	}
	
	public ParserRule getStringLeafRule() {
		return getStringLeafAccess().getRule();
	}

	//SymbolLeaf:
	//	name=ID;
	public SymbolLeafElements getSymbolLeafAccess() {
		return (pSymbolLeaf != null) ? pSymbolLeaf : (pSymbolLeaf = new SymbolLeafElements());
	}
	
	public ParserRule getSymbolLeafRule() {
		return getSymbolLeafAccess().getRule();
	}

	/// *
	//StmtBlock:
	//	(stmts+=SetExpression ';')*;
	//
	//SetExpression returns Expression: 
	//	MapExpression  ({Operation.left=current}name='=' right=MapExpression)*;
	//
	//MapExpression returns Expression:
	//	SlashDotExpression  ({Operation.left=current} name="->" right=SlashDotExpression)*;
	//	 
	//SlashDotExpression returns Expression:
	//	OrExpression  ({Operation.left=current} name="/." right=OrExpression)*;
	//
	//OrExpression returns Expression:
	//	AndExpression ({Operation.left=current} operator=("or"|"xor") right=AndExpression)*;
	//
	//AndExpression returns Expression:
	//	RelationalExpression ({Operation.left=current} operator="and" right=RelationalExpression)*;
	//	
	//RelationalExpression returns Expression:
	//	AdditiveExpression ({Operation.left=current} operator=("===" | "<>" | ">=" | "<=" | ">" | "<") right=AdditiveExpression)*;
	//
	//AdditiveExpression returns Expression:
	//	MultiplicativeExpression ({OperationCall.params+=current} name=("+" | "-") params+=MultiplicativeExpression)*;
	//
	//MultiplicativeExpression returns Expression:
	//	UnaryOrInfixExpression ({OperationCall.params+=current} name=("*" | "/") params+=UnaryOrInfixExpression)*;
	//
	//UnaryOrInfixExpression returns Expression:
	//	UnaryExpression | FunctionDefExpression; 
	//
	//UnaryExpression returns Expression:
	//	name=("not" | "-") params+=FunctionDefExpression;
	//	
	//FunctionDefExpression returns Expression: 
	//	FunctionExpression ({OperationCall.params+=current} ':=' body+=StmtBlock)* ; 
	//
	//FunctionExpression returns Expression: 
	//	(PrimaryExpression (({OperationCall.params+=current} 
	//	name='[' (args+=SetExpression (',' args+=SetExpression)*)? ']')
	//	)?);
	//
	//PrimaryExpression returns Expression:
	//	Literal | 
	//	ObjectReference |
	//	ParanthesizedExpression;
	//
	//ParanthesizedExpression returns Expression:
	//	name="(" exp=SetExpression ")";
	//
	//Literal: BooleanLiteral | IntegerLiteral  | RealLiteral | StringLiteral;
	//	
	//BooleanLiteral: 	bool=("True" | "False" );
	//IntegerLiteral: 	int=INT;
	//RealLiteral:    	real=REAL;
	//StringLiteral:   	string=STRING;
	//
	//terminal REAL: ('0'..'9')* '.' ('0'..'9')*;
	//
	//
	//ObjectReference :  ContextDef | SymbolDef | DollarSymbolDef;
	//
	//
	//WildCardExp:
	//	('_')+; 
	//
	//
	//ParamDef:
	//	(name=SymbolDef ':') type=SymbolDef;
	//
	//SymbolDef:
	//	(prefix+=ID '::')* name=ID;
	//
	//DollarSymbolDef :
	// 	'$' SymbolDef;
	// 	
	//ContextDef:
	//	(path=ContextPath)? '`' def=SymbolDef;
	//	
	//ContextPath:
	//	path+=ID ('`' path+=ID);
	//
	////
	////TypeDef:
	////	BuiltInType | UserTypeDef; 
	////	
	////BuiltInType:
	////	'integer' | 'boolean';
	////
	////UserTypeDef:
	////	ref=[TypeDef];
	////	
	////	
	//
	//
	////Alternatives H »» L
	////Blank H_L
	////BlankSequence H__L
	////Cases
	////Count
	////DeleteCases
	////MatchQ
	////Pattern
	////PatternTest H? L
	// * /FloatLeaf:
	//	signed="-"? (a=INT "." b=INT | "." b=INT);
	public FloatLeafElements getFloatLeafAccess() {
		return (pFloatLeaf != null) ? pFloatLeaf : (pFloatLeaf = new FloatLeafElements());
	}
	
	public ParserRule getFloatLeafRule() {
		return getFloatLeafAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" | "n" |
	//	"f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
