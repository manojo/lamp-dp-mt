/*
 *   This file was automatically generated by version 1.7 of cextract.
 *   Manual editing not recommended.
 *
 *   Created: Mon Feb 23 18:11:04 1998
 */
#ifndef _gen_h_
#define _gen_h_
#if __STDC__

extern item *affine_list ( node *Z, node *X, int n, int C );
extern void compute_W ( Polyhedron *D, Polyhedron *C, node *DZ, node *CZ,
                        int **l1, int **w1 );
extern context_info *control_domain ( node *X, context_info *C );
extern item *convert_decl ( node *decls, int status );
extern item *convert_pol2 ( node *Z, node *X, int n );
extern item *declare_indices ( void );
extern Polyhedron *domain2aligned_domain ( Polyhedron *D, node *I1, node
                                           *I2 );
extern item *domain2C ( node *Z, node *X );
extern node *domain2node ( Polyhedron *p );
extern item *dot_prod ( int *l, int *w, node *Z, int length, int plength,
                        int C );
extern void do_substitution ( node *Z, node *X, int C );
extern node *get_decl ( node *in, node *alpha );
extern node *identity_list ( int vdim );
extern item *id_list ( node *in );
extern item *id_list_n ( node *in, int n );
extern item *id_list_n_sub ( node *in, int n );
extern void index_restore ( int x );
extern int * indices_types ( node *l );
extern item *initialize_context ( node *n1, int G_dim, int *G_val,
                                  context_info *Context );
extern item *list_decls ( node *idecls, node *odecls );
extern void mark_index ( node *id, int status );
extern Polyhedron *node2aligned_domain ( node *D, node *I1, node *I2 );
extern Polyhedron *node2domain ( node *D );
extern int nth_index_type ( int nb, node *l );
extern item *spec_pol2 ( node *Z, node *X, int n );
extern int sprint_con ( char *txt, int *a, int len, node *Z, int C );
extern int sprint_name ( char *txt, node *n );
extern int strcmp_end ( const char *a, const char *b, const char c );

#else /* __STDC__ */

extern item *affine_list (/* node *Z, node *X, int n, int C */);
extern void compute_W (/* Polyhedron *D, Polyhedron *C, node *DZ, node
                        *CZ, int **l1, int **w1 */);
extern context_info *control_domain (/* node *X, context_info *C */);
extern item *convert_decl (/* node *decls, int status */);
extern item *convert_pol2 (/* node *Z, node *X, int n */);
extern item *declare_indices (/* void */);
extern Polyhedron *domain2aligned_domain (/* Polyhedron *D, node *I1,
                                           node *I2 */);
extern item *domain2C (/* node *Z, node *X */);
extern node *domain2node (/* Polyhedron *p */);
extern item *dot_prod (/* int *l, int *w, node *Z, int length, int
                        plength, int C */);
extern void do_substitution (/* node *Z, node *X, int C */);
extern node *get_decl (/* node *in, node *alpha */);
extern node *identity_list (/* int vdim */);
extern item *id_list (/* node *in */);
extern item *id_list_n (/* node *in, int n */);
extern item *id_list_n_sub (/* node *in, int n */);
extern void index_restore (/* int x */);
extern int * indices_types (/* node *l */);
extern item *initialize_context (/* node *n1, int G_dim, int *G_val,
                                  context_info *Context */);
extern item *list_decls (/* node *idecls, node *odecls */);
extern void mark_index (/* node *id, int status */);
extern Polyhedron *node2aligned_domain (/* node *D, node *I1, node *I2 */);
extern Polyhedron *node2domain (/* node *D */);
extern int nth_index_type (/* int nb, node *l */);
extern item *spec_pol2 (/* node *Z, node *X, int n */);
extern int sprint_con (/* char *txt, int *a, int len, node *Z, int C */);
extern int sprint_name (/* char *txt, node *n */);
extern int strcmp_end (/* const char *a, const char *b, const char c */);

#endif /* __STDC__ */
#endif /* _gen_h_ */
