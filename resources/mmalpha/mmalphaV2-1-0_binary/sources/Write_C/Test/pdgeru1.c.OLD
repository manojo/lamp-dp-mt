/* system pdgeru */

/* C-Code generated by Alpha Code Generator version 1.2 */

#include <math.h>
typedef struct { int value;
		 int computed; } intvar;
typedef struct { int value;
		 int computed; } boolvar;
typedef struct { double value;
		 int computed; } realvar;
double atof();
int    atoi();

#define min(x,y) ((x)<(y)?(x):(y))
#define max(x,y) ((x)>(y)?(x):(y))
#define INFINITY 0x7fffffff

/* parameters */
#define N 16
#define NB 4
#define JB 4
#define k 2
#define l 2

/* input variables */
char __s[32];
realvar _Acol[48];
#define Acol(i,j,p)	_Acol[(i)+4*(j)+16*(p)-21]
realvar _Vect[8];
#define Vect(i,p)	_Vect[(i)+4*(p)-5]

/* output variables */
realvar _Bcol[48];
#define Bcol(i,j,p)	_Bcol[(i)+4*(j)+16*(p)-21]

/* no local variables */

static double compute_Acol(i,j,p)
int i,j,p;
{
  realvar *tmp;
/* printf("Computing: Acol[%d,%d,%d]\n" ,i,j,p); */
  tmp = &(Acol(i,j,p));
  if (!tmp->computed) {
          printf("Input Acol[%d,%d,%d] =" ,i,j,p);
     gets(__s);
     tmp->value = atof(__s);
     tmp->computed = 1;}
  return tmp->value;
}

static double compute_Vect(i,p)
int i,p;
{
  realvar *tmp;
/* printf("Computing: Vect[%d,%d]\n" ,i,p); */
  tmp = &(Vect(i,p));
  if (!tmp->computed) {
          printf("Input Vect[%d,%d] =" ,i,p);
     gets(__s);
     tmp->value = atof(__s);
     tmp->computed = 1;}
  return tmp->value;
}

static double compute_Bcol();

/* --let equations */
static double compute_Bcol(i,j,p)
int i,j,p;
{
  realvar *tmp;
/* printf("Computing: Bcol[%d,%d,%d]\n" ,i,j,p); */
  tmp = &(Bcol(i,j,p));
  if (!tmp->computed) {
          tmp->value = ( p-1>=0 && -p+k-1>=0 )  ? ( compute_Acol(i,j,p) ) : 
         ( p-k==0 )  ? ( ( 
                       i-1>=0 && -i+j+1>=0 && -i+l>=0 && j-1>=0 && -j+JB>=0 ) 
                      ? ( compute_Acol(i,j,p) ) : 
                  ( i-l-1==0 && j-l==0 && JB-l-1>=0 )  ? 
                     ( compute_Acol(i,j,p) ) : 
                  ( i-l-1==0 && j-l-1>=0 && -j+JB>=0 )  ? ( 
                       compute_Acol(i,j,p) - 
                       compute_Vect(i,p) * compute_Acol(l,j,k) ) : 
                  ( i-l-2>=0 && -i+j+1>=0 && -i+JB>=0 && -j+JB>=0 )  ? 
                     ( compute_Acol(i,j,p) ) : 
                  ( printf("? case error\n"), exit(-1)) ) : 
         ( p-k-1==0 )  ? ( ( 
                       i-1==0 && j-JB==0 && NB-k-1>=0 && JB-1>=0 && -JB+l>=0
                      )  ? ( compute_Acol(i,j,p) ) : 
                  ( i-1==0 && j-JB==0 && NB-k-1>=0 && JB-l-1>=0 )  ? 
                     ( compute_Acol(i,j,p) ) : 
                  ( printf("? case error\n"), exit(-1)) ) : 
         ( printf("? case error\n"), exit(-1));
     tmp->computed = 1;}
  return tmp->value;
}

int main()
{
   int p, j, i ;
   
   /* --inputs */
   for (i=1; i<=4; i++)
   {  for (j=1; j<=4; j++)
      {  for (p=1; p<=min(( (j+5)%3<0 ? (j+5)/3-1 : (j+5)/3 ),
         ( (-i+j+9)%4<0 ? (-i+j+9)/4-1 : (-i+j+9)/4 ),
         ( (-i+10)%3<0 ? (-i+10)/3-1 : (-i+10)/3 ),
         ( (-i+j+5)%2<0 ? (-i+j+5)/2-1 : (-i+j+5)/2 )); p++)
         {  printf("Acol[%d,%d,%d]= %f\n", i,j,p, compute_Acol(i,j,p) );
         }
      }
   }
   for (i=1; i<=4; i++)
   {  for (p=1; p<=min(2,-i+5); p++)
      {  printf("Vect[%d,%d]= %f\n", i,p, compute_Vect(i,p) );
      }
   }
   /* --outputs */
   for (i=1; i<=4; i++)
   {  for (j=1; j<=4; j++)
      {  for (p=1; p<=min(( (j+5)%3<0 ? (j+5)/3-1 : (j+5)/3 ),
         ( (-i+j+9)%4<0 ? (-i+j+9)/4-1 : (-i+j+9)/4 ),
         ( (-i+10)%3<0 ? (-i+10)/3-1 : (-i+10)/3 ),
         ( (-i+j+5)%2<0 ? (-i+j+5)/2-1 : (-i+j+5)/2 )); p++)
         {  printf("Bcol[%d,%d,%d]= %f\n", i,j,p, compute_Bcol(i,j,p) );
         }
      }
   }
}
