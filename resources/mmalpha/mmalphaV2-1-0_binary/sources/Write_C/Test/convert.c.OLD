/* system convert */

/* C-Code generated by Alpha Code Generator version 1.2 */

#include <math.h>
typedef struct { int value;
		 int computed; } intvar;
typedef struct { int value;
		 int computed; } boolvar;
typedef struct { double value;
		 int computed; } realvar;
double atof();
int    atoi();

#define min(x,y) ((x)<(y)?(x):(y))
#define max(x,y) ((x)>(y)?(x):(y))
#define INFINITY 0x7fffffff

/* parameters */
#define N 12

/* input variables */
char __s[32];
realvar _Xin;
#define Xin()	_Xin

/* output variables */
intvar _X[13];
#define X(k)	_X[(k)]

/* local variables */
realvar _Y[13];
#define Y(k)	_Y[(k)]
realvar _Z[13];
#define Z(k)	_Z[(k)]

static double compute_Xin()
{
  realvar *tmp;
/* printf("Computing: Xin[]\n"); */
  tmp = &(Xin());
  if (!tmp->computed) {
          printf("Input Xin =" );
     gets(__s);
     tmp->value = atof(__s);
     tmp->computed = 1;}
  return tmp->value;
}

static int compute_X();

static double compute_Y();

static double compute_Z();

/* --let equations */
static double compute_Y(k)
int k;
{
  realvar *tmp;
/* printf("Computing: Y[%d]\n" ,k); */
  tmp = &(Y(k));
  if (!tmp->computed) {
          tmp->value = ( k==0 )  ? ( compute_Xin() ) : 
         ( k-1>=0 )  ? ( 4 * compute_Z(k-1) ) : 
         ( printf("? case error\n"), exit(-1));
     tmp->computed = 1;}
  return tmp->value;
}

static double compute_Z(k)
int k;
{
  realvar *tmp;
/* printf("Computing: Z[%d]\n" ,k); */
  tmp = &(Z(k));
  if (!tmp->computed) {
          tmp->value = compute_Y(k) - compute_X(k);
     tmp->computed = 1;}
  return tmp->value;
}

static int compute_X(k)
int k;
{
  intvar *tmp;
/* printf("Computing: X[%d]\n" ,k); */
  tmp = &(X(k));
  if (!tmp->computed) {
          tmp->value = (compute_Y(k) >= 1.5) ? (2) : (
             (compute_Y(k) < 1.5 && compute_Y(k) >= 0.5) ? (1) : (
                 (compute_Y(k) < 0.5 && compute_Y(k) >= -0.5) ? (0) : (
                     (compute_Y(k) < -0.5 && compute_Y(k) >= -1.5) ? (-1) : 
                     (-2))));
     tmp->computed = 1;}
  return tmp->value;
}

int main()
{
   int k ;
   
   /* --inputs */
   printf("Xin = %f\n" , compute_Xin() );
   /* --outputs */
   for (k=0; k<=N; k++)
   {  printf("X[%d]= %d\n", k, compute_X(k) );
   }
}
