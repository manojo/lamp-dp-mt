/* system pdscal */

/* C-Code generated by Alpha Code Generator version 1.2 */

#include <math.h>
typedef struct { int value;
		 int computed; } intvar;
typedef struct { int value;
		 int computed; } boolvar;
typedef struct { double value;
		 int computed; } realvar;
double atof();
int    atoi();

#define min(x,y) ((x)<(y)?(x):(y))
#define max(x,y) ((x)>(y)?(x):(y))
#define INFINITY 0x7fffffff

/* parameters */

/* input variables */
char __s[32];
realvar _V[3];
#define V(i,p)	_V[(i)+(p)-2]

/* output variables */
realvar _Vdiv[3];
#define Vdiv(i,p)	_Vdiv[(i)+(p)-2]

/* no local variables */

static double compute_V(i,p)
int i,p;
{
  realvar *tmp;
/* printf("Computing: V[%d,%d]\n" ,i,p); */
  tmp = &(V(i,p));
  if (!tmp->computed) {
          printf("Input V[%d,%d] =" ,i,p);
     gets(__s);
     tmp->value = atof(__s);
     tmp->computed = 1;}
  return tmp->value;
}

static double compute_Vdiv();

/* --let equations */
static double compute_Vdiv(i,p)
int i,p;
{
  realvar *tmp;
/* printf("Computing: Vdiv[%d,%d]\n" ,i,p); */
  tmp = &(Vdiv(i,p));
  if (!tmp->computed) {
          tmp->value = compute_V(i,p);
     tmp->computed = 1;}
  return tmp->value;
}

int main()
{
   int p, i ;
   
   /* --inputs */
   /* i:=1 */
   for (p=1; p<=3; p++)
   {  printf("V[%d,%d]= %f\n", 1,p, compute_V(1,p) );
   }
   /* --outputs */
   /* i:=1 */
   for (p=1; p<=3; p++)
   {  printf("Vdiv[%d,%d]= %f\n", 1,p, compute_Vdiv(1,p) );
   }
}
