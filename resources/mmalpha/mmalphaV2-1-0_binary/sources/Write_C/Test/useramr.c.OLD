/* system useramr2w2 */

/* C-Code generated by Alpha Code Generator version 1.2 */

#include <math.h>
typedef struct { int value;
		 int computed; } intvar;
typedef struct { int value;
		 int computed; } boolvar;
typedef struct { double value;
		 int computed; } realvar;
double atof();
int    atoi();

#define min(x,y) ((x)<(y)?(x):(y))
#define max(x,y) ((x)>(y)?(x):(y))
#define INFINITY 0x7fffffff

/* parameters */

/* input variables */
char __s[32];
intvar _memavant[10];
#define memavant(i)	_memavant[(i)]
intvar _awrite1[5];
#define awrite1(t)	_awrite1[(t)]
intvar _dwrite1[5];
#define dwrite1(t)	_dwrite1[(t)]
intvar _awrite2[2];
#define awrite2(t)	_awrite2[(t)-6]
intvar _dwrite2[2];
#define dwrite2(t)	_dwrite2[(t)-6]
intvar _aread1[2];
#define aread1(t)	_aread1[(t)-3]
intvar _aread2[2];
#define aread2(t)	_aread2[(t)-3]

/* output variables */
intvar _memapres[10];
#define memapres(i)	_memapres[(i)]
intvar _dread1[2];
#define dread1(t)	_dread1[(t)-3]
intvar _dread2[2];
#define dread2(t)	_dread2[(t)-3]

/* local variables */
intvar _memavantext[80];
#define memavantext(i,t)	_memavantext[(i)+10*(t)]
intvar _memapresext1[50];
#define memapresext1(i,t)	_memapresext1[(i)+10*(t)]
intvar _memapresext2[20];
#define memapresext2(i,t)	_memapresext2[(i)+10*(t)-60]
intvar _memapresext[80];
#define memapresext(i,t)	_memapresext[(i)+10*(t)]
intvar _memavant_ramwrite1[50];
#define memavant_ramwrite1(i,t)	_memavant_ramwrite1[(i)+10*(t)]
intvar _a[5];
#define a(t)	_a[(t)]
intvar _d[5];
#define d(t)	_d[(t)]
intvar _memapres_ramwrite1[50];
#define memapres_ramwrite1(i,t)	_memapres_ramwrite1[(i)+10*(t)]
intvar _index[50];
#define index(i,t)	_index[(i)+10*(t)]
intvar _memavant_ramwrite2[20];
#define memavant_ramwrite2(i,t)	_memavant_ramwrite2[(i)+10*(t)-60]
intvar _a_ramwrite2[2];
#define a_ramwrite2(t)	_a_ramwrite2[(t)-6]
intvar _d_ramwrite2[2];
#define d_ramwrite2(t)	_d_ramwrite2[(t)-6]
intvar _memapres_ramwrite2[20];
#define memapres_ramwrite2(i,t)	_memapres_ramwrite2[(i)+10*(t)-60]
intvar _index_ramwrite2[20];
#define index_ramwrite2(i,t)	_index_ramwrite2[(i)+10*(t)-60]
intvar _mem[20];
#define mem(i,t)	_mem[(i)+10*(t)-30]
intvar _a_rom3[2];
#define a_rom3(t)	_a_rom3[(t)-3]
intvar _d_rom3[2];
#define d_rom3(t)	_d_rom3[(t)-3]
intvar _dprim[22];
#define dprim(i,t)	_dprim[(i)+11*(t)-32]
intvar _index_rom3[20];
#define index_rom3(i,t)	_index_rom3[(i)+10*(t)-30]
intvar _select[20];
#define select(i,t)	_select[(i)+10*(t)-30]
intvar _mem_rom4[20];
#define mem_rom4(i,t)	_mem_rom4[(i)+10*(t)-30]
intvar _a_rom4[2];
#define a_rom4(t)	_a_rom4[(t)-3]
intvar _d_rom4[2];
#define d_rom4(t)	_d_rom4[(t)-3]
intvar _dprim_rom4[22];
#define dprim_rom4(i,t)	_dprim_rom4[(i)+11*(t)-32]
intvar _index_rom4[20];
#define index_rom4(i,t)	_index_rom4[(i)+10*(t)-30]
intvar _select_rom4[20];
#define select_rom4(i,t)	_select_rom4[(i)+10*(t)-30]

static int compute_memavant(i)
int i;
{
  intvar *tmp;
/* printf("Computing: memavant[%d]\n" ,i); */
  tmp = &(memavant(i));
  if (!tmp->computed) {
          printf("Input memavant[%d] =" ,i);
     gets(__s);
     tmp->value = atoi(__s);
     tmp->computed = 1;}
  return tmp->value;
}

static int compute_awrite1(t)
int t;
{
  intvar *tmp;
/* printf("Computing: awrite1[%d]\n" ,t); */
  tmp = &(awrite1(t));
  if (!tmp->computed) {
          printf("Input awrite1[%d] =" ,t);
     gets(__s);
     tmp->value = atoi(__s);
     tmp->computed = 1;}
  return tmp->value;
}

static int compute_dwrite1(t)
int t;
{
  intvar *tmp;
/* printf("Computing: dwrite1[%d]\n" ,t); */
  tmp = &(dwrite1(t));
  if (!tmp->computed) {
          printf("Input dwrite1[%d] =" ,t);
     gets(__s);
     tmp->value = atoi(__s);
     tmp->computed = 1;}
  return tmp->value;
}

static int compute_awrite2(t)
int t;
{
  intvar *tmp;
/* printf("Computing: awrite2[%d]\n" ,t); */
  tmp = &(awrite2(t));
  if (!tmp->computed) {
          printf("Input awrite2[%d] =" ,t);
     gets(__s);
     tmp->value = atoi(__s);
     tmp->computed = 1;}
  return tmp->value;
}

static int compute_dwrite2(t)
int t;
{
  intvar *tmp;
/* printf("Computing: dwrite2[%d]\n" ,t); */
  tmp = &(dwrite2(t));
  if (!tmp->computed) {
          printf("Input dwrite2[%d] =" ,t);
     gets(__s);
     tmp->value = atoi(__s);
     tmp->computed = 1;}
  return tmp->value;
}

static int compute_aread1(t)
int t;
{
  intvar *tmp;
/* printf("Computing: aread1[%d]\n" ,t); */
  tmp = &(aread1(t));
  if (!tmp->computed) {
          printf("Input aread1[%d] =" ,t);
     gets(__s);
     tmp->value = atoi(__s);
     tmp->computed = 1;}
  return tmp->value;
}

static int compute_aread2(t)
int t;
{
  intvar *tmp;
/* printf("Computing: aread2[%d]\n" ,t); */
  tmp = &(aread2(t));
  if (!tmp->computed) {
          printf("Input aread2[%d] =" ,t);
     gets(__s);
     tmp->value = atoi(__s);
     tmp->computed = 1;}
  return tmp->value;
}

static int compute_memapres();

static int compute_dread1();

static int compute_dread2();

static int compute_memavantext();

static int compute_memapresext1();

static int compute_memapresext2();

static int compute_memapresext();

static int compute_memavant_ramwrite1();

static int compute_a();

static int compute_d();

static int compute_memapres_ramwrite1();

static int compute_index();

static int compute_memavant_ramwrite2();

static int compute_a_ramwrite2();

static int compute_d_ramwrite2();

static int compute_memapres_ramwrite2();

static int compute_index_ramwrite2();

static int compute_mem();

static int compute_a_rom3();

static int compute_d_rom3();

static int compute_dprim();

static int compute_index_rom3();

static int compute_select();

static int compute_mem_rom4();

static int compute_a_rom4();

static int compute_d_rom4();

static int compute_dprim_rom4();

static int compute_index_rom4();

static int compute_select_rom4();

/* --let equations */
static int compute_memavantext(i,t)
int i,t;
{
  intvar *tmp;
/* printf("Computing: memavantext[%d,%d]\n" ,i,t); */
  tmp = &(memavantext(i,t));
  if (!tmp->computed) {
          tmp->value = ( t==0 )  ? ( compute_memavant(i) ) : 
         ( t-1>=0 )  ? ( compute_memapresext(i,t-1) ) : 
         ( printf("? case error\n"), exit(-1));
     tmp->computed = 1;}
  return tmp->value;
}

static int compute_memavant_ramwrite1(i,t)
int i,t;
{
  intvar *tmp;
/* printf("Computing: memavant_ramwrite1[%d,%d]\n" ,i,t); */
  tmp = &(memavant_ramwrite1(i,t));
  if (!tmp->computed) {
          tmp->value = compute_memavantext(i,t);
     tmp->computed = 1;}
  return tmp->value;
}

static int compute_a(t)
int t;
{
  intvar *tmp;
/* printf("Computing: a[%d]\n" ,t); */
  tmp = &(a(t));
  if (!tmp->computed) {
          tmp->value = compute_awrite1(t);
     tmp->computed = 1;}
  return tmp->value;
}

static int compute_d(t)
int t;
{
  intvar *tmp;
/* printf("Computing: d[%d]\n" ,t); */
  tmp = &(d(t));
  if (!tmp->computed) {
          tmp->value = compute_dwrite1(t);
     tmp->computed = 1;}
  return tmp->value;
}

static int compute_index(i,t)
int i,t;
{
  intvar *tmp;
/* printf("Computing: index[%d,%d]\n" ,i,t); */
  tmp = &(index(i,t));
  if (!tmp->computed) {
          tmp->value = ( i==0 && t>=0 && -t+4>=0 )  ? ( 0 ) : 
         ( i-1>=0 && t>=0 && -t+4>=0 )  ? ( compute_index(i-1,t) + 1 ) : 
         ( printf("? case error\n"), exit(-1));
     tmp->computed = 1;}
  return tmp->value;
}

static int compute_memapres_ramwrite1(i,t)
int i,t;
{
  intvar *tmp;
/* printf("Computing: memapres_ramwrite1[%d,%d]\n" ,i,t); */
  tmp = &(memapres_ramwrite1(i,t));
  if (!tmp->computed) {
          tmp->value = (compute_index(i,t) == compute_a()) ? (compute_d()) : 
         (compute_memavant_ramwrite1(i,t));
     tmp->computed = 1;}
  return tmp->value;
}

static int compute_memapresext1(i,t)
int i,t;
{
  intvar *tmp;
/* printf("Computing: memapresext1[%d,%d]\n" ,i,t); */
  tmp = &(memapresext1(i,t));
  if (!tmp->computed) {
          tmp->value = compute_memapres_ramwrite1(i,t);
     tmp->computed = 1;}
  return tmp->value;
}

static int compute_memavant_ramwrite2(i,t)
int i,t;
{
  intvar *tmp;
/* printf("Computing: memavant_ramwrite2[%d,%d]\n" ,i,t); */
  tmp = &(memavant_ramwrite2(i,t));
  if (!tmp->computed) {
          tmp->value = compute_memavantext(i,t);
     tmp->computed = 1;}
  return tmp->value;
}

static int compute_a_ramwrite2(t)
int t;
{
  intvar *tmp;
/* printf("Computing: a_ramwrite2[%d]\n" ,t); */
  tmp = &(a_ramwrite2(t));
  if (!tmp->computed) {
          tmp->value = compute_awrite2(t);
     tmp->computed = 1;}
  return tmp->value;
}

static int compute_d_ramwrite2(t)
int t;
{
  intvar *tmp;
/* printf("Computing: d_ramwrite2[%d]\n" ,t); */
  tmp = &(d_ramwrite2(t));
  if (!tmp->computed) {
          tmp->value = compute_dwrite2(t);
     tmp->computed = 1;}
  return tmp->value;
}

static int compute_index_ramwrite2(i,t)
int i,t;
{
  intvar *tmp;
/* printf("Computing: index_ramwrite2[%d,%d]\n" ,i,t); */
  tmp = &(index_ramwrite2(i,t));
  if (!tmp->computed) {
          tmp->value = ( i==0 && t-6>=0 && -t+7>=0 )  ? ( 0 ) : 
         ( i-1>=0 && t-6>=0 && -t+7>=0 )  ? 
            ( compute_index_ramwrite2(i-1,t) + 1 ) : 
         ( printf("? case error\n"), exit(-1));
     tmp->computed = 1;}
  return tmp->value;
}

static int compute_memapres_ramwrite2(i,t)
int i,t;
{
  intvar *tmp;
/* printf("Computing: memapres_ramwrite2[%d,%d]\n" ,i,t); */
  tmp = &(memapres_ramwrite2(i,t));
  if (!tmp->computed) {
          tmp->value = (compute_index_ramwrite2(i,t) == compute_a_ramwrite2())
          ? (compute_d_ramwrite2()) : (compute_memavant_ramwrite2(i,t));
     tmp->computed = 1;}
  return tmp->value;
}

static int compute_memapresext2(i,t)
int i,t;
{
  intvar *tmp;
/* printf("Computing: memapresext2[%d,%d]\n" ,i,t); */
  tmp = &(memapresext2(i,t));
  if (!tmp->computed) {
          tmp->value = compute_memapres_ramwrite2(i,t);
     tmp->computed = 1;}
  return tmp->value;
}

static int compute_memapresext(i,t)
int i,t;
{
  intvar *tmp;
/* printf("Computing: memapresext[%d,%d]\n" ,i,t); */
  tmp = &(memapresext(i,t));
  if (!tmp->computed) {
     
          tmp->value = 
     ( t>=0 && -t+4>=0 )  ? ( compute_memapresext1(i,t) ) : 
         ( t-5==0 )  ? ( compute_memapresext(i,t-1) ) : 
         ( t-6>=0 && -t+7>=0 )  ? ( compute_memapresext2(i,t) ) : 
         ( printf("? case error\n"), exit(-1));
     tmp->computed = 1;}
  return tmp->value;
}

static int compute_mem(i,t)
int i,t;
{
  intvar *tmp;
/* printf("Computing: mem[%d,%d]\n" ,i,t); */
  tmp = &(mem(i,t));
  if (!tmp->computed) {
          tmp->value = compute_memapresext(i,t);
     tmp->computed = 1;}
  return tmp->value;
}

static int compute_a_rom3(t)
int t;
{
  intvar *tmp;
/* printf("Computing: a_rom3[%d]\n" ,t); */
  tmp = &(a_rom3(t));
  if (!tmp->computed) {
          tmp->value = compute_aread1(t);
     tmp->computed = 1;}
  return tmp->value;
}

static int compute_dprim(i,t)
int i,t;
{
  intvar *tmp;
/* printf("Computing: dprim[%d,%d]\n" ,i,t); */
  tmp = &(dprim(i,t));
  if (!tmp->computed) {
          tmp->value = ( i+1==0 && t-3>=0 && -t+4>=0 )  ? ( 0 ) : 
         ( i>=0 && -i+9>=0 && t-3>=0 && -t+4>=0 )  ? 
            ( compute_dprim(i-1,t) + compute_select(i,t) ) : 
         ( printf("? case error\n"), exit(-1));
     tmp->computed = 1;}
  return tmp->value;
}

static int compute_index_rom3(i,t)
int i,t;
{
  intvar *tmp;
/* printf("Computing: index_rom3[%d,%d]\n" ,i,t); */
  tmp = &(index_rom3(i,t));
  if (!tmp->computed) {
          tmp->value = ( i==0 && t-3>=0 && -t+4>=0 )  ? ( 0 ) : 
         ( i-1>=0 && t-3>=0 && -t+4>=0 )  ? 
            ( compute_index_rom3(i-1,t) + 1 ) : 
         ( printf("? case error\n"), exit(-1));
     tmp->computed = 1;}
  return tmp->value;
}

static int compute_select(i,t)
int i,t;
{
  intvar *tmp;
/* printf("Computing: select[%d,%d]\n" ,i,t); */
  tmp = &(select(i,t));
  if (!tmp->computed) {
     
          tmp->value = 
     (compute_index_rom3(i,t) == compute_a_rom3()) ? (compute_mem(i,t)) : (0);
     tmp->computed = 1;}
  return tmp->value;
}

static int compute_d_rom3(t)
int t;
{
  intvar *tmp;
/* printf("Computing: d_rom3[%d]\n" ,t); */
  tmp = &(d_rom3(t));
  if (!tmp->computed) {
          tmp->value = compute_dprim(9,t);
     tmp->computed = 1;}
  return tmp->value;
}

static int compute_dread1(t)
int t;
{
  intvar *tmp;
/* printf("Computing: dread1[%d]\n" ,t); */
  tmp = &(dread1(t));
  if (!tmp->computed) {
          tmp->value = compute_d_rom3(t);
     tmp->computed = 1;}
  return tmp->value;
}

static int compute_mem_rom4(i,t)
int i,t;
{
  intvar *tmp;
/* printf("Computing: mem_rom4[%d,%d]\n" ,i,t); */
  tmp = &(mem_rom4(i,t));
  if (!tmp->computed) {
          tmp->value = compute_memapresext(i,t);
     tmp->computed = 1;}
  return tmp->value;
}

static int compute_a_rom4(t)
int t;
{
  intvar *tmp;
/* printf("Computing: a_rom4[%d]\n" ,t); */
  tmp = &(a_rom4(t));
  if (!tmp->computed) {
          tmp->value = compute_aread2(t);
     tmp->computed = 1;}
  return tmp->value;
}

static int compute_dprim_rom4(i,t)
int i,t;
{
  intvar *tmp;
/* printf("Computing: dprim_rom4[%d,%d]\n" ,i,t); */
  tmp = &(dprim_rom4(i,t));
  if (!tmp->computed) {
          tmp->value = ( i+1==0 && t-3>=0 && -t+4>=0 )  ? ( 0 ) : 
         ( i>=0 && -i+9>=0 && t-3>=0 && -t+4>=0 )  ? 
            ( compute_dprim_rom4(i-1,t) + compute_select_rom4(i,t) ) : 
         ( printf("? case error\n"), exit(-1));
     tmp->computed = 1;}
  return tmp->value;
}

static int compute_index_rom4(i,t)
int i,t;
{
  intvar *tmp;
/* printf("Computing: index_rom4[%d,%d]\n" ,i,t); */
  tmp = &(index_rom4(i,t));
  if (!tmp->computed) {
          tmp->value = ( i==0 && t-3>=0 && -t+4>=0 )  ? ( 0 ) : 
         ( i-1>=0 && t-3>=0 && -t+4>=0 )  ? 
            ( compute_index_rom4(i-1,t) + 1 ) : 
         ( printf("? case error\n"), exit(-1));
     tmp->computed = 1;}
  return tmp->value;
}

static int compute_select_rom4(i,t)
int i,t;
{
  intvar *tmp;
/* printf("Computing: select_rom4[%d,%d]\n" ,i,t); */
  tmp = &(select_rom4(i,t));
  if (!tmp->computed) {
          tmp->value = (compute_index_rom4(i,t) == compute_a_rom4()) ? 
         (compute_mem_rom4(i,t)) : (0);
     tmp->computed = 1;}
  return tmp->value;
}

static int compute_d_rom4(t)
int t;
{
  intvar *tmp;
/* printf("Computing: d_rom4[%d]\n" ,t); */
  tmp = &(d_rom4(t));
  if (!tmp->computed) {
          tmp->value = compute_dprim_rom4(9,t);
     tmp->computed = 1;}
  return tmp->value;
}

static int compute_dread2(t)
int t;
{
  intvar *tmp;
/* printf("Computing: dread2[%d]\n" ,t); */
  tmp = &(dread2(t));
  if (!tmp->computed) {
          tmp->value = compute_d_rom4(t);
     tmp->computed = 1;}
  return tmp->value;
}

static int compute_memapres(i)
int i;
{
  intvar *tmp;
/* printf("Computing: memapres[%d]\n" ,i); */
  tmp = &(memapres(i));
  if (!tmp->computed) {
          tmp->value = compute_memapresext(i,7);
     tmp->computed = 1;}
  return tmp->value;
}

int main()
{
   int t, i ;
   
   /* --inputs */
   for (i=0; i<=9; i++)
   {  printf("memavant[%d]= %d\n", i, compute_memavant(i) );
   }
   for (t=0; t<=4; t++)
   {  printf("awrite1[%d]= %d\n", t, compute_awrite1(t) );
   }
   for (t=0; t<=4; t++)
   {  printf("dwrite1[%d]= %d\n", t, compute_dwrite1(t) );
   }
   for (t=6; t<=7; t++)
   {  printf("awrite2[%d]= %d\n", t, compute_awrite2(t) );
   }
   for (t=6; t<=7; t++)
   {  printf("dwrite2[%d]= %d\n", t, compute_dwrite2(t) );
   }
   for (t=3; t<=4; t++)
   {  printf("aread1[%d]= %d\n", t, compute_aread1(t) );
   }
   for (t=3; t<=4; t++)
   {  printf("aread2[%d]= %d\n", t, compute_aread2(t) );
   }
   /* --outputs */
   for (i=0; i<=9; i++)
   {  printf("memapres[%d]= %d\n", i, compute_memapres(i) );
   }
   for (t=3; t<=4; t++)
   {  printf("dread1[%d]= %d\n", t, compute_dread1(t) );
   }
   for (t=3; t<=4; t++)
   {  printf("dread2[%d]= %d\n", t, compute_dread2(t) );
   }
}
