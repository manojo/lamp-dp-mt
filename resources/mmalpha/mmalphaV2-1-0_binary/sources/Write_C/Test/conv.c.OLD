create_loop : no upper loop bound exists
create_loop : no upper loop bound exists
/* system convolution */

/* C-Code generated by Alpha Code Generator version 1.2 */

#include <math.h>
typedef struct { int value;
		 int computed; } intvar;
typedef struct { int value;
		 int computed; } boolvar;
typedef struct { double value;
		 int computed; } realvar;
double atof();
int    atoi();

#define min(x,y) ((x)<(y)?(x):(y))
#define max(x,y) ((x)>(y)?(x):(y))
#define INFINITY 0x7fffffff

/* parameters */
#define N 4

/* input variables */
char __s[32];
realvar _x[INFINITY];
realvar _w[5];
#define w(i)	_w[(i)]

/* output variables */
realvar _y[INFINITY];

/* local variables */
realvar _X[INFINITY];
realvar _W[INFINITY];
realvar _Y[INFINITY];

static double compute_x(i)
int i;
{
  double tmp;
/* printf("Computing: x[%d]\n" ,i); */
  printf("Input x[%d] =" ,i);
  gets(__s);
  tmp = atof(__s);
  return tmp;
}

static double compute_w(i)
int i;
{
  realvar *tmp;
/* printf("Computing: w[%d]\n" ,i); */
  tmp = &(w(i));
  if (!tmp->computed) {
          printf("Input w[%d] =" ,i);
     gets(__s);
     tmp->value = atof(__s);
     tmp->computed = 1;}
  return tmp->value;
}

static double compute_y();

static double compute_X();

static double compute_W();

static double compute_Y();

/* --let equations */
static double compute_X(i,k)
int i,k;
{
  double tmp;
/* printf("Computing: X[%d,%d]\n" ,i,k); */
  tmp = ( k+1==0 && i>=0 )  ? ( compute_x(i-k) ) : 
    ( i+1==0 && k+1>=0 && -k+N-1>=0 )  ? ( compute_x(i-k) ) : 
    ( i+1==0 && k-N==0 )  ? ( 0 ) : 
    ( k>=0 && -k+N>=0 && i>=0 )  ? ( compute_X(i-1,k-1) ) : 
    ( printf("? case error\n"), exit(-1));
  return tmp;
}

static double compute_W(i,k)
int i,k;
{
  double tmp;
/* printf("Computing: W[%d,%d]\n" ,i,k); */
  tmp = ( i+1==0 && k>=0 && -k+N>=0 )  ? ( compute_w(k) ) : 
    ( k>=0 && -k+N>=0 && i>=0 )  ? ( compute_W(i-1,k) ) : 
    ( printf("? case error\n"), exit(-1));
  return tmp;
}

static double compute_Y(i,k)
int i,k;
{
  double tmp;
/* printf("Computing: Y[%d,%d]\n" ,i,k); */
  tmp = ( k+1==0 && i>=0 )  ? ( 0 ) : 
    ( k>=0 && -k+N>=0 && i>=0 )  ? 
       ( compute_Y(i,k-1) + compute_W(i-1,k) * compute_X(i-1,k-1) ) : 
    ( printf("? case error\n"), exit(-1));
  return tmp;
}

static double compute_y(i)
int i;
{
  double tmp;
/* printf("Computing: y[%d]\n" ,i); */
  tmp = compute_Y(i,N);
  return tmp;
}

int main()
{
   int k, i ;
   
   /* --inputs */
   for (i=-N; i<=INFINITY; i++)
   {  printf("x[%d]= %f\n", i, compute_x(i) );
   }
   for (i=0; i<=N; i++)
   {  printf("w[%d]= %f\n", i, compute_w(i) );
   }
   /* --outputs */
   for (i=0; i<=INFINITY; i++)
   {  printf("y[%d]= %f\n", i, compute_y(i) );
   }
}
