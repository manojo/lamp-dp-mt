system callfifo :{N | 3<=N}
                (busin : {t | 0<=t} of integer; 
                 op1 : {t | 0<=t} of boolean; 
                 op2 : {t | 0<=t} of boolean)
       returns  (full : {t | 0<=t} of boolean; 
                 empty : {t | 0<=t} of boolean; 
                 wordout : {t | 0<=t} of integer);
var
  Rin : {i,t | 1<=i<=N; 0<=t} of integer;
  Tin : {i,t | 0<=i<=N; 0<=t} of boolean;
  Rout : {i,t | 1<=i<=N; 0<=t} of integer;
  Tout : {i,t | 0<=i<=N; 0<=t} of boolean;
let
  use {t | 0<=t} fifo[N] (Rin, Tin, busin, op1, op2) returns  (Rout, Tout) ;
  Rin[i,t] = 
      case
        { | t=0} : 0[];
        { | 1<=t} : Rout[i,t-1];
      esac;
  Tin[i,t] = 
      case
        { | i<=N-1; t=0} : False[];
        { | i=N; t=0} : True[];
        { | 1<=t} : Tout[i,t-1];
      esac;
  wordout[t] = Rout[N,t];
  full[t] = Tout[0,t];
  empty[t] = Tout[N,t];
tel;
