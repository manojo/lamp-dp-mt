system distance :{N | 1<=N}
                (V1 : {i | 0<=i<=N-1} of integer[S,15]; 
                 V2 : {i | 0<=i<=N-1} of integer[S,15])
       returns  (d :  integer[S,15]);
var
  dloc : {i | -1<=i<=N-1} of integer[S,15];
  diff : {i | 0<=i<=N-1} of integer[S,15];
  absValue : {i | 0<=i<=N-1} of integer[S,15];
let
  diff[i] = V2[i] - V1[i];
  absValue[i] = if diff[i]>0[] then diff[i] else -diff[i];
  dloc[i] = 
      case
        { | i=-1} : 0[];
        { | 0<=i} : dloc[i-1] + absValue[i];
      esac;
  d[] = dloc[N-1];
tel;

system computeDistances :{N,M | 1<=N; 2<=M}
  (descriptor : {i | 0<=i<=N-1} of integer[S,15]; 
   image : {i,j | 0<=i<=N-1; 0<=j<=M-1} of integer[S,15])
returns 
  (distances : {j | 0<=j<=M-1} of integer[S,15]);
var
  temp : {i,j | 0<=i<=N-1; 0<=j<=M-1} of integer[S,15];
  res : {j | 0<=j<=M-1} of integer[S,15];
let
  temp[i,j] = descriptor[i];
  use {j | 0<=j<=M-1} distance[N] (temp, image) returns  (res) ;
  distances = res;
tel;
