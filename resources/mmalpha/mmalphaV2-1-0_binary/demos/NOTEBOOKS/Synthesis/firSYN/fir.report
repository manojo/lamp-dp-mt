Reporting on system: fir
  System was in $result  
25/4/2010 -- 18h 24mn 26.335324s

System:
system fir :   {N,M | 3<=N<=M-1}
               (x : {i | 1<=i<=M} of integer; 
                H : {n | 0<=n<=N-1} of integer)
       returns (res : {i | N<=i<=M} of integer);
var
  HXMirr1 : {t,p | M+1<=t<=N+M; p=2} of integer;
  xXMirr1 : {t,p | 3<=t<=M+2; p=2} of integer;
  TSep2 : {t,p | M+1<=t<=N+M; N<=p<=M} of integer;
  TSep1 : {t,p | M+1<=t<=N+M; N<=p<=M} of integer;
  pipeCx1Reg2Xloc : {t,p | p<=t<=(p+M-1,N+M); 3<=p<=M+1} of integer;
  ser1Reg3 : {t,p | M+1<=t<=N+M; N<=p<=M} of integer;
  pipeCx1Reg2 : {t,p | p+1<=t<=(N+M,p+M); 3<=p<=M} of integer;
  pipeCH1Reg1 : {t,p | M+1<=t<=N+M; 3<=p<=M} of integer;
  ser1Xctl1XIn : {t,p | M<=t<=N+M; N<=p<=M} of boolean;
  pipeCx1 : {t,p | p+1<=t<=(p+M,N+M); 2<=p<=M} of integer;
  pipeCH1 : {t,p | M+1<=t<=N+M; 2<=p<=M} of integer;
  ser1 : {t,p | M<=t<=N+M; N<=p<=M} of integer;
  ser1Xctl1 : {t | M<=t<=N+M} of boolean;
let
  HXMirr1[t,p] = H[t-M-1];
  xXMirr1[t,p] = x[-t+M+3];
  pipeCx1Reg2Xloc[t,p] = pipeCx1[t,p-1];
  pipeCx1Reg2[t,p] = pipeCx1Reg2Xloc[t-1,p];
  ser1Reg3[t,p] = ser1[t-1,p];
  pipeCH1Reg1[t,p] = pipeCH1[t,p-1];
  ser1Xctl1XIn[t,p] = ser1Xctl1[t];
  pipeCx1[t,p] = 
      case
        { | p=2} : xXMirr1;
        { | 3<=p} : pipeCx1Reg2;
      esac;
  pipeCH1[t,p] = 
      case
        { | p=2} : HXMirr1;
        { | 3<=p} : pipeCH1Reg1;
      esac;
  ser1Xctl1[t] = 
      case
        case
          { | t=M} : True[];
          { | M+1<=t} : False[];
        esac;
      esac;
  TSep1[t,p] = pipeCH1 * pipeCx1;
  TSep2[t,p] = ser1Reg3 + TSep1;
  ser1[t,p] = 
      case
        if (ser1Xctl1XIn) then 
            case
              { | t=M} : 0[];
              { | M+1<=t} : 0[];
            esac else 
        case
          { | t=M} : 0[];
          { | M+1<=t} : TSep2;
        esac;
      esac;
  res[i] = ser1[N+M,i];
tel;

-- Equation: 
    HXMirr1 = H.(t,p,N,M->t-M-1,N,M);
  ** Declaration: 
    HXMirr1 : {t,p,N,M | M+1<=t<=N+M; p=2} of integer
  ** Type is: integer
  ** Input equation
  ** This equation can be interpreted as hardware

-- Equation: 
    xXMirr1 = x.(t,p,N,M->-t+M+3,N,M);
  ** Declaration: 
    xXMirr1 : {t,p,N,M | 3<=t<=M+2; p=2} of integer
  ** Type is: integer
  ** Input equation
  ** This equation can be interpreted as hardware

-- Equation: 
    pipeCx1Reg2Xloc = pipeCx1.(t,p,N,M->t,p-1,N,M);
  ** Declaration: 
    pipeCx1Reg2Xloc : {t,p,N,M | p<=t<=(p+M-1,N+M); 3<=p<=M+1} of integer
  ** Type is: integer
  ** Local equation
  ** Indexes: {t, p}
  ** Scheduled and allocated, one time dimension and one space dimension
  ** Connection
  ** This equation can be interpreted as hardware

-- Equation: 
    pipeCx1Reg2 = pipeCx1Reg2Xloc.(t,p,N,M->t-1,p,N,M);
  ** Declaration: 
    pipeCx1Reg2 : {t,p,N,M | p+1<=t<=(N+M,p+M); 3<=p<=M} of integer
  ** Type is: integer
  ** Local equation
  ** Indexes: {t, p}
  ** Scheduled and allocated, one time dimension and one space dimension
  ** integer Register
  ** Valid from 4 <= t <= Min[2 M, M + N]
  ** This equation can be interpreted as hardware

-- Equation: 
    ser1Reg3 = ser1.(t,p,N,M->t-1,p,N,M);
  ** Declaration: 
    ser1Reg3 : {t,p,N,M | M+1<=t<=N+M; N<=p<=M} of integer
  ** Type is: integer
  ** Local equation
  ** Indexes: {t, p}
  ** Scheduled and allocated, one time dimension and one space dimension
  ** integer Register
  ** Valid from 1 + M <= t <= M + N
  ** This equation can be interpreted as hardware

-- Equation: 
    pipeCH1Reg1 = pipeCH1.(t,p,N,M->t,p-1,N,M);
  ** Declaration: 
    pipeCH1Reg1 : {t,p,N,M | M+1<=t<=N+M; 3<=p<=M} of integer
  ** Type is: integer
  ** Local equation
  ** Indexes: {t, p}
  ** Scheduled and allocated, one time dimension and one space dimension
  ** Connection
  ** This equation can be interpreted as hardware

-- Equation: 
    ser1Xctl1XIn = ser1Xctl1.(t,p,N,M->t,N,M);
  ** Declaration: 
    ser1Xctl1XIn : {t,p,N,M | M<=t<=N+M; N<=p<=M} of boolean
  ** Type is: boolean
  ** Local equation
  ** Indexes: {t, p}
  ** Scheduled and allocated, one time dimension and one space dimension
  ** This equation cannot be interpreted as hardware
  ** Dependency: ser1Xctl1.(t,p,N,M->t,N,M)
     Occurrence: {6, 7, 2}
    ** is not square
    ** is not uniform
    ** Possible pipeline: 
     -> Execute the command: pipeall[ {}, {6, 7, 2}, affine[var["pipeCser1Xctl11"], matrix[5, 5, {"t", "p", "N", "M"}, {{1, 0, 0, 0, 0}, {0, 1, 0, 0, 1}, {0, 0, 1, 0, 0}, {0, 0, 0, 1, 0}, {0, 0, 0, 0, 1}}]],domain[4, {"t", "p", "N", "M"}, {pol[2, 5, 0, 3, {{1, 0, 1, 0, 0, -2}, {1, 0, 0, 0, 0, 1}}, {{0, 1, 0, 0, 0, 0}, {0, 0, 0, 1, 0, 0}, {0, 0, 0, 0, 1, 0}, {1, 0, 1, 0, 0, 0}, {1, 0, 2, 0, 0, 1}}]}]]


-- Equation: 
    pipeCx1 = 
    case
      {t,p,N,M | p=2} : xXMirr1;
      {t,p,N,M | 3<=p} : pipeCx1Reg2;
    esac;
  ** Declaration: 
    pipeCx1 : {t,p,N,M | p+1<=t<=(p+M,N+M); 2<=p<=M} of integer
  ** Type is: integer
  ** Local equation
  ** Indexes: {t, p}
  ** Scheduled and allocated, one time dimension and one space dimension
 spatial case   ** Spatial case equation
  ** This equation can be interpreted as hardware

-- Equation: 
    pipeCH1 = 
    case
      {t,p,N,M | p=2} : HXMirr1;
      {t,p,N,M | 3<=p} : pipeCH1Reg1;
    esac;
  ** Declaration: 
    pipeCH1 : {t,p,N,M | M+1<=t<=N+M; 2<=p<=M} of integer
  ** Type is: integer
  ** Local equation
  ** Indexes: {t, p}
  ** Scheduled and allocated, one time dimension and one space dimension
 spatial case   ** Spatial case equation
  ** This equation can be interpreted as hardware

-- Equation: 
    ser1Xctl1 = 
    case
      case
        {t,N,M | t=M} : True.(t,N,M->);
        {t,N,M | M+1<=t} : False.(t,N,M->);
      esac;
    esac;
  ** Declaration: 
    ser1Xctl1 : {t,N,M | M<=t<=N+M} of boolean
  ** Type is: boolean
  ** Local equation
  ** Indexes: {t}
  ** Scheduled, one time dimension
  ** Control equation
  ** This equation can be interpreted as hardware

-- Equation: 
    TSep1 = pipeCH1 * pipeCx1;
  ** Declaration: 
    TSep1 : {t,p,N,M | M+1<=t<=N+M; N<=p<=M} of integer
  ** Type is: integer
  ** Local equation
  ** Indexes: {t, p}
  ** Scheduled and allocated, one time dimension and one space dimension
  ** Combinatorial logic
  ** Binops: {mul}
  ** Unops: {}
  ** Valid from 1 + M <= t <= M + N
  ** This equation can be interpreted as hardware

-- Equation: 
    TSep2 = ser1Reg3 + TSep1;
  ** Declaration: 
    TSep2 : {t,p,N,M | M+1<=t<=N+M; N<=p<=M} of integer
  ** Type is: integer
  ** Local equation
  ** Indexes: {t, p}
  ** Scheduled and allocated, one time dimension and one space dimension
  ** Combinatorial logic
  ** Binops: {add}
  ** Unops: {}
  ** Valid from 1 + M <= t <= M + N
  ** This equation can be interpreted as hardware

-- Equation: 
    ser1 = 
    case
      if (ser1Xctl1XIn) then 
          case
            {t,p,N,M | t=M} : 0.(t,p,N,M->);
            {t,p,N,M | M+1<=t} : 0.(t,p,N,M->);
          esac else 
      case
        {t,p,N,M | t=M} : 0.(t,p,N,M->);
        {t,p,N,M | M+1<=t} : TSep2;
      esac;
    esac;
  ** Declaration: 
    ser1 : {t,p,N,M | M<=t<=N+M; N<=p<=M} of integer
  ** Type is: integer
  ** Local equation
  ** Indexes: {t, p}
  ** Scheduled and allocated, one time dimension and one space dimension
  ** This equation cannot be interpreted as hardware
  ** No dependency


-- Equation: 
    res = ser1.(i,N,M->N+M,i,N,M);
  ** Declaration: 
    res : {i,N,M | N<=i<=M} of integer
  ** Type is: integer
  ** Output equation
  ** Indexes: {i}
  ** Mirror equation
  ** This equation can be interpreted as hardware

---- These equations cannot be translated to hardware:
ser1Xctl1XIn = ser1Xctl1.(t,p,N,M->t,N,M);
ser1 = 
    case
      if (ser1Xctl1XIn) then 
          case
            {t,p,N,M | t=M} : 0.(t,p,N,M->);
            {t,p,N,M | M+1<=t} : 0.(t,p,N,M->);
          esac else 
      case
        {t,p,N,M | t=M} : 0.(t,p,N,M->);
        {t,p,N,M | M+1<=t} : TSep2;
      esac;
    esac;


---- Use statements:


------
  **** Resources used:
  2 integer registers
  0 integer or floating-point mux
  1 multipliers 
  1 adders/subtracters 
  ** Analysis of operators
  mul from 1 + M to M + N
  add from 1 + M to M + N
