system sequence :{X,Y | 3<=X<=Y-1}
                (QS : {i | 1<=i<=X} of integer; 
                 DB : {j | 1<=j<=Y} of integer)
       returns  (res : {j | 1<=j<=Y} of integer);
var
  pipeCDB1 : {t,p | 1<=t<=Y; 0<=p<=X; 3<=X<=Y-1} of integer;
  pipeCQS1 : {t,p | 1<=t<=Y; 1<=p<=X; 3<=X<=Y-1} of integer;
  M : {t,p | 1<=t<=Y+1; 0<=p<=X} of integer;
  MatchQ : {t,p | 1<=t<=Y; 1<=p<=X} of integer;
let
  pipeCDB1[t,p] = 
      case
        { | 1<=t<=Y; p=0; 3<=X<=Y-1} : DB[t];
        { | 1<=t<=Y; 1<=p<=X; 3<=X<=Y-1} : pipeCDB1[t,p-1];
      esac;
  pipeCQS1[t,p] = 
      case
        { | t=1; 1<=p<=X; 3<=X<=Y-1} : QS[p];
        { | 2<=t<=Y; 1<=p<=X; 3<=X<=Y-1} : pipeCQS1[t-1,p];
      esac;
  M[t,p] = 
      case
        { | p=0} : 0[];
        { | t=1; 1<=p} : 0[];
        { | 2<=t; 1<=p} : max(0[], max((M[t-1,p] - 8[]), (M[t-1,p-1] + MatchQ[t-1,p])));
      esac;
  MatchQ[t,p] = if (pipeCQS1 = pipeCDB1) then 15[] else -12[];
  res[j] = M[j+1,X];
tel;
