system prodVect :{N | 3<=N}
                (a : {i,j | 1<=i<=N; 1<=j<=N} of integer; 
                 b : {i | 1<=i<=N} of integer)
       returns  (c : {i | 1<=i<=N} of integer);
var
  bXMirr1 : {t,p | 1<=t<=N; p=0} of integer;
  TSep2 : {t,p | 1<=t<=N; 1<=p<=N} of integer;
  TSep1 : {t,p | 1<=t<=N; 1<=p<=N} of integer;
  pipeCb1Reg3 : {t,p | 1<=t<=N; 1<=p<=N} of integer;
  aReg2 : {t,p | 1<=t<=N; 1<=p<=N} of integer;
  CReg1 : {t,p | 1<=t<=N; 1<=p<=N} of integer;
  CXctl1XIn : {t,p | 0<=t<=N; 1<=p<=N} of boolean;
  pipeCb1 : {t,p | 1<=t<=N; 0<=p<=N} of integer;
  C : {t,p | 0<=t<=N; 1<=p<=N} of integer;
  CXctl1 : {t | 0<=t<=N} of boolean;
let
  bXMirr1[t,p] = b[t];
  pipeCb1Reg3[t,p] = pipeCb1[t,p-1];
  aReg2[t,p] = a[p,t];
  CReg1[t,p] = C[t-1,p];
  CXctl1XIn[t,p] = CXctl1[t];
  pipeCb1[t,p] = 
      case
        { | p=0} : bXMirr1;
        { | 1<=p} : pipeCb1Reg3;
      esac;
  CXctl1[t] = 
      case
        case
          { | t=0} : True[];
          { | 1<=t} : False[];
        esac;
      esac;
  TSep1[t,p] = aReg2 * pipeCb1;
  TSep2[t,p] = CReg1 + TSep1;
  C[t,p] = 
      case
        if (CXctl1XIn) then 
            case
              { | t=0} : 0[];
              { | 1<=t} : 0[];
            esac else 
        case
          { | t=0} : 0[];
          { | 1<=t} : TSep2;
        esac;
      esac;
  c[i] = C[N,i];
tel;
