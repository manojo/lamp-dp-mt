-- Example for VHDL translator -- September 1998
-- This example is a cell extracted from the FIR module
system cellFirModule3 :{p,N,M | 2<=p<=N; N<=M-1}
  (Y_reg7loc : {t | p+1<=t<=p-N+M+1; 2<=p<=N; N<=M-1} of integer; 
   xPipe_reg5loc : {t | p<=t<=p-N+M; 2<=p<=N; N<=M-1} of integer; 
   HPipeES_reg4loc : {t | 2p-N-2<=t<=p-1; 2<=p<=N; N<=M-1} of integer;
   xPipeES_reg3loc : {t | 2p-N-1<=t<=p; 2<=p<=N; N<=M-1} of integer;
   xPipe_ctl2P_reg2loc : {t | p<=t<=p-N+M; 2<=p<=N; N<=M-1} of boolean;
   HPipe_ctl1P_reg1loc : {t | p-1<=t<=p-N+M-1; 2<=p<=N; N<=M-1} of boolean
  )
returns
  (Y : {t | p+2<=t<=p-N+M+2; 2<=p<=N; N<=M-1} of integer; 
   xPipe : {t | p+1<=t<=p-N+M+1; 2<=p<=N; N<=M-1} of integer;
   HPipeES : {t | 2p-N<=t<=p; 2<=p; N<=M-1} of integer; 
   xPipeES : {t | 2p-N+1<=t<=p+1; 2<=p; N<=M-1} of integer;
   xPipe_ctl2P : {t | p+1<=t<=p-N+M+1; 2<=p<=N; N<=M-1} of boolean;
   HPipe_ctl1P : {t | p<=t<=p-N+M; 2<=p<=N; N<=M-1} of boolean
  );
var
  HPipe_ctl1Ploc6 : {t | p<=t<=p-N+M; 2<=p<=N; N<=M-1} of boolean;
  xPipe_ctl2Ploc5 : {t | p+1<=t<=p-N+M+1; 2<=p<=N; N<=M-1} of boolean;
  xPipeESloc4 : {t | 2p-N+1<=t<=p+1; 2<=p; N<=M-1} of integer;
  HPipeESloc3 : {t | 2p-N<=t<=p; 2<=p; N<=M-1} of integer;
  xPipeloc2 : {t | p+1<=t<=p-N+M+1; 2<=p<=N; N<=M-1} of integer;
  HPipe : {t | p<=t<=p-N+M; 2<=p<=N; N<=M-1} of integer;
  HPipe_ctl1 : {t | p<=t<=p-N+M; 2<=p<=N; N<=M-1} of boolean;
  HPipe_ctl1P_reg1 : {t | p<=t<=p-N+M; 2<=p<=N; N<=M-1} of boolean;
  HPipeES_reg4 : {t | 2p-N<=t<=p; 2<=p; N<=M-1} of integer;
  HPipe_reg6 : {t | p+1<=t<=p-N+M; 2<=p<=N} of integer;
  HPipe_reg8 : {t | p+2<=t<=p-N+M+2; 2<=p<=N; N<=M-1} of integer;
  xPipe_ctl2 : {t | p+1<=t<=p-N+M+1; 2<=p<=N; N<=M-1} of boolean;
  xPipe_ctl2P_reg2 : {t | p+1<=t<=p-N+M+1; 2<=p<=N; N<=M-1} of boolean;
  xPipeES_reg3 : {t | 2p-N+1<=t<=p+1; 2<=p; N<=M-1} of integer;
  xPipe_reg5 : {t | p+2<=t<=p-N+M+1; 2<=p<=N} of integer;
  xPipe_reg9 : {t | p+2<=t<=p-N+M+2; 2<=p<=N; N<=M-1} of integer;
  Y_reg7 : {t | p+2<=t<=p-N+M+2; 2<=p<=N; N<=M-1} of integer;
let
  HPipe_ctl1P[t] = HPipe_ctl1Ploc6[t];
  xPipe_ctl2P[t] = xPipe_ctl2Ploc5[t];
  xPipeES[t] = xPipeESloc4[t];
  HPipeES[t] = HPipeESloc3[t];
  xPipe[t] = xPipeloc2[t];
  Y_reg7[t] = Y_reg7loc[t-1];
  xPipe_reg5[t] = xPipe_reg5loc[t-2];
  HPipeES_reg4[t] = HPipeES_reg4loc[t-2];
  xPipeES_reg3[t] = xPipeES_reg3loc[t-2];
  xPipe_ctl2P_reg2[t] = xPipe_ctl2P_reg2loc[t-1];
  HPipe_ctl1P_reg1[t] = HPipe_ctl1P_reg1loc[t-1];
  xPipe_reg9[t] = xPipeloc2[t-1];
  HPipe_reg8[t] = HPipe[t-2];
  HPipe_reg6[t] = HPipe[t-1];
  xPipeESloc4[t] = xPipeES_reg3[t];
  HPipeESloc3[t] = HPipeES_reg4[t];
  xPipe_ctl2Ploc5[t] = xPipe_ctl2P_reg2[t];
  xPipe_ctl2[t] = xPipe_ctl2Ploc5[t];
  xPipeloc2[t] = 
    case
      {| t=p+1; 2<=p<=N; N<=M-1} : 
         if (xPipe_ctl2[t]) then xPipeESloc4[t] else 0[];
      {| p+2<=t<=p-N+M+1; 2<=p<=N} : 
         if (xPipe_ctl2[t]) then 0[] else xPipe_reg5[t];
    esac;
  HPipe_ctl1Ploc6[t] = HPipe_ctl1P_reg1[t];
  HPipe_ctl1[t] = HPipe_ctl1Ploc6[t];
  HPipe[t] = 
    case
      {| t=p; 2<=p<=N; N<=M-1} : 
         if (HPipe_ctl1[t]) then HPipeESloc3[t] else 0[];
      {| p+1<=t<=p-N+M; 2<=p<=N} : 
         if (HPipe_ctl1[t]) then 0[] else HPipe_reg6[t];
      esac;
  Y[t] = Y_reg7[t] + HPipe_reg8[t] * xPipe_reg9[t];
tel;
