system DROT :  {M, p, q | 4<=M; p>=1; q>p}
               (v1 : {i | 1<=i<=M} of real; 
                v2 : {i | 1<=i<=M} of real)
       returns (vr1 : {i | 1<=i<=M} of real; 
                vr2 : {i | 1<=i<=M} of real);
var
  eps :  real;
  t :  real;
  c :  real;
  s :  real;
  vcumul1 : {i | 0<=i<=M; 4<=M} of real;
  vcumul2 : {i | 0<=i<=M; 4<=M} of real;
  vcumul3 : {i | 0<=i<=M; 4<=M} of real;
let
  vcumul1 = 
      case
        {i | i=0; 4<=M} : 0.(i->);
        {i | 1<=i<=M; 4<=M} : vcumul1.(i->i-1) + v1 * v1;
      esac;
  vcumul2 = 
      case
        {i | i=0; 4<=M} : 0.(i->);
        {i | 1<=i<=M; 4<=M} : vcumul2.(i->i-1) + v2 * v2;
      esac;
  vcumul3 = 
      case
        {i | i=0; 4<=M} : 0.(i->);
        {i | 1<=i<=M; 4<=M} : vcumul3.(i->i-1) + v1 * v2;
      esac;
  eps = { | 4<=M} : 0.5 * (vcumul2.(->M) - vcumul1.(->M)) / vcumul3.(->M);
  
  t = if (eps = 0) then 1 else if (eps > 0) then 1 / (eps + sqrt(1 + eps * eps)) else -
              1 / (-eps + sqrt(1 + eps * eps));
  c = 1 / sqrt(1 + t * t);
  s = t * c;
  vr1 = c.(i->) * v1 - s.(i->) * v2;
  vr2 = s.(i->) * v1 + c.(i->) * v2;
tel;


