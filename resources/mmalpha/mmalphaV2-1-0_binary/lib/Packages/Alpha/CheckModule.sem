BeginPackage["Alpha`CheckModule`",{"Alpha`",
"Alpha`Domlib`",
"Alpha`Tables`",
"Alpha`Matrix`", 
"Alpha`Options`", 
"Alpha`Static`"}];

(* Standard head for CVS

	$Author: trisset $
	$Date: 2005/03/11 16:38:29 $
	$Source: /local/chroot/cvsroot/irisa/mmalpha/lib/Packages/Alpha/CheckModule.sem,v $
	$Revision: 1.1 $
	$Log: CheckModule.sem,v $
	Revision 1.1  2005/03/11 16:38:29  trisset
	added vhdl and Alphard
	
	Revision 1.5  2004/07/12 12:22:31  quinton
	This is a dos2unixed version
	
	Revision 1.4  2002/02/25 13:38:11  aguillou
	permit the 2D arrays of processors
	
	Revision 1.3  2000/05/26 17:46:06  quinton
	*** empty log message ***
	
	Revision 1.2  1999/10/11 13:31:53  quinton
	Corrections after processing Samba
	
	Revision 1.1  1998/12/14 15:15:21  quinton
	Semantics of the CheckModule.m package
	
*)
(*
	Semantics of the CheckModule parser
*)

checkModuleParam::usage = 
"checkModuleParam is a global variable of Alpha`CheckModule which contains the 
number of parameters of a system being checked";

checkModule::usage = 
"checkModule[] checks whether $result is an AlpHard Module. checkModule[sys]
checks whether sys is an AlpHard Module.";

semFuncCheckModule::usage = "";

Options[ semFuncCheckModule ] = { debug -> False, verbose -> False }; 

Begin["`Private`"];

Clear[checkModule];
checkModule[opts:___Rule]:=checkModule[$result,opts];
checkModule[sys:_system,opts:___Rule]:=
Module[{msg, error, dbg},
  CheckModuleDebug = debug/.{opts}/.{debug->False};
  Catch[
    error = CheckModuleTranslateSYSTEMDECLARATION[sys];
    If[ CheckModuleDebug, 
        If[ error, Print["There is a Mistake somewhere..."],
                   Print["This program seems to be an AlpHard Module..."]
        ]
    ];
  !error
  ]
]
checkModule[___]:=Message[checkModule::params];

Clear[ semFuncCheckModule ]; 

(* 
	System 
*)
checkModule::paramerror = "In a module, the number of parameters should be 0";
semFuncCheckModule[ system , param:_Integer, input:_, output:_, local:_, eq:_, opts:___Rule] := 
Module[{ dbg, errorparam, errorinput, erroroutput, errorlocal, erroreq },
(*  Print[ param, input, output, local, eq]; *)
  dbg = debug/.{opts}/.Options[ semFuncCheckModule ];
  If[param === 0, errorparam = False, 
     If[dbg,Message[checkModule::paramerror]];errorparam = True];
  errorinput = Not[ Apply[ And, input ]]; 
  erroroutput = Not[ Apply[ And, output ]]; 
  errorlocal = Not[ Apply[ And, local ]]; 
  erroreq = Not[ Apply[ And, eq ]]; 
  errorinput || erroroutput || errorlocal || erroreq || errorparam
];

(* 	
	assignment
*)
checkModule::assignment = "Error in equation\n `1`\n(check dimensions of variable or constant)."; 
semFuncCheckModule[ assignment , rhs:_, eq:_, opts:___Rule] := 
Module[{ dbg  },
  dbg = debug/.{opts}/.{debug->False};
  (* rhs is supposed to be true of false *)
  If[ !rhs&&dbg, Message[ checkModule::assignment, show[ eq, silent->True ] ]];
  rhs
];

(*	Declaration *)
checkModule::decldim = "In :\n `1`\nthe dimension should be less than or equal two...";
checkModule::controldim = "In :\n `1`\nthe type of this variable should be boolean...";
semFuncCheckModule[ decl , d:_ , opts:___Rule] := 
Module[{ dbg, error },
  dbg = debug/.{opts}/.{debug->False};
  error = True;
  (* Added integer output ... PQ July 2004 *)
  If[(d[[3]][[1]] <= 1 && ((d[[2]] === boolean) || (d[[2]] === integer)))
    || d[[3]][[1]]>=1, , 
    If[dbg, Message[checkModule::controldim, show[d,silent->True]]]; 
    error = False
  ];
  If[ d[[3]][[1]] <= 3, , (* Modifed to generate 2D  *)
    If[dbg, Message[checkModule::decldim, show[d,silent->True]]]; 
    error = False
  ];
  error
];

(*	
	use statement
*)
semFuncCheckModule[ use , {id:_, extension:_, paramAssign:_, expList:_,
              idList:_}, opts:___Rule] :=
Module[{ dbg  },
  dbg = debug/.{opts}/.{debug->False};
  True
];

(*
	case expression 
*)
checkModule::case = "In case expression\n`1`\n the number of branches should be 2.";
semFuncCheckModule[ case , expressionList:_, opts:___Rule ] := 
Module[{ dbg  },
  dbg = debug/.{opts}/.{debug->False};
(*
  If[Length[expressionList]=!=2&&dbg, 
     Message[checkModule::case,show[case[expressionList],silent->True]]
  ];
*)
  Apply[And,expressionList]
];

(*
	restriction expression 
*)
semFuncCheckModule[ restrict , trdomain:_, trexpression:_, opts:___Rule ] := 
Module[{ dbg  },
  dbg = debug/.{opts}/.{debug->False};
  (* It is useless to check the dimension of the domain, it is done by analyze *)
  trexpression
];

(*
	affine expression 
*)
checkModule::affexp1 = "In `1`, the matrix should be a translation matrix";
checkModule::affexp2 = "I am lost...";
checkModule::affexp3 = "In `1`, the translation should not be positive";
semFuncCheckModule[ affexp, v:_, aff:_, opts:___Rule] :=
Module[{ dbg  },
  dbg = debug/.{opts}/.{debug->False};
(* 	Two cases: var.[t-k], const[] *)
(* 
  Which[
    Head[v] === const, True,  (* We do not need to check the affine part, as this is done
			   by analyze *)
    (* For a var, we need to check that the matrix is a translation, 
       and also that the translation is positive *)
    Head[v] === var,
    Catch[
      Module[{tr},
        (* Is it a translation ? *)
        If[ translationQ[aff], True, 
          If[dbg, 
             Throw[
               (Message[checkModule::affexp1, show[aff,silent->True]];
               False)
             ],
             Throw[False]
          ]
        ];
        (* Get the translation vector *)
        tr = Last[aff[[4]][[1]]]; 
        If[ tr<=0, True, 
          If[ dbg, 
               (Message[checkModule::affexp3, show[aff,silent->True]];
               False),
             False
          ]
        ]
      ]
    ],
    True, If[dbg, Message[checkModule::affexp, aff], False]
  ]
*)
  True
];

semFuncCheckModule::params = "parameter error while calling a semantic function. Parameters
were \n `1`";
(* Error case *)
semFuncCheckModule[x:___] := 
Module[{ dbg },	
  Throw[Message[ semFuncCheckModule::params, {x} ]]; 
];

End[];
EndPackage[];
