BeginPackage["Alpha`CheckCell`",{"Alpha`",
"Alpha`Domlib`",
"Alpha`Tables`",
"Alpha`Matrix`", 
"Alpha`Options`", 
"Alpha`Static`"}];

(*
	Semantics of the CheckCell parser
*)

CheckCellParam::usage = 
"CheckCellParam is a global variable of Alpha`CheckCell which contains the 
number of parameters of a system being checked";

CheckCellDebug::usage = "CheckCellDebug is the value of the debug option for
the CheckCell function";

checkCell::usage = 
"checkCell[] checks whether $result is an AlpHard Cell. checkCell[sys]
checks whether sys is an AlpHard Cell.";

semFuncCheckCell::usage = "";

Options[ checkCell ] = { debug -> False, verbose -> False };
Options[ semFuncCheckCell ] = { debug -> False, verbose -> False }; 

Begin["`Private`"];

Clear[checkCell];
checkCell[opts:___Rule]:=checkCell[$result, opts];
checkCell[sys:_system,opts:___Rule]:=
Module[{msg, error, dbg},
  CheckCellDebug = debug/.{opts}/.Options[ checkCell ];
  Catch[
    error = CheckCellTranslateSYSTEMDECLARATION[sys];
    If[ CheckCellDebug, 
        If[ error, Print["There is a Mistake somewhere..."],
                   Print["This program seems to be an AlpHard Cell..."]
        ]
    ];
  !error
  ]
]
checkCell[___]:=Message[checkCell::params];

Clear[ semFuncCheckCell ]; 

(* 
	System 
*)
semFuncCheckCell[ system , param:_, input:_, output:_, local:_, eq:_, opts:___Rule] := 
Module[{ dbg, errorparam, errorinput, erroroutput, errorlocal, erroreq },
  errorparam = param;
  dbg = debug/.{opts}/.Options[ semFuncCheckCell ];
  errorinput = Not[ Apply[ And, input ]];
  erroroutput = Not[ Apply[ And, output ]]; 
  errorlocal = Not[ Apply[ And, local ]]; 
  erroreq = Not[ Apply[ And, eq ]]; 
  errorinput || erroroutput || errorlocal || erroreq || errorparam
];

(*
	domain
*)
checkCell::paramerror = 
"In a cell, the number of parameters should be greater than or equal to 0";
semFuncCheckCell[ domain, dim:_Integer, opts:___Rule]:=
Module[{error},
  dbg = debug/.{opts}/.{debug->False};
  If[dim >= 0, error = False, If[dbg,Message[checkCell::paramerror]];error = True];
(* Store parameter value for future use *)
  CheckCellParam = dim;
  error
];

(* 	
	assignment
*)
checkCell::assignment = "Error in equation\n `1`\n(check dimensions of variable or constant)."; 
semFuncCheckCell[ assignment , rhs:_, eq:_, opts:___Rule] := 
Module[{ dbg },
  dbg = debug/.{opts}/.{debug->False};
  (* rhs is supposed to be true of false, except if this is a simple 
     var or const *)

  Which[
    Head[rhs] === var || Head[rhs] === const, True,
    rhs===False&&dbg, 
      Message[ checkCell::assignment, show[ eq, silent->True ] ]; False,
    rhs===False, False,
    rhs===True, True, (* This case was missing *)
    True, Print["This case should never happen... See CheckCell.sem"];False
  ] 
];

(* 	
	binop
*)
semFuncCheckCell[ binop, trop1:_, trop2:_, opts:___Rule] := 
Module[{ dbg  },
  dbg = debug/.{opts}/.{debug->False};
(* Return the and of both operands *)
  trop1 && trop2
];

(*	Declaration *)
checkCell::decldim = "In :\n `1`\nthe dimension should be one plus the number of parameters";
semFuncCheckCell[ decl , d:_ , opts:___Rule] := 
Module[{ dbg  },
  dbg = debug/.{opts}/.{debug->False};
  If[ d[[3]][[1]] === CheckCellParam+1, True, 
    If[dbg, Message[checkCell::decldim, show[d,silent->True]]]; False]
];


(*	
	use statement
*)
checkCell::dimUse="Currently only use without extension domain are allowed in AlpHard 
 (write a call for point wise operators) "
checkCell::inputUse=" Input to use `1` must be simple variables (no affine function) "
semFuncCheckCell[ use , {id:_, extension:_, paramAssign:_, expList:_,
              idList:_}, transInput:_, opts:___Rule] :=
Module[{ dbg , error },
  dbg = debug/.{opts}/.{debug->False};
  error=False;
  (* checking that input are incorrect form *) 
	inputCheck = Apply[And, transInput];
	If[!inputCheck, 
	      If[dbg,Message[checkCell::inputUse,id]];error = error || True];
  (* Checking that extension indices are only parameter *) 
  If[extension[[1]]=!=CheckCellParam,
	If[dbg,Message[checkCell::dimUse]];error = error || True];
  !error
];

(* 
	call statements 
*) 
checkCell::operandCall= 
"operands to call of function `1` must be simple variables (or var.identity )";

semFuncCheckCell[ call , {funcname:_, funcOps:_}, transfuncOps:_, opts:___Rule] :=
Module[{ dbg , error, operandCheck,curOp },
  dbg = debug/.{opts}/.{debug->False};
  error=False;
  (* Checking that inputs have the correct form *) 
  operandCheck = Apply[And, transfuncOps];
  If[ !operandCheck, 
    If[dbg,Message[checkCell::operandCall,funcname]];
      error = error || True
  ];

  (* Checking that truncateLSB has only one argument *)
  If[ funcname === "truncateLSB" && Length[ funcOps ] =!= 1,
    checkCell::callerr = 
"function truncateLSB must have one and only one argument";
    Message[checkCell::callerr]; error = True
  ];

  (* Checking that operands are of the form var of var.affine with 
	affine beeing identity  *)
  Do[ curOp = funcOps[[i]];
    Which[
      (* Argument is var.affine *)
      MatchQ[curOp,affine[var[_],_]],
        (* Check that the matrix is identity *)
        mat1 = curOp[[2]];
        If[!identityQ[mat1],
          (* There is an error *)
          If[dbg,Message[checkCell::operandCall,funcname]];
          error = True
        ] (* End if *)
    , (* Second branch of the case *)
      MatchQ[curOp,var[___]], 
      (* OK, do nothing *)
    , (* Third branch of the case *)
      True, 
      error = True;
      If[ dbg, Message[checkCell::operandCall,funcname] ];
    ];
    ,{i,1,Length[funcOps]}
  ];
  !error
];


(*
	case expression 
*)
checkCell::case = "In a case expression, the number of branches should be 2.";
semFuncCheckCell[ case , expressionList:_, opts:___Rule ] := 
Module[{ dbg  },
  dbg = debug/.{opts}/.{debug->False};
  If[Length[expressionList]=!=2&&dbg, 
     Message[checkCell::case]
  ];
  (Length[expressionList]===2)&&Apply[And,expressionList]
];

(*
	restriction expression 
*)
semFuncCheckCell[ restrict , trdomain:_, trifExpression:_, opts:___Rule ] := 
Module[{ dbg  },
  dbg = debug/.{opts}/.{debug->False};
  (* It is useless to check the dimension of the domain, it is done by analyze *)
  trifExpression
];

(*
    if expression 
*)
checkCell::ifcondition = "In expression\n`1`\nthe control signal is wrong";
checkCell::ifalt1 = "In expression\n`1`\nthe first alternative is wrong";
checkCell::ifalt2 = "In expression\n`1`\nthe second alternative is wrong";
semFuncCheckCell[ if , trifCondition:_, condition:_, tralt1:_, alt1:_, 
              tralt2:_, alt2:_, opts:___Rule] :=
Module[{ dbg },
  dbg = debug/.{opts}/.{debug->False};

  If[ !trifCondition&&dbg, 
      (Message[checkCell::ifcondition, 
              show[ if[ condition, alt1, alt2 ], silent->True]
              ]; False), 
      False
  ];
  If[ !tralt1&&dbg, 
      (Message[checkCell::ifalt1, 
               show[ if[ condition, alt1, alt2 ], silent->True]
              ]; False), 
      False
  ];
  If[ !tralt2&&dbg, 
      (Message[checkCell::ifalt2, show[ if[ condition, alt1, alt2 ],
                            silent->True]]; False), 
      False];
  trifCondition&&tralt1&&tralt2
];

(*
	Control expression
*)
checkCell::controlexpression1 = "Control expression\n`1`\nis not boolean";
checkCell::controlexpression2 = 
"Control expression\n`1`\nshould have an identity dependence";
semFuncCheckCell[ controlexpression, expression:_, affineFunction:_, 
              opts:___Rule] :=
Module[{ dbg, decl },
  dbg = debug/.{opts}/.{debug->False};
  (* The type of this expression must be boolean. We look for this 
     variable *)
(* 
  Skip this for the moment...
  decl = getDeclaration[expression[[1]]];
  If[ decl[[2]]=!=boolean&&dbg, 
      Message[checkCell::controlexpression1,show[affine[expression,affineFunction],silent->True]]];
  If[ !identityQ[affineFunction]&&dbg, 
      Message[checkCell::controlexpression2,show[affine[expression,affineFunction]silent->True]]];
  (decl[[2]]===boolean)&&(identityQ[affineFunction])
*)
  True
];

(*
	affine expression 
*)
checkCell::affexp1 = "In `1`, the matrix should be a translation matrix";
checkCell::affexp2 = "I am lost...";
checkCell::affexp3 = "In `1`, the translation should not be positive";
semFuncCheckCell[ affexp, v:_, aff:_, opts:___Rule] :=
Module[{ dbg  },
  dbg = debug/.{opts}/.{debug->False};
(* 	Two cases: var.[t-k], const[] *)
  Which[
    Head[v] === const, True,  (* We do not need to check the affine part, as this is done
			   by analyze *)
    (* For a var, we need to check that the matrix is a translation, 
       and also that the translation is positive *)
    Head[v] === var,
    Catch[
      Module[{tr},
        (* Is it a translation ? *)
        If[ translationQ[aff], True, 
          If[dbg, 
             Throw[
               (Message[checkCell::affexp1, show[aff,silent->True]];
               False)
             ],
             Throw[False]
          ]
        ];
        (* Get the translation vector *)
        tr = Last[aff[[4]][[1]]]; 
        If[ tr<=0, Throw[True], 
          If[ dbg, 
               Throw[Message[checkCell::affexp3, show[aff,silent->True]
                     ];
                 False
               ],
             Throw[False]
          ]
        ]
      ]
    ],
    True, Throw[If[dbg, Message[checkCell::affexp, aff];False, False]]
  ]
];

semFuncCheckCell::params = "parameter error while calling a semantic function.";
(* Error case *)
semFuncCheckCell[x:___] := 
Module[{ dbg },	
  Throw[Message[ semFuncCheckCell::params];Print["Parameters were: ", {x} ]]; 
];

End[];
EndPackage[];
