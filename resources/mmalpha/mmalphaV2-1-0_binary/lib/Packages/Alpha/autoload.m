(*
   This file was automatically produced -- DO NOT EDIT --
*)

DeclarePackage["Alpha`Alphard`",{
  "alpha0ToAlphard",
  "alpha0ToAlphardModule",
  "alphardFirstStep",
  "alphardTimeLife",
  "buildControler",
  "buildInterface",
  "buildOneCell",
  "getArrayDomains",
  "insertFunction",
  "isConnexionEqQ",
  "isMirrorEqQ",
  "isModuleQ",
  "isolateOutput",
  "isolateOutputList",
  "isSpaceDepQ",
  "normalizeIdDep",
  "normalizeIdDepInEq",
  "normalizeIdDepLib",
  "removeSystem",
  "setOutputVar",
  "showSpaceDom",
  "simplify",
  "simplifyConnexions",
  "structureFrom"
  }];

DeclarePackage["Alpha`ChangeOfBasis`",{
  "changeIndexes",
  "changeOfBasis",
  "ChangeOfBasis",
  "extDomainCOB"
  }];

DeclarePackage["Alpha`CheckCell`",{
  "checkCell",
  "CheckCellDebug",
  "CheckCellParam",
  "CheckCellTranslateAFFEXP",
  "CheckCellTranslateASSIGNMENT",
  "CheckCellTranslateBINEXP",
  "CheckCellTranslateCALLEXP",
  "CheckCellTranslateCASEMUX",
  "CheckCellTranslateCASEXP",
  "CheckCellTranslateCONSTEXP",
  "CheckCellTranslateCONSTEXPE",
  "CheckCellTranslateCONSTRAINT",
  "CheckCellTranslateCONTROLEXPRESSION",
  "CheckCellTranslateDECLARATION",
  "CheckCellTranslateDOMAIN",
  "CheckCellTranslateDOMAINPARAM",
  "CheckCellTranslateELEMENTS",
  "CheckCellTranslateEQUATION",
  "CheckCellTranslateGENERATOR",
  "CheckCellTranslateIFEXP",
  "CheckCellTranslateIFMUX",
  "CheckCellTranslatelist",
  "CheckCellTranslateMATRIX",
  "CheckCellTranslateMATRIXNUM",
  "CheckCellTranslatePOLYHEDRON",
  "CheckCellTranslateRESTEXP",
  "CheckCellTranslateRESTEXPMUX2",
  "CheckCellTranslateSUBEXPRESSION",
  "CheckCellTranslateSUBMUX2",
  "CheckCellTranslateSYSTEMDECLARATION",
  "CheckCellTranslateUNEXP",
  "CheckCellTranslateUSESTATEMENT",
  "CheckCellTranslateVAREXP",
  "CheckCellTranslateVAREXPE",
  "CheckCellTranslateVAREXPORCONST",
  "semFuncCheckCell"
  }];

DeclarePackage["Alpha`CheckController`",{
  "checkController",
  "CheckControllerDebug",
  "CheckControllerTranslateAFFEXP",
  "CheckControllerTranslateASSIGNMENT",
  "CheckControllerTranslateCASEXP",
  "CheckControllerTranslateCONSTEXP",
  "CheckControllerTranslateCONSTRAINT",
  "CheckControllerTranslateDECLARATION",
  "CheckControllerTranslateDOMAIN",
  "CheckControllerTranslateEQUATION",
  "CheckControllerTranslateGENERATOR",
  "CheckControllerTranslatelist",
  "CheckControllerTranslateMATRIX",
  "CheckControllerTranslateMATRIXNUM",
  "CheckControllerTranslatePOLYHEDRON",
  "CheckControllerTranslateRESTEXP",
  "CheckControllerTranslateSYSTEMDECLARATION",
  "semFuncCheckController"
  }];

DeclarePackage["Alpha`CheckModule`",{
  "checkModule",
  "CheckModuleDebug",
  "checkModuleParam",
  "CheckModuleTranslateAFFEXP",
  "CheckModuleTranslateASSIGNMENT",
  "CheckModuleTranslateCASEXP",
  "CheckModuleTranslateCONNECTION",
  "CheckModuleTranslateCONSTRAINT",
  "CheckModuleTranslateDECLARATION",
  "CheckModuleTranslateDOMAIN",
  "CheckModuleTranslateDOMAINPARAM",
  "CheckModuleTranslateEQUATION",
  "CheckModuleTranslateGENERATOR",
  "CheckModuleTranslatelist",
  "CheckModuleTranslateMATRIX",
  "CheckModuleTranslateMATRIXNUM",
  "CheckModuleTranslatePOLYHEDRON",
  "CheckModuleTranslateRESTEXP",
  "CheckModuleTranslateSYSTEMDECLARATION",
  "CheckModuleTranslateUSESTATEMENT",
  "CheckModuleTranslateVAREXP",
  "semFuncCheckModule"
  }];

DeclarePackage["Alpha`CodeGen`Loops`",{
  "mkLoop",
  "mkUpperBound"
  }];

DeclarePackage["Alpha`CodeGen`Restrict`",{
  "mkRestrict",
  "mkRestrictExpr"
  }];

DeclarePackage["Alpha`CodeGen`Domains`",{
  "computeBounds",
  "domAllocDims",
  "findBound",
  "mkDomain",
  "mkType",
  "optNoSchedule",
  "polytopeBox"
  }];

DeclarePackage["Alpha`CodeGen`Output`",{
  "block",
  "deadCode",
  "hseq",
  "left",
  "list",
  "printC",
  "symbol",
  "vseq",
  "writeCcode"
  }];

DeclarePackage["Alpha`CodeGen`",{
  "alias",
  "cGen",
  "ddcGen",
  "dduserInterface",
  "infGen",
  "iNormCGen",
  "internalFormat",
  "mkAlias",
  "mkContext",
  "mkPType",
  "noSched",
  "pre",
  "userInterface",
  "userMatlab"
  }];

DeclarePackage["Alpha`Control`",{
  "Control",
  "controlVars",
  "isControlEquQ",
  "makeAllMuxControl",
  "makeBinaryCases",
  "makeMuxControl",
  "makeOneMuxControl",
  "makeSTCase",
  "needsMuxQ",
  "spaceTimeCase",
  "spaceTimeDecomposition",
  "spatialCaseQ",
  "temporalCaseQ"
  }];

DeclarePackage["Alpha`Domlib`",{
  "const2al",
  "const2mma",
  "dom2al",
  "dom2mma",
  "DomAddRays",
  "DomAddRaysC",
  "DomBasis",
  "domCompRays",
  "DomConstraints",
  "DomConstraintsOfDom",
  "DomConvex",
  "DomCost",
  "DomDifference",
  "DomDifferenceC",
  "DomEmpty",
  "DomEmptyQ",
  "DomEqualities",
  "DomEqualQ",
  "DomExtend",
  "domHalfSpaceQ",
  "DomImage",
  "DomImageC",
  "DomIntEmptyQ",
  "DomIntersection",
  "DomIntersectionC",
  "DomLeftHermite",
  "domlib",
  "Domlib",
  "DomLib",
  "DomLines",
  "DomLTQ",
  "DomMatrixSimplify",
  "DomMatrixSimplifyC",
  "DomPreimage",
  "DomPreimageC",
  "DomPrint",
  "DomProject",
  "DomPZDifferenceC",
  "DomPZIntersectionC",
  "DomPZUnionC",
  "DomRays",
  "DomRightHermite",
  "DomSimplify",
  "DomSimplifyC",
  "DomSort",
  "DomTrueRays",
  "DomUnion",
  "DomUnionC",
  "DomUniverse",
  "DomUniverseQ",
  "DomVertices",
  "DomVisual",
  "DomZEmptyQC",
  "DomZImage",
  "DomZImageC",
  "DomZPDifferenceC",
  "DomZPImageC",
  "DomZPIntersectionC",
  "DomZPPreimageC",
  "DomZPreimage",
  "DomZPreimageC",
  "DomZPUnionC",
  "DomZZDifferenceC",
  "DomZZIntersectionC",
  "DomZZUnionC",
  "hypercube",
  "LatticeDifference",
  "LatticeDifferenceC",
  "LatticeHermite",
  "LatticeHermiteC",
  "LatticeImage",
  "LatticeImageC",
  "LatticeIntersection",
  "LatticeIntersectionC",
  "LatticePreimage",
  "LatticePreimageC",
  "linearConstraintQ",
  "linearExpQ",
  "linHalfSpace",
  "mirrorDomain",
  "mirrorMatrix",
  "mirrorZDomain",
  "polToZpol",
  "rays",
  "rays$",
  "vertices",
  "vertices$",
  "zpolIsPolQ",
  "zpolToPol"
  }];

DeclarePackage["Alpha`INorm`",{
  "compact",
  "iNorm",
  "level",
  "norestrict",
  "rnf"
  }];

DeclarePackage["Alpha`UniformizationTools`",{
  "domainBasis",
  "getBasis",
  "getEqualities",
  "getLines",
  "getVertices",
  "intersectionBasis",
  "intersectionBasisQ",
  "properSubspaceQ",
  "vecInBasisQ"
  }];

DeclarePackage["Alpha`MakeDoc`",{
  "callFile",
  "doDoc",
  "fullLatex",
  "makeDoc",
  "MakeDoc",
  "sourceDir",
  "targetDir"
  }];

DeclarePackage["Alpha`Matrix`",{
  "addLinSpace",
  "alphaToMmaMatrix",
  "canonicalProjection",
  "composeAffines",
  "convexize",
  "convexizeAll",
  "convHull",
  "convHull$",
  "deleteColumn",
  "deleteRow",
  "determinant",
  "dropColumns",
  "dropParameters",
  "dropRows",
  "emptyLinearPartQ",
  "getLinearPart",
  "getTranslationVector",
  "hermite",
  "hermiteL",
  "hermiteR",
  "identityQ",
  "idLinearPartQ",
  "idMatrix",
  "inverseInContext",
  "inverseMatrix",
  "isIdLinearPart",
  "isNullLinearPart",
  "matrixSimplify",
  "mmaToAlphaMatrix",
  "nullLinearPartQ",
  "nullSpaceVectors",
  "simplifyAffines",
  "smithNormalForm",
  "solveDiophantine",
  "squareMatrixQ",
  "subMatrices",
  "suppressRowNum",
  "translationMatrix",
  "translationQ",
  "unimodCompl",
  "unimodularCompletion",
  "unimodularQ"
  }];

DeclarePackage["Alpha`Meta`",{
  "check",
  "directory",
  "meta"
  }];

DeclarePackage["Alpha`Normalization`",{
  "checkRestrictions",
  "correctAffineFunctions",
  "correctMat",
  "minRestrictInCtxt",
  "normalizationRules",
  "normalizationRules0",
  "normalize",
  "normalize0",
  "normalize0Q",
  "normalizeDef",
  "normalizeDef0",
  "normalizeInCtxt",
  "normalizeInCtxt0",
  "normalizeQ",
  "simplifyInContext",
  "simplifySystem"
  }];

DeclarePackage["Alpha`Options`",{
  "addConstraints",
  "affineByVar",
  "alignInp",
  "all",
  "allLibrary",
  "allVariablesAllowed",
  "Alpha0",
  "alphaFormat",
  "alreadySchedule",
  "bigParPos",
  "bitTrue",
  "boundedDelay",
  "busWidth",
  "cell",
  "cellType",
  "checkCase",
  "checkSched",
  "clockEnable",
  "compactCode",
  "compass",
  "contextDomain",
  "controler",
  "controler$",
  "current",
  "dataFlowConstantsNull",
  "dataFlowPeriod",
  "dataFlowVariables",
  "debug",
  "debugC",
  "delay",
  "durationByEq",
  "durations",
  "eliminatesDoubles",
  "equalitySimpl",
  "exceptions",
  "extDomUseCOB",
  "extraEdges",
  "farkas",
  "givenSchedVect",
  "include",
  "indexnorm",
  "initialize",
  "initZeroReg",
  "inputEquations",
  "inputOrOutput",
  "integerSolution",
  "interactive",
  "invert",
  "labelOffset",
  "labelSize",
  "lexicographic",
  "library",
  "lpSolve",
  "lyrtech",
  "matlab",
  "mergeDomains",
  "minimize",
  "mma",
  "module",
  "mono",
  "multi",
  "multiDimensional",
  "multiSchedDepth",
  "noOrder",
  "noPrint",
  "norm",
  "norm$",
  "objFunction",
  "occurence",
  "onlyDep",
  "onlyIdDep",
  "onlyLocalVars",
  "onlyModules",
  "onlyVar",
  "optimizationType",
  "outputForm",
  "parameterConstraints",
  "pip",
  "projMatrix",
  "projVector",
  "recurse",
  "remIdDeps",
  "remIdEqus",
  "rename",
  "renameCounter",
  "resolutionSoft",
  "rewrite",
  "routeOnce",
  "sameLinearPart",
  "sameLinearPartExceptParam",
  "scalarTypeCheck",
  "schedMethod",
  "scheduleDim",
  "scheduleType",
  "scheduleType$",
  "showNonSquareDeps",
  "showNonUniformDeps",
  "showNonUniformizableDeps",
  "showSquareDeps",
  "showUniformDeps",
  "showUniformizableDeps",
  "silent",
  "skipLines",
  "sortOrder",
  "startTime",
  "stdLogic",
  "stimuli",
  "structSchedType",
  "structured",
  "subSystems",
  "subSystemSchedule",
  "subSystems$",
  "systemCFiles",
  "tempFile",
  "tempFile$",
  "time",
  "tmpFile",
  "underscore",
  "verbose",
  "verifyCone",
  "vertex",
  "verticesPositives",
  "vhdlDir",
  "vhdlLibrary"
  }];

DeclarePackage["Alpha`Pipeline`",{
  "buildPipelineEquation",
  "pipeall",
  "pipeAll",
  "pipeIO",
  "pipeline",
  "Pipeline"
  }];

DeclarePackage["Alpha`PipeControl`",{
  "constantizeMatrix",
  "constantizeOccur",
  "delocalizeControl",
  "domExplode",
  "domExplode1",
  "eq2ge",
  "eq2le",
  "execute",
  "findPipeControl",
  "findSepHalfSpace",
  "isSpatialCaseEquQ",
  "isTemporalCaseEquQ",
  "iterations",
  "mkUniform",
  "oneStep",
  "pipeAllControl",
  "pipeConstants",
  "pipeControl",
  "PipeControl",
  "pipeInfo",
  "pipeVars",
  "position",
  "report",
  "reportDep",
  "route",
  "uniformizeMatrix",
  "uniformizeOccur"
  }];

DeclarePackage["Alpha`Properties`",{
  "allDomDisjointQ",
  "allDomEqualQ",
  "allDomUnion",
  "Properties",
  "uniformQ",
  "uniformQ$"
  }];

DeclarePackage["Alpha`Reduction`",{
  "isolateOneReduction",
  "isolateReductions",
  "Reduction",
  "serializeReduce",
  "splitReduction"
  }];

DeclarePackage["Alpha`Schedule`",{
  "benchSched",
  "checkOptions",
  "outputFile",
  "schedule",
  "Schedule",
  "structSched"
  }];

DeclarePackage["Alpha`ScheduleTools`",{
  "addBufferVars",
  "applyschedule",
  "applySchedule",
  "applyScheduleToVar",
  "appSched",
  "appSchedOptions",
  "appVarSched",
  "buildPseudoAlpha",
  "buildSchedConstraintForUse",
  "buildSchedConstraints",
  "convertSchedule",
  "equationOrderQ",
  "getSchedule",
  "getSystemSchedule",
  "identitySchedule",
  "isReducibleQ",
  "isScheduledQ",
  "makeNumInstr",
  "other",
  "renameIndices",
  "reorderEquations",
  "scheduleOnly",
  "showAffByVarSchedResult",
  "showAllAffByVarSchedResult",
  "showSchedResult",
  "stringForm",
  "testSched",
  "timeDimensions"
  }];

DeclarePackage["Alpha`FarkasSchedule`",{
  "addConstSchedType",
  "buildDuration",
  "checkLine",
  "convexiseDom",
  "convexiseSplittedDep",
  "farkasSchedule",
  "FarkasSchedule",
  "fichierPip",
  "getFinalForm",
  "getNewListDep",
  "getNumberFarkasCoef",
  "getOneVarFinalSched",
  "getRelativeNum",
  "in",
  "makeDepConstraint",
  "makeNumDepSplitted",
  "makeObjFunctionConstraint",
  "makePositivityConstraint",
  "makeRefline",
  "makeTableEq",
  "matPipOneEq",
  "modifyLine",
  "multiSched",
  "parameter",
  "printAllConstraint",
  "printAllTau",
  "printOneConstraint",
  "printOneDepListe",
  "printOneTau",
  "printSplittedDepList",
  "readOneConstr",
  "readPipResult",
  "reorderSchedResult",
  "splitListDep",
  "testeqIneq",
  "writeFile",
  "writemat",
  "writematOneLine",
  "Wrong"
  }];

DeclarePackage["Alpha`VertexSchedule`",{
  "adaptUses",
  "additionalObjectiveFunction",
  "addSchedule",
  "affineDepConsts",
  "checkSchedOptions",
  "const2ineq",
  "const2vect",
  "constOf",
  "dataFlow",
  "dataFlowObjective",
  "depComponents",
  "depComputed",
  "depCycles",
  "dependenciesOnly",
  "depGraph",
  "depGraphViz",
  "displaySchedule",
  "DomDimension",
  "DomSingletonQ",
  "DomTrueDimension",
  "durationsNonZero",
  "eliminateVar",
  "encodeSchedule",
  "eqsDomain",
  "equations",
  "extraConstraints",
  "factor",
  "getLinPart",
  "getUseSchedule",
  "ishow",
  "isIdentityOnDim",
  "labelFactor",
  "listOfAdaptedSignals",
  "loadScheduleLibrary",
  "locateEliminations",
  "lpResolution",
  "matrix2mma",
  "matrixTransPart",
  "MMA",
  "multidimensional",
  "normalizeSystem",
  "obj2vect",
  "onlyEquations",
  "onlyMainSystem",
  "onlyUseDep",
  "onlyVars",
  "pal",
  "parameterRules",
  "periodicFactor",
  "periods",
  "periods$",
  "reuseSchedule",
  "saveSchedule",
  "saveScheduleLibrary",
  "scd",
  "scdConsToDomain",
  "scheduleConstraints",
  "selfDep",
  "showViz",
  "simplex",
  "slackOf",
  "slg",
  "sortEquations",
  "statScheduleConstraints",
  "subSystemSched",
  "summaryScheduleConstraints",
  "timeMinSchedConstraints",
  "variables",
  "variablesOf",
  "VertexSchedule",
  "verticesPositive",
  "zpolDomainQ",
  "$dependencyConstraints",
  "$optimalityConstraints",
  "$scheduleDepTable",
  "$scheduleMDSol"
  }];

DeclarePackage["Alpha`Semantics`",{
  "changeType",
  "expDimension",
  "expDomain",
  "expType",
  "getContextDomain",
  "matchTypes",
  "replaceByEquivExpr",
  "Semantics",
  "setBitWidth"
  }];

DeclarePackage["Alpha`Schematics`",{
  "columns",
  "findAliases",
  "flattenEquation",
  "flattenSkeleton",
  "fSize",
  "newName",
  "offsetX",
  "offsetY",
  "partShown",
  "schematics",
  "Schematics",
  "skeleton",
  "sPositions",
  "square",
  "yFactor"
  }];

DeclarePackage["Alpha`Static`",{
  "analyze",
  "buildLHSIdList",
  "buildRHSIdList",
  "checkDeclarations",
  "checkUseful",
  "dep",
  "dep1",
  "dep1$",
  "Static"
  }];

DeclarePackage["Alpha`Substitution`",{
  "addlocal",
  "addLocal",
  "addLocalLHS",
  "addLocalRHS",
  "areAllOutputsRegular",
  "getNewName",
  "getOccurs",
  "getOccursInDef",
  "isOutputRegular",
  "mkAllOutputsRegular",
  "mkOutputRegular",
  "occursInDefQ",
  "removeAllUnusedVars",
  "removeUnusedVar",
  "replaceDefinition",
  "replaceInDef",
  "replaceInput",
  "substituteInDef",
  "Substitution",
  "unusedVarQ"
  }];

DeclarePackage["Alpha`Schematics`",{
  "columns",
  "findAliases",
  "flattenEquation",
  "flattenSkeleton",
  "fSize",
  "newName",
  "offsetX",
  "offsetY",
  "partShown",
  "schematics",
  "Schematics",
  "skeleton",
  "sPositions",
  "square",
  "yFactor"
  }];

DeclarePackage["Alpha`SubSystems`",{
  "addParameterId",
  "affExtHom",
  "assignParameterValue",
  "assignParameterValueLib",
  "fixParameter",
  "inlineAll",
  "inlineSubsystem",
  "inliningRenameCounter",
  "removeIdEqus",
  "simplifyUseInputs",
  "spread",
  "substDom",
  "SubSystems",
  "subSystemUsedBy",
  "topoSort"
  }];

DeclarePackage["Alpha`SystemProgramming`",{
  "compareDirs",
  "DangerousSymbols",
  "GlobalSymbols",
  "HasAttribute",
  "HasOption",
  "HasOptions",
  "HoldList",
  "onlyMFiles",
  "SetAllOptions",
  "statusFile",
  "SymbolsInContext",
  "SystemSymbols",
  "UndocumentedQ",
  "UnprotectedQ"
  }];

DeclarePackage["Alpha`Synthesis`",{
  "addDeclaration",
  "addRegisters",
  "findPeriods",
  "optionsOfAppSched",
  "optionsOfScheduler",
  "parameterRuleOfUse",
  "pipe",
  "placementSteps",
  "romData",
  "syn",
  "synPeriodic",
  "Synthesis"
  }];

DeclarePackage["Alpha`Tables`",{
  "accessByPath",
  "addAllParameterDomain",
  "addParameterDomain",
  "getDeclaration",
  "getDeclarationDomain",
  "getDefinition",
  "getDimension",
  "getEquation",
  "getIndexNames",
  "getInputVars",
  "getLocalVars",
  "getOutputVars",
  "getSystemName",
  "getSystemParameterDomain",
  "getSystemParameters",
  "getUseCalls",
  "getVariables",
  "lookUpFor",
  "lookUpForPos",
  "Matrix",
  "symToString",
  "Tables",
  "undoModif"
  }];

DeclarePackage["Alpha`ToAlpha0v2`",{
  "booleanToIntegerSyst",
  "convexQ",
  "correctIdEqs",
  "decomposeSTdeps",
  "integerToBooleanSyst",
  "makeInputMirrorEqus",
  "makeSimpleExpr",
  "needSeparation",
  "reuseCommonExpr",
  "shiftProcessorSpace",
  "splitMax",
  "steps",
  "toAlpha0v2",
  "ToAlpha0v2"
  }];

DeclarePackage["Alpha`Uniformization`",{
  "alignInput",
  "callUniformize",
  "depCone",
  "getDependences",
  "getPipeVecs",
  "getRouteVecs",
  "initUniformization",
  "pipeDep",
  "routeDep",
  "Uniformization",
  "uniformize",
  "uniformizeLocal",
  "verifyPipe",
  "verifyRoute",
  "whichRule"
  }];

DeclarePackage["Alpha`vhdlCell`",{
  "semFuncCell",
  "vhdlCell",
  "VhdlCell",
  "vhdlCellDebug",
  "vhdlCellTranslateAFFEXP",
  "vhdlCellTranslateAFFEXPE",
  "vhdlCellTranslateASSIGNMENT",
  "vhdlCellTranslateBINEXP",
  "vhdlCellTranslateBINEXPE",
  "vhdlCellTranslateCALLEXP",
  "vhdlCellTranslateCALLSTATEMENT",
  "vhdlCellTranslateCASEMUX",
  "vhdlCellTranslateCASEXP",
  "vhdlCellTranslateCONSTEXP",
  "vhdlCellTranslateCONSTEXPE",
  "vhdlCellTranslateCONSTRAINT",
  "vhdlCellTranslateCONTROLEXPRESSION",
  "vhdlCellTranslateDECLARATION",
  "vhdlCellTranslateDOMAIN",
  "vhdlCellTranslateDOMAINPARAM",
  "vhdlCellTranslateELEMENTS",
  "vhdlCellTranslateEQUATION",
  "vhdlCellTranslateGENERATOR",
  "vhdlCellTranslateIFEXP",
  "vhdlCellTranslateIFMUX",
  "vhdlCellTranslatelist",
  "vhdlCellTranslateMATRIX",
  "vhdlCellTranslateMATRIXNUM",
  "vhdlCellTranslatePOLYHEDRON",
  "vhdlCellTranslateRESTEXP",
  "vhdlCellTranslateRESTEXPMUX2",
  "vhdlCellTranslateSUBEXPRESSION",
  "vhdlCellTranslateSUBMUX2",
  "vhdlCellTranslateSYSTEMDECLARATION",
  "vhdlCellTranslateUNEXP",
  "vhdlCellTranslateUNEXPE",
  "vhdlCellTranslateUSESTATEMENT",
  "vhdlCellTranslateVAREXP",
  "vhdlCellTranslateVAREXPE",
  "vhdlCellTranslateVAREXPORCONST",
  "vhdlCellTranslateVAREXPORCONSTE"
  }];

DeclarePackage["Alpha`vhdlCont`",{
  "semFuncCont",
  "vhdlCont",
  "vhdlContDebug",
  "vhdlContTranslateAFFEXP",
  "vhdlContTranslateASSIGNMENT",
  "vhdlContTranslateCASEXP",
  "vhdlContTranslateCONSTEXP",
  "vhdlContTranslateCONSTRAINT",
  "vhdlContTranslateDECLARATION",
  "vhdlContTranslateDOMAIN",
  "vhdlContTranslateEQUATION",
  "vhdlContTranslateGENERATOR",
  "vhdlContTranslatelist",
  "vhdlContTranslateMATRIX",
  "vhdlContTranslateMATRIXNUM",
  "vhdlContTranslatePOLYHEDRON",
  "vhdlContTranslateRESTEXP",
  "vhdlContTranslateSYSTEMDECLARATION"
  }];

DeclarePackage["Alpha`vhdlModule`",{
  "buildType",
  "semFuncModule",
  "vhdlModule",
  "VhdlModule",
  "vhdlModuleDebug",
  "vhdlModuleTranslateAFFEXP",
  "vhdlModuleTranslateASSIGNMENT",
  "vhdlModuleTranslateCASEXP",
  "vhdlModuleTranslateCONNECTION",
  "vhdlModuleTranslateCONST",
  "vhdlModuleTranslateCONSTRAINT",
  "vhdlModuleTranslateDECLARATION",
  "vhdlModuleTranslateDOMAIN",
  "vhdlModuleTranslateDOMAINPARAM",
  "vhdlModuleTranslateEQUATION",
  "vhdlModuleTranslateGENERATOR",
  "vhdlModuleTranslatelist",
  "vhdlModuleTranslateMATRIX",
  "vhdlModuleTranslateMATRIXNUM",
  "vhdlModuleTranslatePOLYHEDRON",
  "vhdlModuleTranslateRESTEXP",
  "vhdlModuleTranslateSYSTEMDECLARATION",
  "vhdlModuleTranslateUSESTATEMENT",
  "vhdlModuleTranslateVAREXP",
  "vhdlModuleTranslateVAREXPORCONSTE"
  }];

DeclarePackage["Alpha`VhdlLibGen`",{
  "ToVhdlPackage"
  }];

DeclarePackage["Alpha`vhdlTestBench`",{
  "mkVhdlLoop",
  "mkVhdlLowerBound",
  "mkVhdlUpperBound",
  "VhdlTestBanch",
  "vhdlTestBenchGen"
  }];

DeclarePackage["Alpha`Vhdl2`",{
  "a2v",
  "bitWidth",
  "bitWidthOfExpr",
  "findVarType",
  "genLibrary",
  "genVhdl",
  "getVhdlType",
  "noVhdlFile",
  "showVhdl",
  "stim",
  "Vhdl2",
  "vhdlDeclArc",
  "vhdlDeclEnt",
  "vhdlIDType",
  "vhdlPatterns",
  "vhdlPeriodicEnable",
  "vhdlROM",
  "vhdlType",
  "$vhdlCurrent",
  "$vhdlOutputFile",
  "$vhdlTypes"
  }];

DeclarePackage["Alpha`Visual`",{
  "bbDomain",
  "getBoundingBox",
  "showDomain",
  "Visual"
  }];

DeclarePackage["Alpha`Visual3D`",{
  "facets",
  "listPlanes",
  "maxR",
  "minR",
  "orderPolygon",
  "stepR",
  "threeDDomainQ",
  "twoDDomainQ",
  "units",
  "Visual3D",
  "vp1",
  "vp3",
  "vshow"
  }];

