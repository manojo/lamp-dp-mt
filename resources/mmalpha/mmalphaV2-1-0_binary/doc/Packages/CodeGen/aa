/* Generated: 7/9/2002 at 18:18:18 */
/* Code generated by MMAlpha code generator version 0.2.6 (02/02/2001 11:35) FQ */

#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <assert.h>
 
 

#define min(a,b) ((a) > (b) ? (b) : (a))
#define max(a,b) ((a) > (b) ? (a) : (b))
#define power(a, i) ((a)^(i))
static int rfloor (int a, int b) {
  assert (b>0);
  return ((a<0) ? ((a+1)/b)-1 : a/b);
}
static int rceil (int a, int b) {
  assert (b>0);
  return ((a>0) ?  ((a-1)/b)+1 : a/b);
}

void prodVect(int* _a, int* _b, int* _c) {
  /* aliases for all variables */
#define a(i, j) _a[(2*(j) + -3 + (i))]
#define b(i) _b[(-1 + (i))]
#define c(i) _c[(-1 + (i))]
#define C(i, j) _C[(-1 + 2*(j) + (i))]
   
  /* allocate memory for local variables */
  int * _C = (int *) malloc(sizeof(int)*(6));
   
  /* loops variables */
  int i;
  int j;
   
  /* a few loops */
  0
   
  /* clean up local variables' memory */
  /* commented out because it was crashing at run time*/
  /*
  free(_C);
  */
  /* and finally undef aliases */
#undef a
#undef b
#undef c
#undef C
}
 
int main (void) {
#define a(i, j) _a[(2*(j) + -3 + (i))]
#define b(i) _b[(-1 + (i))]
#define c(i) _c[(-1 + (i))]
  int * _a = (int *) malloc(sizeof(int)*(4));
  int * _b = (int *) malloc(sizeof(int)*(2));
  int * _c = (int *) malloc(sizeof(int)*(2));
  int i;
  int j;
   
  for (i = 1; i <= 2; ++i) {
    for (j = 1; j <= 2; ++j) {
      fprintf(stdout, "a[%i, %i]?", i, j);
      fscanf(stdin, "%i", &(a(i, j)));
       
    }
  }
  for (i = 1; i <= 2; ++i) {
    fprintf(stdout, "b[%i]?", i);
    fscanf(stdin, "%i", &(b(i)));
     
  }
  prodVect(_a, _b, _c);
  for (i = 1; i <= 2; ++i) {
    fprintf(stdout, "c[%i]=%i\n", i, c(i));
     
  }
   
  free(_a);
  free(_b);
  free(_c);
#undef a
#undef b
#undef c
   exit(0);
}
