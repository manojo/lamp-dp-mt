error: illegal sharing of mutable objects Sym(7)
at Sym(8)=Reflect(ArrayUpdate(Sym(3),Const(0),Sym(7)),Summary(false,false,false,false,false,List(Sym(3), Sym(7)),List(Sym(3), Sym(7)),List(Sym(3)),List(Sym(3))),List(Sym(7)))
error: write to non-mutable Sym(11) -> Some(TP(Sym(11),Reflect(ArrayApply(Sym(3),Const(0)),Summary(false,false,false,false,false,List(Sym(3)),List(Sym(3)),List(),List()),List(Sym(3), Sym(10)))))
at Sym(52)=Reflect(ArrayUpdate(Sym(11),Sym(1),Sym(51)),Summary(false,false,false,false,false,List(Sym(3)),List(Sym(3)),List(Sym(11)),List(Sym(11))),List(Sym(3), Sym(10), Sym(11)))
error: illegal sharing of mutable objects Sym(3)
at Sym(52)=Reflect(ArrayUpdate(Sym(11),Sym(1),Sym(51)),Summary(false,false,false,false,false,List(Sym(3)),List(Sym(3)),List(Sym(11)),List(Sym(11))),List(Sym(3), Sym(10), Sym(11)))
/*****************************************
  Emitting Generated Code                  
*******************************************/
class test-recursion extends ((Array[Char])=>(scala.collection.immutable.List[Char])) {
def apply(x0:Array[Char]): scala.collection.immutable.List[Char] = {
val x1 = x0.length
val x2 = x1 + 1
val x3 = new Array[Array[scala.collection.immutable.List[Char]]](x2)
val x4 = x1 + 2
var x6 : Int = 0
val x10 = while (x6 < x4) {
val x7 = new Array[scala.collection.immutable.List[Char]](x2)
val x8 = x3(0) = x7
x8
x6 = x6 + 1
}
val x11 = x3(0)
val x12 = 0 < x1
val x45 = if (x12) {
val x13 = 0 == 0
val x14 = 0 + 1
val x17 = if (x13) {
x14
} else {
val x15 = x1 - 0
val x16 = java.lang.Math.max(x14, x15)
x16
}
val x18 = 1 == 0
val x20 = if (x18) {
val x15 = x1 - 0
x15
} else {
val x15 = x1 - 0
val x19 = java.lang.Math.min(x15, x14)
x19
}
val x21 = x20 + 1
val x22 = x17 until x21
val x23 = x22.toList
val x26 = x0(0)
val x27 = x26 == 'm'
val x30 = List()
val x29 = List(x26)
val x43 = x23.flatMap { x24 => 
val x25 = x14 == x24
val x28 = x25 && x27
val x32 = if (x28) {
val x31 = if (x25) {
x29
} else {
x30
}
x31
} else {
x30
}
val x41 = x32.flatMap { x33 => 
val x34 = x3(x24)
val x35 = x34(x1)
val x36 = List(x35)
val x39 = x36.map{
x37 => 
val x38 = (x33,x37)
x38
}
x39
}
x41
}
x43
} else {
val x30 = List()
x30
}
val x50 = x45.map{
x46 => 
val x47 = x46._1
val x48 = x46._2
val x49 = x47 :: x48
x49
}
val x51 = x50.head
val x52 = x11(x1) = x51
val x53 = x11(x1)
val x54 = List(x53)
val x55 = x54.head
x55
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
