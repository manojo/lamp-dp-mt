/*****************************************
  Emitting Generated Code                  
*******************************************/
class test1 extends ((Array[Char])=>(scala.Tuple2[java.lang.String, Int])) {
def apply(x0:Array[Char]): scala.Tuple2[java.lang.String, Int] = {
val x1 = ("",-1)
var x2: scala.Tuple2[java.lang.String, Int] = x1
val x3 = x0.length
val x4 = 0 >= x3
val x58 = if (x4) {
()
} else {
val x5 = x0(0)
val x6 = x5 >= 'a'
val x7 = x5 <= 'z'
val x8 = x6 && x7
val x56 = if (x8) {
val x11 = List()
var x12: scala.collection.immutable.List[Char] = x11
var x13: Int = -1
val x9 = 0 + 1
var x14: Int = x9
val x38 = while ({val x15 = x13
val x16 = x14
val x17 = x15 != x16
x17}) {
val x19 = x14
x13 = x19
val x21 = x19 >= x3
val x36 = if (x21) {
()
} else {
val x22 = x0(x19)
val x23 = x22 >= 'a'
val x24 = x22 <= 'z'
val x25 = x23 && x24
val x34 = if (x25) {
val x28 = x12
val x29 = List(x22)
val x30 = x28 ::: x29
x12 = x30
val x26 = x19 + 1
x14 = x26
()
} else {
()
}
x34
}
x36
}
val x39 = x12
val x40 = x14
val x44 = x5 :: x39
val x45 = x44.mkString
val x46 = x45 == "true"
val x47 = x45 == "null"
val x48 = x46 || x47
val x49 = x45 == "false"
val x50 = x48 || x49
val x52 = if (x50) {
val x51 = "Keyword"+x45
x51
} else {
"NoToken"
}
val x53 = (x52,x40)
x2 = x53
()
} else {
()
}
x56
}
val x59 = x2
x59
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
(Keywordtrue,4)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class test2 extends ((Array[Char])=>(scala.Tuple2[scala.Tuple2[java.lang.String, java.lang.String], Int])) {
def apply(x119:Array[Char]): scala.Tuple2[scala.Tuple2[java.lang.String, java.lang.String], Int] = {
val x120 = ("","")
val x121 = (x120,-1)
var x122: scala.Tuple2[scala.Tuple2[java.lang.String, java.lang.String], Int] = x121
val x123 = x119.length
val x124 = 0 >= x123
val x266 = if (x124) {
()
} else {
val x125 = x119(0)
val x126 = x125 == '"'
val x264 = if (x126) {
val x11 = List()
var x128: scala.collection.immutable.List[Char] = x11
var x129: Int = -1
val x9 = 0 + 1
var x130: Int = x9
val x152 = while ({val x131 = x129
val x132 = x130
val x133 = x131 != x132
x133}) {
val x135 = x130
x129 = x135
val x137 = x135 >= x123
val x150 = if (x137) {
()
} else {
val x138 = x119(x135)
val x139 = x138 != '"'
val x148 = if (x139) {
val x142 = x128
val x143 = List(x138)
val x144 = x142 ::: x143
x128 = x144
val x140 = x135 + 1
x130 = x140
()
} else {
()
}
x148
}
x150
}
val x153 = x128
val x154 = x130
val x156 = x154 >= x123
val x262 = if (x156) {
()
} else {
val x157 = x119(x154)
val x158 = x157 == '"'
val x260 = if (x158) {
var x166: scala.collection.immutable.List[Char] = x11
var x167: Int = -1
val x159 = x154 + 1
var x168: Int = x159
val x199 = while ({val x169 = x167
val x170 = x168
val x171 = x169 != x170
x171}) {
val x173 = x168
x167 = x173
val x175 = x173 >= x123
val x189 = if (x175) {
()
} else {
val x176 = x119(x173)
val x177 = x176 == ' '
val x187 = if (x177) {
val x181 = x166
val x182 = List(x176)
val x183 = x181 ::: x182
x166 = x183
val x178 = x173 + 1
x168 = x178
()
} else {
()
}
x187
}
val x197 = if (x175) {
()
} else {
val x176 = x119(x173)
val x180 = x176 == '
'
val x195 = if (x180) {
val x190 = x166
val x182 = List(x176)
val x191 = x190 ::: x182
x166 = x191
val x178 = x173 + 1
x168 = x178
()
} else {
()
}
x195
}
x197
}
val x200 = x166
val x201 = x168
val x205 = x201 >= x123
val x258 = if (x205) {
()
} else {
val x206 = x119(x201)
val x207 = x206 == '"'
val x256 = if (x207) {
var x210: scala.collection.immutable.List[Char] = x11
var x211: Int = -1
val x208 = x201 + 1
var x212: Int = x208
val x234 = while ({val x213 = x211
val x214 = x212
val x215 = x213 != x214
x215}) {
val x217 = x212
x211 = x217
val x219 = x217 >= x123
val x232 = if (x219) {
()
} else {
val x220 = x119(x217)
val x221 = x220 != '"'
val x230 = if (x221) {
val x224 = x210
val x225 = List(x220)
val x226 = x224 ::: x225
x210 = x226
val x222 = x217 + 1
x212 = x222
()
} else {
()
}
x230
}
x232
}
val x235 = x210
val x236 = x212
val x238 = x236 >= x123
val x254 = if (x238) {
()
} else {
val x239 = x119(x236)
val x240 = x239 == '"'
val x252 = if (x240) {
val x241 = x236 + 1
val x162 = x153.mkString
val x163 = "StringLit("+x162
val x164 = x163+")"
val x244 = x235.mkString
val x245 = "StringLit("+x244
val x246 = x245+")"
val x248 = (x164,x246)
val x249 = (x248,x241)
x122 = x249
()
} else {
()
}
x252
}
x254
} else {
()
}
x256
}
x258
} else {
()
}
x260
}
x262
} else {
()
}
x264
}
val x267 = x122
x267
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
((StringLit(hello),StringLit(carol)),15)
