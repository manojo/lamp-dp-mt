error: illegal sharing of mutable objects Sym(6)
at Sym(7)=Reflect(ArrayUpdate(Sym(3),Sym(5),Sym(6)),Summary(false,false,false,false,false,List(Sym(3), Sym(6)),List(Sym(3), Sym(6)),List(Sym(3)),List(Sym(3))),List(Sym(6)))
error: write to non-mutable Sym(17) -> Some(TP(Sym(17),Reflect(ArrayApply(Sym(3),Sym(15)),Summary(false,false,false,false,false,List(Sym(3)),List(Sym(3)),List(),List()),List())))
at Sym(95)=Reflect(ArrayUpdate(Sym(17),Sym(16),Sym(94)),Summary(false,false,false,false,false,List(Sym(3)),List(Sym(3)),List(Sym(17)),List(Sym(17))),List(Sym(17)))
error: illegal sharing of mutable objects Sym(3)
at Sym(95)=Reflect(ArrayUpdate(Sym(17),Sym(16),Sym(94)),Summary(false,false,false,false,false,List(Sym(3)),List(Sym(3)),List(Sym(17)),List(Sym(17))),List(Sym(17)))
error: write to non-mutable Sym(17) -> Some(TP(Sym(17),Reflect(ArrayApply(Sym(3),Sym(15)),Summary(false,false,false,false,false,List(Sym(3)),List(Sym(3)),List(),List()),List())))
at Sym(99)=Reflect(ArrayUpdate(Sym(17),Sym(16),Sym(98)),Summary(false,false,false,false,false,List(Sym(3)),List(Sym(3)),List(Sym(17)),List(Sym(17))),List(Sym(17), Sym(95)))
error: illegal sharing of mutable objects Sym(3)
at Sym(99)=Reflect(ArrayUpdate(Sym(17),Sym(16),Sym(98)),Summary(false,false,false,false,false,List(Sym(3)),List(Sym(3)),List(Sym(17)),List(Sym(17))),List(Sym(17), Sym(95)))
error: write to non-mutable Sym(17) -> Some(TP(Sym(17),Reflect(ArrayApply(Sym(3),Sym(15)),Summary(false,false,false,false,false,List(Sym(3)),List(Sym(3)),List(),List()),List())))
at Sym(101)=Reflect(RangeForeach(Const(0),Sym(13),Sym(15),Block(Sym(100))),Summary(false,false,false,false,false,List(Sym(3)),List(),List(Sym(17)),List()),List())
error: write to non-mutable Sym(17) -> Some(TP(Sym(17),Reflect(ArrayApply(Sym(3),Sym(15)),Summary(false,false,false,false,false,List(Sym(3)),List(Sym(3)),List(),List()),List())))
at Sym(103)=Reflect(RangeForeach(Const(1),Sym(2),Sym(12),Block(Sym(102))),Summary(false,false,false,false,false,List(Sym(3)),List(),List(Sym(17)),List()),List(Sym(3), Sym(9)))
/*****************************************
  Emitting Generated Code                  
*******************************************/
class test-bottomup1 extends ((Array[scala.Tuple2[Int, Int]])=>(scala.Tuple3[Int, Int, Int])) {
def apply(x0:Array[scala.Tuple2[Int, Int]]): scala.Tuple3[Int, Int, Int] = {
val x1 = x0.length
val x2 = x1 + 1
val x3 = new Array[Array[scala.Tuple3[Int, Int, Int]]](x2)
var x5 : Int = 0
val x9 = while (x5 < x2) {
val x6 = new Array[scala.Tuple3[Int, Int, Int]](x2)
val x7 = x3(x5) = x6
x7
x5 = x5 + 1
}
val x22 = List()
val x30 = 0 == 0
val x10 = (0,100000,0)
var x12 : Int = 1
val x103 = while (x12 < x2) {
val x13 = x2 - x12
var x15 : Int = 0
val x101 = while (x15 < x13) {
val x17 = x3(x15)
val x16 = x15 + x12
val x29 = x15 < x16
val x18 = x15 + 1
val x33 = if (x30) {
x18
} else {
val x31 = x16 - 0
val x32 = java.lang.Math.max(x18, x31)
x32
}
val x37 = if (x30) {
val x34 = x16 - 1
x34
} else {
val x34 = x16 - 1
val x35 = x15 + 0
val x36 = java.lang.Math.min(x34, x35)
x36
}
val x38 = x37 + 1
val x39 = x33 until x38
val x40 = x39.toList
val x57 = if (x29) {
val x55 = x40.flatMap { x41 => 
val x42 = x3(x15)
val x43 = x42(x41)
val x44 = List(x43)
val x53 = x44.flatMap { x45 => 
val x46 = x3(x41)
val x47 = x46(x16)
val x48 = List(x47)
val x51 = x48.map{
x49 => 
val x50 = (x45,x49)
x50
}
x51
}
x53
}
x55
} else {
x22
}
var x74: scala.Tuple3[Int, Int, Int] = x10
val x19 = x18 == x16
val x23 = if (x19) {
val x20 = x0(x15)
val x21 = List(x20)
x21
} else {
x22
}
val x28 = x23.map{
x24 => 
val x25 = x24._1
val x26 = x24._2
val x27 = (x25,0,x26)
x27
}
val x72 = x57.map{
x58 => 
val x59 = x58._1
val x61 = x59._1
val x60 = x58._2
val x66 = x60._3
val x62 = x59._2
val x65 = x60._2
val x67 = x62 + x65
val x63 = x59._3
val x68 = x61 * x63
val x69 = x68 * x66
val x70 = x67 + x69
val x71 = (x61,x70,x66)
x71
}
val x73 = x28 ::: x72
val x75 = x73.toSeq
val x76 = x75.length
var x78 : Int = 0
val x91 = while (x78 < x76) {
val x79 = x74
val x80 = x73(x78)
val x82 = x79._2
val x85 = x80._2
val x87 = x82 < x85
val x88 = if (x87) {
x79
} else {
x80
}
x74 = x88
()
x78 = x78 + 1
}
val x92 = x74
val x93 = List(x92)
val x94 = x93.head
val x95 = x17(x16) = x94
val x96 = x17(x16)
val x97 = List(x96)
val x98 = x97.head
val x99 = x17(x16) = x98
x99
x15 = x15 + 1
}
x101
x12 = x12 + 1
}
val x104 = x3(0)
val x105 = x104(x1)
x105
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
error: illegal sharing of mutable objects Sym(113)
at Sym(114)=Reflect(ArrayUpdate(Sym(110),Sym(112),Sym(113)),Summary(false,false,false,false,false,List(Sym(110), Sym(113)),List(Sym(110), Sym(113)),List(Sym(110)),List(Sym(110))),List(Sym(113)))
error: write to non-mutable Sym(123) -> Some(TP(Sym(123),Reflect(ArrayApply(Sym(110),Sym(121)),Summary(false,false,false,false,false,List(Sym(110)),List(Sym(110)),List(),List()),List())))
at Sym(199)=Reflect(ArrayUpdate(Sym(123),Sym(122),Sym(198)),Summary(false,false,false,false,false,List(Sym(110)),List(Sym(110)),List(Sym(123)),List(Sym(123))),List(Sym(123)))
error: illegal sharing of mutable objects Sym(110)
at Sym(199)=Reflect(ArrayUpdate(Sym(123),Sym(122),Sym(198)),Summary(false,false,false,false,false,List(Sym(110)),List(Sym(110)),List(Sym(123)),List(Sym(123))),List(Sym(123)))
error: write to non-mutable Sym(123) -> Some(TP(Sym(123),Reflect(ArrayApply(Sym(110),Sym(121)),Summary(false,false,false,false,false,List(Sym(110)),List(Sym(110)),List(),List()),List())))
at Sym(203)=Reflect(ArrayUpdate(Sym(123),Sym(122),Sym(202)),Summary(false,false,false,false,false,List(Sym(110)),List(Sym(110)),List(Sym(123)),List(Sym(123))),List(Sym(123), Sym(199)))
error: illegal sharing of mutable objects Sym(110)
at Sym(203)=Reflect(ArrayUpdate(Sym(123),Sym(122),Sym(202)),Summary(false,false,false,false,false,List(Sym(110)),List(Sym(110)),List(Sym(123)),List(Sym(123))),List(Sym(123), Sym(199)))
error: write to non-mutable Sym(123) -> Some(TP(Sym(123),Reflect(ArrayApply(Sym(110),Sym(121)),Summary(false,false,false,false,false,List(Sym(110)),List(Sym(110)),List(),List()),List())))
at Sym(205)=Reflect(RangeForeach(Const(0),Sym(119),Sym(121),Block(Sym(204))),Summary(false,false,false,false,false,List(Sym(110)),List(),List(Sym(123)),List()),List())
error: write to non-mutable Sym(123) -> Some(TP(Sym(123),Reflect(ArrayApply(Sym(110),Sym(121)),Summary(false,false,false,false,false,List(Sym(110)),List(Sym(110)),List(),List()),List())))
at Sym(207)=Reflect(RangeForeach(Const(1),Sym(109),Sym(118),Block(Sym(206))),Summary(false,false,false,false,false,List(Sym(110)),List(),List(Sym(123)),List()),List(Sym(110), Sym(116)))
compilation: ok
(10,7500,50)
