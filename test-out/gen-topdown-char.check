/*****************************************
  Emitting Generated Code                  
*******************************************/
class test1 extends ((Array[Char])=>(scala.Tuple2[Char, Int])) {
def apply(x0:Array[Char]): scala.Tuple2[Char, Int] = {
val x1 = ('a',-1)
var x2: scala.Tuple2[Char, Int] = x1
val x3 = x0.length
val x4 = 0 >= x3
val x13 = if (x4) {
()
} else {
val x5 = x0(0)
val x6 = x5 == 'h'
val x11 = if (x6) {
val x7 = 0 + 1
val x8 = (x5,x7)
x2 = x8
()
} else {
()
}
x11
}
val x14 = x2
x14
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
(h,1)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class test2 extends ((Array[Char])=>(scala.Tuple2[Char, Int])) {
def apply(x30:Array[Char]): scala.Tuple2[Char, Int] = {
val x1 = ('a',-1)
var x31: scala.Tuple2[Char, Int] = x1
val x32 = x30.length
val x33 = 0 >= x32
val x41 = if (x33) {
()
} else {
val x34 = x30(0)
val x35 = x34 == 'h'
val x39 = if (x35) {
val x7 = 0 + 1
val x36 = (x34,x7)
x31 = x36
()
} else {
()
}
x39
}
val x42 = x31
x42
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
(h,1)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class test3 extends ((Array[Char])=>(scala.Tuple2[Char, Int])) {
def apply(x58:Array[Char]): scala.Tuple2[Char, Int] = {
val x1 = ('a',-1)
var x59: scala.Tuple2[Char, Int] = x1
val x60 = x58.length
val x61 = 0 >= x60
val x71 = if (x61) {
()
} else {
val x62 = x58(0)
val x63 = x62 >= 'a'
val x64 = x62 <= 'z'
val x65 = x63 && x64
val x69 = if (x65) {
val x7 = 0 + 1
val x66 = (x62,x7)
x59 = x66
()
} else {
()
}
x69
}
val x72 = x59
x72
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
(h,1)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class test4 extends ((Array[Char])=>(scala.Tuple2[Char, Int])) {
def apply(x90:Array[Char]): scala.Tuple2[Char, Int] = {
val x1 = ('a',-1)
var x91: scala.Tuple2[Char, Int] = x1
val x92 = x90.length
val x93 = 0 >= x92
val x103 = if (x93) {
()
} else {
val x94 = x90(0)
val x95 = x94 >= '0'
val x96 = x94 <= '9'
val x97 = x95 && x96
val x101 = if (x97) {
val x7 = 0 + 1
val x98 = (x94,x7)
x91 = x98
()
} else {
()
}
x101
}
val x104 = x91
x104
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
(a,-1)
(1,1)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class test5 extends ((Array[Char])=>(scala.Tuple2[scala.Tuple2[Char, Char], Int])) {
def apply(x122:Array[Char]): scala.Tuple2[scala.Tuple2[Char, Char], Int] = {
val x123 = ('a','a')
val x124 = (x123,-1)
var x125: scala.Tuple2[scala.Tuple2[Char, Char], Int] = x124
val x126 = x122.length
val x127 = 0 >= x126
val x150 = if (x127) {
()
} else {
val x128 = x122(0)
val x129 = x128 >= 'a'
val x130 = x128 <= 'z'
val x131 = x129 && x130
val x148 = if (x131) {
val x7 = 0 + 1
val x133 = x7 >= x126
val x146 = if (x133) {
()
} else {
val x134 = x122(x7)
val x135 = x134 >= 'a'
val x136 = x134 <= 'z'
val x137 = x135 && x136
val x144 = if (x137) {
val x138 = x7 + 1
val x140 = (x128,x134)
val x141 = (x140,x138)
x125 = x141
()
} else {
()
}
x144
}
x146
} else {
()
}
x148
}
val x151 = x125
x151
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
((h,e),2)
