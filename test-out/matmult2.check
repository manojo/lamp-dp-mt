error: illegal sharing of mutable objects Sym(6)
at Sym(7)=Reflect(ArrayUpdate(Sym(3),Const(0),Sym(6)),Summary(false,false,false,false,false,List(Sym(3), Sym(6)),List(Sym(3), Sym(6)),List(Sym(3)),List(Sym(3))),List(Sym(6)))
error: write to non-mutable Sym(11) -> Some(TP(Sym(11),Reflect(ArrayApply(Sym(3),Const(0)),Summary(false,false,false,false,false,List(Sym(3)),List(Sym(3)),List(),List()),List(Sym(3), Sym(9)))))
at Sym(89)=Reflect(ArrayUpdate(Sym(11),Sym(1),Sym(88)),Summary(false,false,false,false,false,List(Sym(3)),List(Sym(3)),List(Sym(11)),List(Sym(11))),List(Sym(3), Sym(9), Sym(11)))
error: illegal sharing of mutable objects Sym(3)
at Sym(89)=Reflect(ArrayUpdate(Sym(11),Sym(1),Sym(88)),Summary(false,false,false,false,false,List(Sym(3)),List(Sym(3)),List(Sym(11)),List(Sym(11))),List(Sym(3), Sym(9), Sym(11)))
/*****************************************
  Emitting Generated Code                  
*******************************************/
class test-matmult2 extends ((Array[scala.Tuple2[Int, Int]])=>(scala.Tuple3[Int, Int, Int])) {
def apply(x0:Array[scala.Tuple2[Int, Int]]): scala.Tuple3[Int, Int, Int] = {
val x1 = x0.length
val x2 = x1 + 1
val x3 = new Array[Array[scala.Tuple3[Int, Int, Int]]](x2)
var x5 : Int = 0
val x9 = while (x5 < x2) {
val x6 = new Array[scala.Tuple3[Int, Int, Int]](x2)
val x7 = x3(0) = x6
x7
x5 = x5 + 1
}
val x11 = x3(0)
val x23 = 0 < x1
val x12 = 0 + 1
val x24 = 0 == 0
val x27 = if (x24) {
x12
} else {
val x25 = x1 - 0
val x26 = java.lang.Math.max(x12, x25)
x26
}
val x31 = if (x24) {
val x28 = x1 - 1
x28
} else {
val x28 = x1 - 1
val x29 = 0 + 0
val x30 = java.lang.Math.min(x28, x29)
x30
}
val x32 = x31 + 1
val x33 = x27 until x32
val x34 = x33.toList
val x51 = if (x23) {
val x49 = x34.flatMap { x35 => 
val x36 = x3(0)
val x37 = x36(x35)
val x38 = List(x37)
val x47 = x38.flatMap { x39 => 
val x40 = x3(x35)
val x41 = x40(x1)
val x42 = List(x41)
val x45 = x42.map{
x43 => 
val x44 = (x39,x43)
x44
}
x45
}
x47
}
x49
} else {
val x16 = List()
x16
}
val x10 = (0,100000,0)
var x68: scala.Tuple3[Int, Int, Int] = x10
val x13 = x12 == x1
val x17 = if (x13) {
val x14 = x0(0)
val x15 = List(x14)
x15
} else {
val x16 = List()
x16
}
val x22 = x17.map{
x18 => 
val x19 = x18._1
val x20 = x18._2
val x21 = (x19,0,x20)
x21
}
val x66 = x51.map{
x52 => 
val x53 = x52._1
val x55 = x53._1
val x54 = x52._2
val x60 = x54._3
val x56 = x53._2
val x59 = x54._2
val x61 = x56 + x59
val x57 = x53._3
val x62 = x55 * x57
val x63 = x62 * x60
val x64 = x61 + x63
val x65 = (x55,x64,x60)
x65
}
val x67 = x22 ::: x66
val x69 = x67.toSeq
val x70 = x69.length
var x72 : Int = 0
val x85 = while (x72 < x70) {
val x73 = x68
val x74 = x67(x72)
val x76 = x73._2
val x79 = x74._2
val x81 = x76 < x79
val x82 = if (x81) {
x73
} else {
x74
}
x68 = x82
()
x72 = x72 + 1
}
val x86 = x68
val x87 = List(x86)
val x88 = x87.head
val x89 = x11(x1) = x88
val x90 = x11(x1)
val x91 = List(x90)
val x92 = x91.head
x92
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
