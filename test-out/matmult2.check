error: illegal sharing of mutable objects Sym(6)
at Sym(7)=Reflect(ArrayUpdate(Sym(3),Const(0),Sym(6)),Summary(false,false,false,false,false,List(Sym(3), Sym(6)),List(Sym(3), Sym(6)),List(Sym(3)),List(Sym(3))),List(Sym(6)))
error: write to non-mutable Sym(11) -> Some(TP(Sym(11),Reflect(ArrayApply(Sym(3),Const(0)),Summary(false,false,false,false,false,List(Sym(3)),List(Sym(3)),List(),List()),List(Sym(3), Sym(9)))))
at Sym(82)=Reflect(ArrayUpdate(Sym(11),Sym(1),Sym(81)),Summary(false,false,false,false,false,List(Sym(3)),List(Sym(3)),List(Sym(11)),List(Sym(11))),List(Sym(3), Sym(9), Sym(11)))
error: illegal sharing of mutable objects Sym(3)
at Sym(82)=Reflect(ArrayUpdate(Sym(11),Sym(1),Sym(81)),Summary(false,false,false,false,false,List(Sym(3)),List(Sym(3)),List(Sym(11)),List(Sym(11))),List(Sym(3), Sym(9), Sym(11)))
/*****************************************
  Emitting Generated Code                  
*******************************************/
class test-matmult2 extends ((Array[scala.Tuple2[Int, Int]])=>(scala.Tuple3[Int, Int, Int])) {
def apply(x0:Array[scala.Tuple2[Int, Int]]): scala.Tuple3[Int, Int, Int] = {
val x1 = x0.length
val x2 = x1 + 1
val x3 = new Array[Array[scala.Tuple3[Int, Int, Int]]](x2)
var x5 : Int = 0
val x9 = while (x5 < x2) {
val x6 = new Array[scala.Tuple3[Int, Int, Int]](x2)
val x7 = x3(0) = x6
x7
x5 = x5 + 1
}
val x11 = x3(0)
val x23 = 0 < x1
val x12 = 0 + 1
val x24 = 0 == 0
val x27 = if (x24) {
x12
} else {
val x25 = x1 - 0
val x26 = java.lang.Math.max(x12, x25)
x26
}
val x31 = if (x24) {
val x28 = x1 - 1
x28
} else {
val x28 = x1 - 1
val x29 = 0 + 0
val x30 = java.lang.Math.min(x28, x29)
x30
}
val x32 = x31 + 1
val x33 = x27 until x32
val x34 = x33.toList
val x59 = if (x23) {
val x57 = x34.map{
x35 => 
val x36 = x3(0)
val x37 = x36(x35)
val x40 = x3(x35)
val x41 = x40(x1)
val x38 = List(x37)
val x39 = x38.head
val x45 = x39._1
val x42 = List(x41)
val x43 = x42.head
val x50 = x43._3
val x46 = x39._2
val x49 = x43._2
val x51 = x46 + x49
val x47 = x39._3
val x52 = x45 * x47
val x53 = x52 * x50
val x54 = x51 + x53
val x55 = (x45,x54,x50)
x55
}
x57
} else {
val x16 = List()
x16
}
val x10 = (0,100000,0)
var x61: scala.Tuple3[Int, Int, Int] = x10
val x13 = x12 == x1
val x17 = if (x13) {
val x14 = x0(0)
val x15 = List(x14)
x15
} else {
val x16 = List()
x16
}
val x22 = x17.map{
x18 => 
val x19 = x18._1
val x20 = x18._2
val x21 = (x19,0,x20)
x21
}
val x60 = x22 ::: x59
val x62 = x60.toSeq
val x63 = x62.length
var x65 : Int = 0
val x78 = while (x65 < x63) {
val x66 = x61
val x67 = x60(x65)
val x69 = x66._2
val x72 = x67._2
val x74 = x69 < x72
val x75 = if (x74) {
x66
} else {
x67
}
x61 = x75
()
x65 = x65 + 1
}
val x79 = x61
val x80 = List(x79)
val x81 = x80.head
val x82 = x11(x1) = x81
val x83 = x11(x1)
val x84 = List(x83)
val x85 = x84.head
x85
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
