size of bytearray : 195
/*****************************************
  Emitting Generated Code                  
*******************************************/
class LiftedStringLit extends ((Array[Char])=>(scala.Tuple2[java.lang.String, Int])) {
def apply(x0:Array[Char]): scala.Tuple2[java.lang.String, Int] = {
val x3 = ("",-1)
val x11 = List()
val x9 = 0 + 1
val x1 = {x2: (Array[Char]) => 
var x4: scala.Tuple2[java.lang.String, Int] = x3
val x5 = x2.length
val x6 = 0 >= x5
val x58 = if (x6) {
()
} else {
val x7 = x2(0)
val x8 = x7 == '"'
val x56 = if (x8) {
var x12: scala.collection.immutable.List[Char] = x11
var x13: Int = -1
var x14: Int = x9
val x36 = while ({val x15 = x14
val x16 = x13
val x17 = x15 != x16
x17}) {
val x19 = x14
x13 = x19
val x21 = x19 >= x5
val x34 = if (x21) {
()
} else {
val x22 = x2(x19)
val x23 = x22 != '"'
val x32 = if (x23) {
val x26 = x12
val x27 = List(x22)
val x28 = x26 ::: x27
x12 = x28
val x24 = x19 + 1
x14 = x24
()
} else {
()
}
x32
}
x34
}
val x37 = x12
val x38 = x13
val x40 = x38 >= x5
val x54 = if (x40) {
()
} else {
val x41 = x2(x38)
val x42 = x41 == '"'
val x52 = if (x42) {
val x43 = x38 + 1
val x46 = x37.mkString
val x47 = "StringLit("+x46
val x48 = x47+")"
val x49 = (x48,x43)
x4 = x49
()
} else {
()
}
x52
}
x54
} else {
()
}
x56
}
val x59 = x4
x59
}
val x61 = x1(x0)
x61
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
size of bytearray : 195
compilation: ok
(StringLit(hello),7)
size of bytearray : 7225
size of bytearray : 8673
size of bytearray : 13572
size of bytearray : 14335
size of bytearray : 19346
size of bytearray : 16085
size of bytearray : 21971
size of bytearray : 17835
size of bytearray : 24596
size of bytearray : 19585
size of bytearray : 27221
size of bytearray : 21335
size of bytearray : 29846
size of bytearray : 23085
size of bytearray : 32471
size of bytearray : 24835
size of bytearray : 35096
size of bytearray : 26585
size of bytearray : 37721
size of bytearray : 28335
size of bytearray : 40346
size of bytearray : 30085
size of bytearray : 42971
size of bytearray : 31835
size of bytearray : 45596
size of bytearray : 33585
size of bytearray : 48221
size of bytearray : 35335
size of bytearray : 50846
size of bytearray : 37085
size of bytearray : 53471
size of bytearray : 38835
size of bytearray : 56096
size of bytearray : 40585
size of bytearray : 58721
size of bytearray : 42335
size of bytearray : 61346
size of bytearray : 44085
size of bytearray : 63971
size of bytearray : 45835
size of bytearray : 66596
size of bytearray : 47585
size of bytearray : 69221
size of bytearray : 49335
size of bytearray : 71846
size of bytearray : 51085
size of bytearray : 74471
size of bytearray : 52835
size of bytearray : 77096
size of bytearray : 54585
size of bytearray : 79721
size of bytearray : 56335
size of bytearray : 82346
size of bytearray : 58085
size of bytearray : 84696
size of bytearray : 59160
size of bytearray : 85771
size of bytearray : 59160
size of bytearray : 85771
size of bytearray : 59019
size of bytearray : 85630
size of bytearray : 58913
size of bytearray : 85524
size of bytearray : 58913
size of bytearray : 85524
size of bytearray : 58913
size of bytearray : 85524
size of bytearray : 58913
size of bytearray : 85524
size of bytearray : 58913
size of bytearray : 85524
size of bytearray : 58913
/*****************************************
  Emitting Generated Code                  
*******************************************/
class LiftTerm extends ((Array[Char])=>(scala.Tuple2[java.lang.String, Int])) {
def apply(x66:Array[Char]): scala.Tuple2[java.lang.String, Int] = {
var x651 = null.asInstanceOf[scala.Function1[Int, Unit]]
val x74 = x66.length
x651 = {x652: (Int) => 
val x653 = x652 >= x74
val x672 = if (x653) {
()
} else {
val x654 = x66(x652)
val x655 = x654 >= '0'
val x656 = x654 <= '9'
val x657 = x655 && x656
val x670 = if (x657) {
val x658 = x652 + 1
val x668 = x651(x658)
x668
} else {
()
}
x670
}
x672
}
val x3 = ("",-1)
var x67: scala.Tuple2[java.lang.String, Int] = x3
val x634 = {x635: (Int) => 
val x636 = x635 >= x74
val x678 = if (x636) {
()
} else {
val x637 = x66(x635)
val x638 = x637 >= '0'
val x639 = x637 <= '9'
val x640 = x638 && x639
val x676 = if (x640) {
val x641 = x635 + 1
val x674 = x651(x641)
x674
} else {
()
}
x676
}
x678
}
val x617 = {x618: (Int) => 
val x619 = x618 >= x74
val x684 = if (x619) {
()
} else {
val x620 = x66(x618)
val x621 = x620 >= '0'
val x622 = x620 <= '9'
val x623 = x621 && x622
val x682 = if (x623) {
val x624 = x618 + 1
val x680 = x634(x624)
x680
} else {
()
}
x682
}
x684
}
val x600 = {x601: (Int) => 
val x602 = x601 >= x74
val x690 = if (x602) {
()
} else {
val x603 = x66(x601)
val x604 = x603 >= '0'
val x605 = x603 <= '9'
val x606 = x604 && x605
val x688 = if (x606) {
val x607 = x601 + 1
val x686 = x617(x607)
x686
} else {
()
}
x688
}
x690
}
val x583 = {x584: (Int) => 
val x585 = x584 >= x74
val x696 = if (x585) {
()
} else {
val x586 = x66(x584)
val x587 = x586 >= '0'
val x588 = x586 <= '9'
val x589 = x587 && x588
val x694 = if (x589) {
val x590 = x584 + 1
val x692 = x600(x590)
x692
} else {
()
}
x694
}
x696
}
val x566 = {x567: (Int) => 
val x568 = x567 >= x74
val x702 = if (x568) {
()
} else {
val x569 = x66(x567)
val x570 = x569 >= '0'
val x571 = x569 <= '9'
val x572 = x570 && x571
val x700 = if (x572) {
val x573 = x567 + 1
val x698 = x583(x573)
x698
} else {
()
}
x700
}
x702
}
val x549 = {x550: (Int) => 
val x551 = x550 >= x74
val x708 = if (x551) {
()
} else {
val x552 = x66(x550)
val x553 = x552 >= '0'
val x554 = x552 <= '9'
val x555 = x553 && x554
val x706 = if (x555) {
val x556 = x550 + 1
val x704 = x566(x556)
x704
} else {
()
}
x706
}
x708
}
val x532 = {x533: (Int) => 
val x534 = x533 >= x74
val x714 = if (x534) {
()
} else {
val x535 = x66(x533)
val x536 = x535 >= '0'
val x537 = x535 <= '9'
val x538 = x536 && x537
val x712 = if (x538) {
val x539 = x533 + 1
val x710 = x549(x539)
x710
} else {
()
}
x712
}
x714
}
val x515 = {x516: (Int) => 
val x517 = x516 >= x74
val x720 = if (x517) {
()
} else {
val x518 = x66(x516)
val x519 = x518 >= '0'
val x520 = x518 <= '9'
val x521 = x519 && x520
val x718 = if (x521) {
val x522 = x516 + 1
val x716 = x532(x522)
x716
} else {
()
}
x718
}
x720
}
val x498 = {x499: (Int) => 
val x500 = x499 >= x74
val x726 = if (x500) {
()
} else {
val x501 = x66(x499)
val x502 = x501 >= '0'
val x503 = x501 <= '9'
val x504 = x502 && x503
val x724 = if (x504) {
val x505 = x499 + 1
val x722 = x515(x505)
x722
} else {
()
}
x724
}
x726
}
val x481 = {x482: (Int) => 
val x483 = x482 >= x74
val x732 = if (x483) {
()
} else {
val x484 = x66(x482)
val x485 = x484 >= '0'
val x486 = x484 <= '9'
val x487 = x485 && x486
val x730 = if (x487) {
val x488 = x482 + 1
val x728 = x498(x488)
x728
} else {
()
}
x730
}
x732
}
val x464 = {x465: (Int) => 
val x466 = x465 >= x74
val x738 = if (x466) {
()
} else {
val x467 = x66(x465)
val x468 = x467 >= '0'
val x469 = x467 <= '9'
val x470 = x468 && x469
val x736 = if (x470) {
val x471 = x465 + 1
val x734 = x481(x471)
x734
} else {
()
}
x736
}
x738
}
val x447 = {x448: (Int) => 
val x449 = x448 >= x74
val x744 = if (x449) {
()
} else {
val x450 = x66(x448)
val x451 = x450 >= '0'
val x452 = x450 <= '9'
val x453 = x451 && x452
val x742 = if (x453) {
val x454 = x448 + 1
val x740 = x464(x454)
x740
} else {
()
}
x742
}
x744
}
val x430 = {x431: (Int) => 
val x432 = x431 >= x74
val x750 = if (x432) {
()
} else {
val x433 = x66(x431)
val x434 = x433 >= '0'
val x435 = x433 <= '9'
val x436 = x434 && x435
val x748 = if (x436) {
val x437 = x431 + 1
val x746 = x447(x437)
x746
} else {
()
}
x748
}
x750
}
val x413 = {x414: (Int) => 
val x415 = x414 >= x74
val x756 = if (x415) {
()
} else {
val x416 = x66(x414)
val x417 = x416 >= '0'
val x418 = x416 <= '9'
val x419 = x417 && x418
val x754 = if (x419) {
val x420 = x414 + 1
val x752 = x430(x420)
x752
} else {
()
}
x754
}
x756
}
val x396 = {x397: (Int) => 
val x398 = x397 >= x74
val x762 = if (x398) {
()
} else {
val x399 = x66(x397)
val x400 = x399 >= '0'
val x401 = x399 <= '9'
val x402 = x400 && x401
val x760 = if (x402) {
val x403 = x397 + 1
val x758 = x413(x403)
x758
} else {
()
}
x760
}
x762
}
val x379 = {x380: (Int) => 
val x381 = x380 >= x74
val x768 = if (x381) {
()
} else {
val x382 = x66(x380)
val x383 = x382 >= '0'
val x384 = x382 <= '9'
val x385 = x383 && x384
val x766 = if (x385) {
val x386 = x380 + 1
val x764 = x396(x386)
x764
} else {
()
}
x766
}
x768
}
val x362 = {x363: (Int) => 
val x364 = x363 >= x74
val x774 = if (x364) {
()
} else {
val x365 = x66(x363)
val x366 = x365 >= '0'
val x367 = x365 <= '9'
val x368 = x366 && x367
val x772 = if (x368) {
val x369 = x363 + 1
val x770 = x379(x369)
x770
} else {
()
}
x772
}
x774
}
val x345 = {x346: (Int) => 
val x347 = x346 >= x74
val x780 = if (x347) {
()
} else {
val x348 = x66(x346)
val x349 = x348 >= '0'
val x350 = x348 <= '9'
val x351 = x349 && x350
val x778 = if (x351) {
val x352 = x346 + 1
val x776 = x362(x352)
x776
} else {
()
}
x778
}
x780
}
val x328 = {x329: (Int) => 
val x330 = x329 >= x74
val x786 = if (x330) {
()
} else {
val x331 = x66(x329)
val x332 = x331 >= '0'
val x333 = x331 <= '9'
val x334 = x332 && x333
val x784 = if (x334) {
val x335 = x329 + 1
val x782 = x345(x335)
x782
} else {
()
}
x784
}
x786
}
val x311 = {x312: (Int) => 
val x313 = x312 >= x74
val x792 = if (x313) {
()
} else {
val x314 = x66(x312)
val x315 = x314 >= '0'
val x316 = x314 <= '9'
val x317 = x315 && x316
val x790 = if (x317) {
val x318 = x312 + 1
val x788 = x328(x318)
x788
} else {
()
}
x790
}
x792
}
val x294 = {x295: (Int) => 
val x296 = x295 >= x74
val x798 = if (x296) {
()
} else {
val x297 = x66(x295)
val x298 = x297 >= '0'
val x299 = x297 <= '9'
val x300 = x298 && x299
val x796 = if (x300) {
val x301 = x295 + 1
val x794 = x311(x301)
x794
} else {
()
}
x796
}
x798
}
val x277 = {x278: (Int) => 
val x279 = x278 >= x74
val x804 = if (x279) {
()
} else {
val x280 = x66(x278)
val x281 = x280 >= '0'
val x282 = x280 <= '9'
val x283 = x281 && x282
val x802 = if (x283) {
val x284 = x278 + 1
val x800 = x294(x284)
x800
} else {
()
}
x802
}
x804
}
val x260 = {x261: (Int) => 
val x262 = x261 >= x74
val x810 = if (x262) {
()
} else {
val x263 = x66(x261)
val x264 = x263 >= '0'
val x265 = x263 <= '9'
val x266 = x264 && x265
val x808 = if (x266) {
val x267 = x261 + 1
val x806 = x277(x267)
x806
} else {
()
}
x808
}
x810
}
val x243 = {x244: (Int) => 
val x245 = x244 >= x74
val x816 = if (x245) {
()
} else {
val x246 = x66(x244)
val x247 = x246 >= '0'
val x248 = x246 <= '9'
val x249 = x247 && x248
val x814 = if (x249) {
val x250 = x244 + 1
val x812 = x260(x250)
x812
} else {
()
}
x814
}
x816
}
val x226 = {x227: (Int) => 
val x228 = x227 >= x74
val x822 = if (x228) {
()
} else {
val x229 = x66(x227)
val x230 = x229 >= '0'
val x231 = x229 <= '9'
val x232 = x230 && x231
val x820 = if (x232) {
val x233 = x227 + 1
val x818 = x243(x233)
x818
} else {
()
}
x820
}
x822
}
val x209 = {x210: (Int) => 
val x211 = x210 >= x74
val x828 = if (x211) {
()
} else {
val x212 = x66(x210)
val x213 = x212 >= '0'
val x214 = x212 <= '9'
val x215 = x213 && x214
val x826 = if (x215) {
val x216 = x210 + 1
val x824 = x226(x216)
x824
} else {
()
}
x826
}
x828
}
val x192 = {x193: (Int) => 
val x194 = x193 >= x74
val x834 = if (x194) {
()
} else {
val x195 = x66(x193)
val x196 = x195 >= '0'
val x197 = x195 <= '9'
val x198 = x196 && x197
val x832 = if (x198) {
val x199 = x193 + 1
val x830 = x209(x199)
x830
} else {
()
}
x832
}
x834
}
val x175 = {x176: (Int) => 
val x177 = x176 >= x74
val x840 = if (x177) {
()
} else {
val x178 = x66(x176)
val x179 = x178 >= '0'
val x180 = x178 <= '9'
val x181 = x179 && x180
val x838 = if (x181) {
val x182 = x176 + 1
val x836 = x192(x182)
x836
} else {
()
}
x838
}
x840
}
val x158 = {x159: (Int) => 
val x160 = x159 >= x74
val x846 = if (x160) {
()
} else {
val x161 = x66(x159)
val x162 = x161 >= '0'
val x163 = x161 <= '9'
val x164 = x162 && x163
val x844 = if (x164) {
val x165 = x159 + 1
val x842 = x175(x165)
x842
} else {
()
}
x844
}
x846
}
val x141 = {x142: (Int) => 
val x143 = x142 >= x74
val x852 = if (x143) {
()
} else {
val x144 = x66(x142)
val x145 = x144 >= '0'
val x146 = x144 <= '9'
val x147 = x145 && x146
val x850 = if (x147) {
val x148 = x142 + 1
val x848 = x158(x148)
x848
} else {
()
}
x850
}
x852
}
val x124 = {x125: (Int) => 
val x126 = x125 >= x74
val x858 = if (x126) {
()
} else {
val x127 = x66(x125)
val x128 = x127 >= '0'
val x129 = x127 <= '9'
val x130 = x128 && x129
val x856 = if (x130) {
val x131 = x125 + 1
val x854 = x141(x131)
x854
} else {
()
}
x856
}
x858
}
val x107 = {x108: (Int) => 
val x109 = x108 >= x74
val x864 = if (x109) {
()
} else {
val x110 = x66(x108)
val x111 = x110 >= '0'
val x112 = x110 <= '9'
val x113 = x111 && x112
val x862 = if (x113) {
val x114 = x108 + 1
val x860 = x124(x114)
x860
} else {
()
}
x862
}
x864
}
val x90 = {x91: (Int) => 
val x92 = x91 >= x74
val x870 = if (x92) {
()
} else {
val x93 = x66(x91)
val x94 = x93 >= '0'
val x95 = x93 <= '9'
val x96 = x94 && x95
val x868 = if (x96) {
val x97 = x91 + 1
val x866 = x107(x97)
x866
} else {
()
}
x868
}
x870
}
val x72 = {x73: (Int) => 
val x75 = x73 >= x74
val x876 = if (x75) {
()
} else {
val x76 = x66(x73)
val x77 = x76 >= '0'
val x78 = x76 <= '9'
val x79 = x77 && x78
val x874 = if (x79) {
val x80 = x73 + 1
val x872 = x90(x80)
x872
} else {
()
}
x874
}
x876
}
val x878 = x72(0)
val x879 = x67
x879
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
size of bytearray : 7321
size of bytearray : 8794
size of bytearray : 13718
size of bytearray : 14481
size of bytearray : 19517
size of bytearray : 16231
size of bytearray : 22142
size of bytearray : 17981
size of bytearray : 24767
size of bytearray : 19731
size of bytearray : 27392
size of bytearray : 21481
size of bytearray : 30017
size of bytearray : 23231
size of bytearray : 32642
nVars=1000
size of bytearray : 24981
size of bytearray : 35267
size of bytearray : 26731
size of bytearray : 37892
size of bytearray : 28481
size of bytearray : 40517
size of bytearray : 30231
size of bytearray : 43142
size of bytearray : 31981
size of bytearray : 45767
size of bytearray : 33731
size of bytearray : 48392
size of bytearray : 35481
size of bytearray : 51017
size of bytearray : 37231
size of bytearray : 53642
size of bytearray : 38981
size of bytearray : 56267
size of bytearray : 40731
size of bytearray : 58892
size of bytearray : 42481
size of bytearray : 61517
size of bytearray : 44231
size of bytearray : 64142
size of bytearray : 45981
size of bytearray : 66767
size of bytearray : 47731
size of bytearray : 69392
size of bytearray : 49481
size of bytearray : 72017
size of bytearray : 51231
size of bytearray : 74642
size of bytearray : 52981
size of bytearray : 77267
size of bytearray : 54731
size of bytearray : 79892
size of bytearray : 56481
size of bytearray : 82517
size of bytearray : 58231
size of bytearray : 84842
size of bytearray : 59256
size of bytearray : 85867
size of bytearray : 59256
size of bytearray : 85867
size of bytearray : 59115
size of bytearray : 85726
size of bytearray : 59009
size of bytearray : 85620
size of bytearray : 59009
size of bytearray : 85620
size of bytearray : 59009
size of bytearray : 85620
size of bytearray : 59009
compilation: ok
(,-1)
