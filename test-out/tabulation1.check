error: illegal sharing of mutable objects Sym(7)
at Sym(8)=Reflect(ArrayUpdate(Sym(3),Const(0),Sym(7)),Summary(false,false,false,false,false,List(Sym(3), Sym(7)),List(Sym(3), Sym(7)),List(Sym(3)),List(Sym(3))),List(Sym(7)))
error: write to non-mutable Sym(11) -> Some(TP(Sym(11),Reflect(ArrayApply(Sym(3),Const(0)),Summary(false,false,false,false,false,List(Sym(3)),List(Sym(3)),List(),List()),List(Sym(3), Sym(10)))))
at Sym(22)=Reflect(ArrayUpdate(Sym(11),Const(1),Sym(21)),Summary(false,false,false,false,false,List(Sym(3)),List(Sym(3)),List(Sym(11)),List(Sym(11))),List(Sym(3), Sym(10), Sym(11)))
error: illegal sharing of mutable objects Sym(3)
at Sym(22)=Reflect(ArrayUpdate(Sym(11),Const(1),Sym(21)),Summary(false,false,false,false,false,List(Sym(3)),List(Sym(3)),List(Sym(11)),List(Sym(11))),List(Sym(3), Sym(10), Sym(11)))
/*****************************************
  Emitting Generated Code                  
*******************************************/
class test-tabulation extends ((Array[Char])=>(Char)) {
def apply(x0:Array[Char]): Char = {
val x1 = x0.length
val x2 = x1 + 1
val x3 = new Array[Array[Char]](x2)
val x4 = x1 + 2
var x6 : Int = 0
val x10 = while (x6 < x4) {
val x7 = new Array[Char](x2)
val x8 = x3(0) = x7
x8
x6 = x6 + 1
}
val x11 = x3(0)
val x12 = 0 + 1
val x13 = x12 == 1
val x14 = x0(0)
val x15 = x14 == 'm'
val x16 = x13 && x15
val x20 = if (x16) {
val x19 = if (x13) {
val x17 = List(x14)
x17
} else {
val x18 = List()
x18
}
x19
} else {
val x18 = List()
x18
}
val x21 = x20.head
val x22 = x11(1) = x21
val x23 = x11(1)
val x24 = List(x23)
val x25 = x24.head
x25
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
